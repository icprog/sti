// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "client.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
STI_Client_Server::TOverwritten::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  _n.marshalString(value,0);

}

void
STI_Client_Server::TOverwritten::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  value = _n.unmarshalString(0);

}

void
STI_Client_Server::TChannel::operator>>= (cdrStream &_n) const
{
  (const STI_Server_Device::TDevice&) device >>= _n;
  channel >>= _n;
  type >>= _n;
  inputType >>= _n;
  outputType >>= _n;

}

void
STI_Client_Server::TChannel::operator<<= (cdrStream &_n)
{
  (STI_Server_Device::TDevice&)device <<= _n;
  (::CORBA::UShort&)channel <<= _n;
  (STI_Server_Device::TChannelType&)type <<= _n;
  (STI_Server_Device::TData&)inputType <<= _n;
  (STI_Server_Device::TValue&)outputType <<= _n;

}

STI_Client_Server::TVarMixedSeq::TVarMixedSeq(const ::STI_Client_Server::TVarMixedSeq& _s)
  : _CORBA_Unbounded_Sequence_Forward< STI_Client_Server::TVarMixed > (_s.pd_max, 0, 0, 1)
{
  length(_s.pd_len);
  for (_CORBA_ULong _i=0; _i < pd_len; _i++) {
    pd_buf[_i] = _s.pd_buf[_i];
  }
}

void
STI_Client_Server::TVarMixedSeq::operator<<= (cdrStream& _s)
{
  _CORBA_ULong _l;
  _l <<= _s;
  if (!_s.checkInputOverrun(1,_l)) {
    _CORBA_marshal_sequence_range_check_error(_s);
    // never reach here
  }
  length(_l);
  for( _CORBA_ULong _i = 0; _i < _l; _i++ )
    pd_buf[_i] <<= _s;
}

void
STI_Client_Server::TVarMixedSeq::operator>>= (cdrStream& _s) const
{
  ::operator>>=(_CORBA_ULong(pd_len), _s);
  for( _CORBA_ULong _i = 0; _i < pd_len; _i++ )
    pd_buf[_i] >>= _s;
}

STI_Client_Server::TVarMixedSeq&
STI_Client_Server::TVarMixedSeq::operator=(const ::STI_Client_Server::TVarMixedSeq& _s)
{
  length(_s.pd_len);
  for (unsigned long _i=0; _i < pd_len; _i++) {
    pd_buf[_i] = _s.pd_buf[_i];
  }
  return *this;
}

STI_Client_Server::TVarMixed&
STI_Client_Server::TVarMixedSeq::operator[](_CORBA_ULong _index)
{
  if (_index >= pd_len) _CORBA_bound_check_error();
  return pd_buf[_index];
}

const STI_Client_Server::TVarMixed&
STI_Client_Server::TVarMixedSeq::operator[](_CORBA_ULong _index) const
{
  if (_index >= pd_len) _CORBA_bound_check_error();
  return pd_buf[_index];
}

STI_Client_Server::TVarMixed*
STI_Client_Server::TVarMixedSeq::allocbuf(_CORBA_ULong _nelems)
{
  ::STI_Client_Server::TVarMixed* _tmp = 0;
  if (_nelems) {
    _tmp = new ::STI_Client_Server::TVarMixed[_nelems];
  }
  return _tmp;
}

void
STI_Client_Server::TVarMixedSeq::freebuf(::STI_Client_Server::TVarMixed* _b)
{
  if (_b) delete [] _b;
}

void
STI_Client_Server::TVarMixedSeq::NP_freebuf()
{
  if (pd_buf) delete [] pd_buf;
}

STI_Client_Server::TVarMixedSeq::~TVarMixedSeq()
{
  if (pd_rel && pd_buf) delete [] pd_buf;
  pd_buf = 0;
}

void
STI_Client_Server::TVarMixedSeq::NP_copybuffer(_CORBA_ULong _newmax)
{
  // replace pd_data with a new buffer of size newmax.
  // Invariant:  pd_len <= newmax
  //
  ::STI_Client_Server::TVarMixed* _newbuf = allocbuf(_newmax);
  if (!_newbuf) {
    _CORBA_new_operator_return_null();
    // never reach here
  }
  for (unsigned long _i=0; _i < pd_len; _i++) {
    _newbuf[_i] = pd_buf[_i];
  }
  if (pd_rel && pd_buf) {
    freebuf(pd_buf);
  }
  else {
    pd_rel = 1;
  }
  pd_buf = _newbuf;
  pd_max = _newmax;
}

void
STI_Client_Server::TVarMixed::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  switch(_pd__d) {
    case TypeNumber:
      _pd_number >>= _n;
      break;
    case TypeString:
      _n.marshalString(_pd_stringVal,0);
      break;
    case TypeChannel:
      _pd_channel >>= _n;
      break;
    case TypeList:
      (const TVarMixedSeq&) _pd_list >>= _n;
      break;
    case TypeObject:
      _n.marshalString(_pd_objectVal,0);
      break;
    default: break;

  
  }


}

void
STI_Client_Server::TVarMixed::operator<<= (cdrStream& _n)
{
  (TType&)_pd__d <<= _n;

  switch(_pd__d) {
    case TypeNumber:
      _pd__default = 0;
      (::CORBA::Double&)_pd_number <<= _n;
      break;
    case TypeString:
      _pd__default = 0;
      _pd_stringVal = _n.unmarshalString(0);
      break;
    case TypeChannel:
      _pd__default = 0;
      (::CORBA::UShort&)_pd_channel <<= _n;
      break;
    case TypeList:
      _pd__default = 0;
      (TVarMixedSeq&)_pd_list <<= _n;
      break;
    case TypeObject:
      _pd__default = 0;
      _pd_objectVal = _n.unmarshalString(0);
      break;

  }
  _pd__initialised = 1;
}

void
STI_Client_Server::TPosition::operator>>= (cdrStream &_n) const
{
  file >>= _n;
  line >>= _n;

}

void
STI_Client_Server::TPosition::operator<<= (cdrStream &_n)
{
  (::CORBA::UShort&)file <<= _n;
  (::CORBA::ULong&)line <<= _n;

}

void
STI_Client_Server::TVariable::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  (const TVarMixed&) value >>= _n;
  (const TPosition&) pos >>= _n;

}

void
STI_Client_Server::TVariable::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (TVarMixed&)value <<= _n;
  (TPosition&)pos <<= _n;

}

void
STI_Client_Server::TDDS::operator>>= (cdrStream &_n) const
{
  freq >>= _n;
  phase >>= _n;
  ampl >>= _n;

}

void
STI_Client_Server::TDDS::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)freq <<= _n;
  (::CORBA::Double&)phase <<= _n;
  (::CORBA::Double&)ampl <<= _n;

}

void
STI_Client_Server::TEvent::operator>>= (cdrStream &_n) const
{
  channel >>= _n;
  time >>= _n;
  (const STI_Server_Device::TValMixed&) value >>= _n;
  (const TPosition&) pos >>= _n;

}

void
STI_Client_Server::TEvent::operator<<= (cdrStream &_n)
{
  (::CORBA::UShort&)channel <<= _n;
  (::CORBA::Double&)time <<= _n;
  (STI_Server_Device::TValMixed&)value <<= _n;
  (TPosition&)pos <<= _n;

}

STI_Client_Server::ModeInterrupt_ptr STI_Client_Server::ModeInterrupt_Helper::_nil() {
  return ::STI_Client_Server::ModeInterrupt::_nil();
}

::CORBA::Boolean STI_Client_Server::ModeInterrupt_Helper::is_nil(::STI_Client_Server::ModeInterrupt_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::ModeInterrupt_Helper::release(::STI_Client_Server::ModeInterrupt_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::ModeInterrupt_Helper::marshalObjRef(::STI_Client_Server::ModeInterrupt_ptr obj, cdrStream& s) {
  ::STI_Client_Server::ModeInterrupt::_marshalObjRef(obj, s);
}

STI_Client_Server::ModeInterrupt_ptr STI_Client_Server::ModeInterrupt_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::ModeInterrupt::_unmarshalObjRef(s);
}

void STI_Client_Server::ModeInterrupt_Helper::duplicate(::STI_Client_Server::ModeInterrupt_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::ModeInterrupt_ptr
STI_Client_Server::ModeInterrupt::_duplicate(::STI_Client_Server::ModeInterrupt_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::ModeInterrupt_ptr
STI_Client_Server::ModeInterrupt::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::ModeInterrupt_ptr
STI_Client_Server::ModeInterrupt::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::ModeInterrupt_ptr
STI_Client_Server::ModeInterrupt::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ModeInterrupt _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ModeInterrupt* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ModeInterrupt;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::ModeInterrupt::_PD_repoId = "IDL:STI_Client_Server/ModeInterrupt:1.0";


STI_Client_Server::_objref_ModeInterrupt::~_objref_ModeInterrupt() {
  
}


STI_Client_Server::_objref_ModeInterrupt::_objref_ModeInterrupt(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::ModeInterrupt::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_ModeInterrupt::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::ModeInterrupt::_PD_repoId )
    return (::STI_Client_Server::ModeInterrupt_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::ModeInterrupt::_PD_repoId) )
    return (::STI_Client_Server::ModeInterrupt_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring
class _0RL_cd_3085e22bd952fa98_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_3085e22bd952fa98_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_3085e22bd952fa98_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_00000000* tcd = (_0RL_cd_3085e22bd952fa98_00000000*)cd;
  STI_Client_Server::_impl_ModeInterrupt* impl = (STI_Client_Server::_impl_ModeInterrupt*) svnt->_ptrToInterface(STI_Client_Server::ModeInterrupt::_PD_repoId);
  impl->requestControl(tcd->arg_0, tcd->arg_1);


}

void STI_Client_Server::_objref_ModeInterrupt::requestControl(const char* myName, const char* ipAddress)
{
  _0RL_cd_3085e22bd952fa98_00000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_10000000, "requestControl", 15);
  _call_desc.arg_0 = myName;
  _call_desc.arg_1 = ipAddress;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_20000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_00000000* tcd = (_0RL_cd_3085e22bd952fa98_00000000*)cd;
  STI_Client_Server::_impl_ModeInterrupt* impl = (STI_Client_Server::_impl_ModeInterrupt*) svnt->_ptrToInterface(STI_Client_Server::ModeInterrupt::_PD_repoId);
  impl->controlTakenBy(tcd->arg_0, tcd->arg_1);


}

void STI_Client_Server::_objref_ModeInterrupt::controlTakenBy(const char* myName, const char* ipAddress)
{
  _0RL_cd_3085e22bd952fa98_00000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_20000000, "controlTakenBy", 15);
  _call_desc.arg_0 = myName;
  _call_desc.arg_1 = ipAddress;

  _invoke(_call_desc);



}
STI_Client_Server::_pof_ModeInterrupt::~_pof_ModeInterrupt() {}


omniObjRef*
STI_Client_Server::_pof_ModeInterrupt::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_ModeInterrupt(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_ModeInterrupt::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::ModeInterrupt::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_ModeInterrupt _the_pof_STI__Client__Server_mModeInterrupt;

STI_Client_Server::_impl_ModeInterrupt::~_impl_ModeInterrupt() {}


::CORBA::Boolean
STI_Client_Server::_impl_ModeInterrupt::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "requestControl") ) {

    _0RL_cd_3085e22bd952fa98_00000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_10000000, "requestControl", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "controlTakenBy") ) {

    _0RL_cd_3085e22bd952fa98_00000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_20000000, "controlTakenBy", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_ModeInterrupt::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::ModeInterrupt::_PD_repoId )
    return (::STI_Client_Server::_impl_ModeInterrupt*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::ModeInterrupt::_PD_repoId) )
    return (::STI_Client_Server::_impl_ModeInterrupt*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_ModeInterrupt::_mostDerivedRepoId()
{
  return ::STI_Client_Server::ModeInterrupt::_PD_repoId;
}

STI_Client_Server::ModeHandler_ptr STI_Client_Server::ModeHandler_Helper::_nil() {
  return ::STI_Client_Server::ModeHandler::_nil();
}

::CORBA::Boolean STI_Client_Server::ModeHandler_Helper::is_nil(::STI_Client_Server::ModeHandler_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::ModeHandler_Helper::release(::STI_Client_Server::ModeHandler_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::ModeHandler_Helper::marshalObjRef(::STI_Client_Server::ModeHandler_ptr obj, cdrStream& s) {
  ::STI_Client_Server::ModeHandler::_marshalObjRef(obj, s);
}

STI_Client_Server::ModeHandler_ptr STI_Client_Server::ModeHandler_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::ModeHandler::_unmarshalObjRef(s);
}

void STI_Client_Server::ModeHandler_Helper::duplicate(::STI_Client_Server::ModeHandler_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_duplicate(::STI_Client_Server::ModeHandler_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ModeHandler _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ModeHandler* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ModeHandler;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::ModeHandler::_PD_repoId = "IDL:STI_Client_Server/ModeHandler:1.0";


STI_Client_Server::_objref_ModeHandler::~_objref_ModeHandler() {
  
}


STI_Client_Server::_objref_ModeHandler::_objref_ModeHandler(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::ModeHandler::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_ModeHandler::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::ModeHandler::_PD_repoId )
    return (::STI_Client_Server::ModeHandler_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::ModeHandler::_PD_repoId) )
    return (::STI_Client_Server::ModeHandler_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring_i_cSTI__Client__Server_mModeInterrupt
class _0RL_cd_3085e22bd952fa98_30000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_30000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  STI_Client_Server::ModeInterrupt_var arg_2_;
  STI_Client_Server::ModeInterrupt_ptr arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_3085e22bd952fa98_30000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  STI_Client_Server::ModeInterrupt::_marshalObjRef(arg_2,_n);

}

void _0RL_cd_3085e22bd952fa98_30000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = STI_Client_Server::ModeInterrupt::_unmarshalObjRef(_n);
  arg_2 = arg_2_.in();

}

void _0RL_cd_3085e22bd952fa98_30000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_3085e22bd952fa98_30000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_40000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_30000000* tcd = (_0RL_cd_3085e22bd952fa98_30000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->requestControl(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean STI_Client_Server::_objref_ModeHandler::requestControl(const char* myName, const char* ipAddress, ModeInterrupt_ptr interrupt)
{
  _0RL_cd_3085e22bd952fa98_30000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_40000000, "requestControl", 15);
  _call_desc.arg_0 = myName;
  _call_desc.arg_1 = ipAddress;
  _call_desc.arg_2 = interrupt;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_30000000* tcd = (_0RL_cd_3085e22bd952fa98_30000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->takeControl(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean STI_Client_Server::_objref_ModeHandler::takeControl(const char* myName, const char* ipAddress, ModeInterrupt_ptr interrupt)
{
  _0RL_cd_3085e22bd952fa98_30000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_50000000, "takeControl", 12);
  _call_desc.arg_0 = myName;
  _call_desc.arg_1 = ipAddress;
  _call_desc.arg_2 = interrupt;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_3085e22bd952fa98_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
    
  
  
};

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_70000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  impl->cancelRequest();


}

void STI_Client_Server::_objref_ModeHandler::cancelRequest()
{
  _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_70000000, "cancelRequest", 14);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cboolean
class _0RL_cd_3085e22bd952fa98_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::Boolean arg_0;
};

void _0RL_cd_3085e22bd952fa98_80000000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);

}

void _0RL_cd_3085e22bd952fa98_80000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_80000000* tcd = (_0RL_cd_3085e22bd952fa98_80000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  impl->answerRequest(tcd->arg_0);


}

void STI_Client_Server::_objref_ModeHandler::answerRequest(::CORBA::Boolean yield)
{
  _0RL_cd_3085e22bd952fa98_80000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_90000000, "answerRequest", 14);
  _call_desc.arg_0 = yield;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_3085e22bd952fa98_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_a0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var result;
};

void _0RL_cd_3085e22bd952fa98_a0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_3085e22bd952fa98_a0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a0000000* tcd = (_0RL_cd_3085e22bd952fa98_a0000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->controllerName();


}

char* STI_Client_Server::_objref_ModeHandler::controllerName()
{
  _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_b0000000, "_get_controllerName", 20);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a0000000* tcd = (_0RL_cd_3085e22bd952fa98_a0000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->controllerIP();


}

char* STI_Client_Server::_objref_ModeHandler::controllerIP()
{
  _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_c0000000, "_get_controllerIP", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_ModeHandler::~_pof_ModeHandler() {}


omniObjRef*
STI_Client_Server::_pof_ModeHandler::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_ModeHandler(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_ModeHandler::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::ModeHandler::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_ModeHandler _the_pof_STI__Client__Server_mModeHandler;

STI_Client_Server::_impl_ModeHandler::~_impl_ModeHandler() {}


::CORBA::Boolean
STI_Client_Server::_impl_ModeHandler::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "requestControl") ) {

    _0RL_cd_3085e22bd952fa98_30000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_40000000, "requestControl", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "takeControl") ) {

    _0RL_cd_3085e22bd952fa98_30000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_50000000, "takeControl", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "cancelRequest") ) {

    _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_70000000, "cancelRequest", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "answerRequest") ) {

    _0RL_cd_3085e22bd952fa98_80000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_90000000, "answerRequest", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_controllerName") ) {

    _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_b0000000, "_get_controllerName", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_controllerIP") ) {

    _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_c0000000, "_get_controllerIP", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_ModeHandler::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::ModeHandler::_PD_repoId )
    return (::STI_Client_Server::_impl_ModeHandler*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::ModeHandler::_PD_repoId) )
    return (::STI_Client_Server::_impl_ModeHandler*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_ModeHandler::_mostDerivedRepoId()
{
  return ::STI_Client_Server::ModeHandler::_PD_repoId;
}

STI_Client_Server::Messenger_ptr STI_Client_Server::Messenger_Helper::_nil() {
  return ::STI_Client_Server::Messenger::_nil();
}

::CORBA::Boolean STI_Client_Server::Messenger_Helper::is_nil(::STI_Client_Server::Messenger_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::Messenger_Helper::release(::STI_Client_Server::Messenger_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::Messenger_Helper::marshalObjRef(::STI_Client_Server::Messenger_ptr obj, cdrStream& s) {
  ::STI_Client_Server::Messenger::_marshalObjRef(obj, s);
}

STI_Client_Server::Messenger_ptr STI_Client_Server::Messenger_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::Messenger::_unmarshalObjRef(s);
}

void STI_Client_Server::Messenger_Helper::duplicate(::STI_Client_Server::Messenger_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::Messenger_ptr
STI_Client_Server::Messenger::_duplicate(::STI_Client_Server::Messenger_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::Messenger_ptr
STI_Client_Server::Messenger::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::Messenger_ptr
STI_Client_Server::Messenger::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::Messenger_ptr
STI_Client_Server::Messenger::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Messenger _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Messenger* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Messenger;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::Messenger::_PD_repoId = "IDL:STI_Client_Server/Messenger:1.0";


STI_Client_Server::_objref_Messenger::~_objref_Messenger() {
  
}


STI_Client_Server::_objref_Messenger::_objref_Messenger(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::Messenger::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_Messenger::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::Messenger::_PD_repoId )
    return (::STI_Client_Server::Messenger_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::Messenger::_PD_repoId) )
    return (::STI_Client_Server::Messenger_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_3085e22bd952fa98_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_d0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_3085e22bd952fa98_d0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_3085e22bd952fa98_d0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_d0000000* tcd = (_0RL_cd_3085e22bd952fa98_d0000000*)cd;
  STI_Client_Server::_impl_Messenger* impl = (STI_Client_Server::_impl_Messenger*) svnt->_ptrToInterface(STI_Client_Server::Messenger::_PD_repoId);
  impl->sendMessage(tcd->arg_0);


}

void STI_Client_Server::_objref_Messenger::sendMessage(const char* message)
{
  _0RL_cd_3085e22bd952fa98_d0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_e0000000, "sendMessage", 12);
  _call_desc.arg_0 = message;

  _invoke(_call_desc);



}
STI_Client_Server::_pof_Messenger::~_pof_Messenger() {}


omniObjRef*
STI_Client_Server::_pof_Messenger::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_Messenger(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_Messenger::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::Messenger::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_Messenger _the_pof_STI__Client__Server_mMessenger;

STI_Client_Server::_impl_Messenger::~_impl_Messenger() {}


::CORBA::Boolean
STI_Client_Server::_impl_Messenger::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "sendMessage") ) {

    _0RL_cd_3085e22bd952fa98_d0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_e0000000, "sendMessage", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_Messenger::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::Messenger::_PD_repoId )
    return (::STI_Client_Server::_impl_Messenger*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::Messenger::_PD_repoId) )
    return (::STI_Client_Server::_impl_Messenger*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_Messenger::_mostDerivedRepoId()
{
  return ::STI_Client_Server::Messenger::_PD_repoId;
}

STI_Client_Server::Parser_ptr STI_Client_Server::Parser_Helper::_nil() {
  return ::STI_Client_Server::Parser::_nil();
}

::CORBA::Boolean STI_Client_Server::Parser_Helper::is_nil(::STI_Client_Server::Parser_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::Parser_Helper::release(::STI_Client_Server::Parser_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::Parser_Helper::marshalObjRef(::STI_Client_Server::Parser_ptr obj, cdrStream& s) {
  ::STI_Client_Server::Parser::_marshalObjRef(obj, s);
}

STI_Client_Server::Parser_ptr STI_Client_Server::Parser_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::Parser::_unmarshalObjRef(s);
}

void STI_Client_Server::Parser_Helper::duplicate(::STI_Client_Server::Parser_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_duplicate(::STI_Client_Server::Parser_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Parser _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Parser* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Parser;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::Parser::_PD_repoId = "IDL:STI_Client_Server/Parser:1.0";


STI_Client_Server::_objref_Parser::~_objref_Parser() {
  
}


STI_Client_Server::_objref_Parser::_objref_Parser(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::Parser::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_Parser::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::Parser::_PD_repoId )
    return (::STI_Client_Server::Parser_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::Parser::_PD_repoId) )
    return (::STI_Client_Server::Parser_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cSTI__Client__Server_mMessenger
class _0RL_cd_3085e22bd952fa98_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_f0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI_Client_Server::Messenger_var arg_1_;
  STI_Client_Server::Messenger_ptr arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_3085e22bd952fa98_f0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  STI_Client_Server::Messenger::_marshalObjRef(arg_1,_n);

}

void _0RL_cd_3085e22bd952fa98_f0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = STI_Client_Server::Messenger::_unmarshalObjRef(_n);
  arg_1 = arg_1_.in();

}

void _0RL_cd_3085e22bd952fa98_f0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_3085e22bd952fa98_f0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_f0000000* tcd = (_0RL_cd_3085e22bd952fa98_f0000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->parseFile(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean STI_Client_Server::_objref_Parser::parseFile(const char* filename, Messenger_ptr parserCallback)
{
  _0RL_cd_3085e22bd952fa98_f0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_01000000, "parseFile", 10);
  _call_desc.arg_0 = filename;
  _call_desc.arg_1 = parserCallback;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_3085e22bd952fa98_11000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_11000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_3085e22bd952fa98_11000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_3085e22bd952fa98_11000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_3085e22bd952fa98_11000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_3085e22bd952fa98_11000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_11000000* tcd = (_0RL_cd_3085e22bd952fa98_11000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->parseString(tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_Parser::parseString(const char* code)
{
  _0RL_cd_3085e22bd952fa98_11000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_21000000, "parseString", 12);
  _call_desc.arg_0 = code;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_11000000* tcd = (_0RL_cd_3085e22bd952fa98_11000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->parseLoopScript(tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_Parser::parseLoopScript(const char* script)
{
  _0RL_cd_3085e22bd952fa98_11000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_31000000, "parseLoopScript", 16);
  _call_desc.arg_0 = script;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTOverwrittenSeq
class _0RL_cd_3085e22bd952fa98_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_41000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TOverwrittenSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_41000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TOverwrittenSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_41000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TOverwrittenSeq;
  (STI_Client_Server::TOverwrittenSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_41000000* tcd = (_0RL_cd_3085e22bd952fa98_41000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->overwritten();


}

STI_Client_Server::TOverwrittenSeq* STI_Client_Server::_objref_Parser::overwritten()
{
  _0RL_cd_3085e22bd952fa98_41000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_51000000, "_get_overwritten", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cSTI__Client__Server_mTOverwrittenSeq
class _0RL_cd_3085e22bd952fa98_61000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_61000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  STI_Client_Server::TOverwrittenSeq_var arg_0_;
  const STI_Client_Server::TOverwrittenSeq* arg_0;
};

void _0RL_cd_3085e22bd952fa98_61000000::marshalArguments(cdrStream& _n)
{
  (const STI_Client_Server::TOverwrittenSeq&) *arg_0 >>= _n;

}

void _0RL_cd_3085e22bd952fa98_61000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI_Client_Server::TOverwrittenSeq;
  (STI_Client_Server::TOverwrittenSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_61000000* tcd = (_0RL_cd_3085e22bd952fa98_61000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  impl->overwritten(*tcd->arg_0);


}

void STI_Client_Server::_objref_Parser::overwritten(const TOverwrittenSeq& _v)
{
  _0RL_cd_3085e22bd952fa98_61000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_71000000, "_set_overwritten", 17);
  _call_desc.arg_0 = &(TOverwrittenSeq&) _v;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_3085e22bd952fa98_81000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_81000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::Boolean result;
};

void _0RL_cd_3085e22bd952fa98_81000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_3085e22bd952fa98_81000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_81000000* tcd = (_0RL_cd_3085e22bd952fa98_81000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->lockOnParse();


}

::CORBA::Boolean STI_Client_Server::_objref_Parser::lockOnParse()
{
  _0RL_cd_3085e22bd952fa98_81000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_91000000, "_get_lockOnParse", 17);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_a1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_80000000* tcd = (_0RL_cd_3085e22bd952fa98_80000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  impl->lockOnParse(tcd->arg_0);


}

void STI_Client_Server::_objref_Parser::lockOnParse(::CORBA::Boolean _v)
{
  _0RL_cd_3085e22bd952fa98_80000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_a1000000, "_set_lockOnParse", 17);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a0000000* tcd = (_0RL_cd_3085e22bd952fa98_a0000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->outMsg();


}

char* STI_Client_Server::_objref_Parser::outMsg()
{
  _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_b1000000, "_get_outMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_c1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a0000000* tcd = (_0RL_cd_3085e22bd952fa98_a0000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->errMsg();


}

char* STI_Client_Server::_objref_Parser::errMsg()
{
  _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_c1000000, "_get_errMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a0000000* tcd = (_0RL_cd_3085e22bd952fa98_a0000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->mainFile();


}

char* STI_Client_Server::_objref_Parser::mainFile()
{
  _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_d1000000, "_get_mainFile", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTChannelSeq
class _0RL_cd_3085e22bd952fa98_e1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_e1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TChannelSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_e1000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TChannelSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_e1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TChannelSeq;
  (STI_Client_Server::TChannelSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_f1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_e1000000* tcd = (_0RL_cd_3085e22bd952fa98_e1000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->channels();


}

STI_Client_Server::TChannelSeq* STI_Client_Server::_objref_Parser::channels()
{
  _0RL_cd_3085e22bd952fa98_e1000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_f1000000, "_get_channels", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTStringSeq
class _0RL_cd_3085e22bd952fa98_02000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_02000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TStringSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_02000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TStringSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_02000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TStringSeq;
  (STI_Client_Server::TStringSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_02000000* tcd = (_0RL_cd_3085e22bd952fa98_02000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->files();


}

STI_Client_Server::TStringSeq* STI_Client_Server::_objref_Parser::files()
{
  _0RL_cd_3085e22bd952fa98_02000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_12000000, "_get_files", 11);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTVariableSeq
class _0RL_cd_3085e22bd952fa98_22000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_22000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TVariableSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_22000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TVariableSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_22000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TVariableSeq;
  (STI_Client_Server::TVariableSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_32000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_22000000* tcd = (_0RL_cd_3085e22bd952fa98_22000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->variables();


}

STI_Client_Server::TVariableSeq* STI_Client_Server::_objref_Parser::variables()
{
  _0RL_cd_3085e22bd952fa98_22000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_32000000, "_get_variables", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTEventSeq
class _0RL_cd_3085e22bd952fa98_42000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_42000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TEventSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_42000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TEventSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_42000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TEventSeq;
  (STI_Client_Server::TEventSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_52000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_42000000* tcd = (_0RL_cd_3085e22bd952fa98_42000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->events();


}

STI_Client_Server::TEventSeq* STI_Client_Server::_objref_Parser::events()
{
  _0RL_cd_3085e22bd952fa98_42000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_52000000, "_get_events", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_Parser::~_pof_Parser() {}


omniObjRef*
STI_Client_Server::_pof_Parser::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_Parser(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_Parser::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::Parser::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_Parser _the_pof_STI__Client__Server_mParser;

STI_Client_Server::_impl_Parser::~_impl_Parser() {}


::CORBA::Boolean
STI_Client_Server::_impl_Parser::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "parseFile") ) {

    _0RL_cd_3085e22bd952fa98_f0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_01000000, "parseFile", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "parseString") ) {

    _0RL_cd_3085e22bd952fa98_11000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_21000000, "parseString", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "parseLoopScript") ) {

    _0RL_cd_3085e22bd952fa98_11000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_31000000, "parseLoopScript", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_overwritten") ) {

    _0RL_cd_3085e22bd952fa98_41000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_51000000, "_get_overwritten", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_overwritten") ) {

    _0RL_cd_3085e22bd952fa98_61000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_71000000, "_set_overwritten", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_lockOnParse") ) {

    _0RL_cd_3085e22bd952fa98_81000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_91000000, "_get_lockOnParse", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_lockOnParse") ) {

    _0RL_cd_3085e22bd952fa98_80000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_a1000000, "_set_lockOnParse", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_outMsg") ) {

    _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_b1000000, "_get_outMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_errMsg") ) {

    _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_c1000000, "_get_errMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_mainFile") ) {

    _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_d1000000, "_get_mainFile", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_channels") ) {

    _0RL_cd_3085e22bd952fa98_e1000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_f1000000, "_get_channels", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_files") ) {

    _0RL_cd_3085e22bd952fa98_02000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_12000000, "_get_files", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_variables") ) {

    _0RL_cd_3085e22bd952fa98_22000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_32000000, "_get_variables", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_events") ) {

    _0RL_cd_3085e22bd952fa98_42000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_52000000, "_get_events", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_Parser::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::Parser::_PD_repoId )
    return (::STI_Client_Server::_impl_Parser*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::Parser::_PD_repoId) )
    return (::STI_Client_Server::_impl_Parser*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_Parser::_mostDerivedRepoId()
{
  return ::STI_Client_Server::Parser::_PD_repoId;
}

void
STI_Client_Server::TStatus::operator>>= (cdrStream &_n) const
{
  level >>= _n;
  curTime >>= _n;
  curEvent >>= _n;
  curCycle >>= _n;

}

void
STI_Client_Server::TStatus::operator<<= (cdrStream &_n)
{
  (TStatusLevel&)level <<= _n;
  (::CORBA::Double&)curTime <<= _n;
  (::CORBA::ULong&)curEvent <<= _n;
  (::CORBA::UShort&)curCycle <<= _n;

}

void
STI_Client_Server::TRow::operator>>= (cdrStream &_n) const
{
  (const TStringSeq&) val >>= _n;
  _n.marshalBoolean(done);

}

void
STI_Client_Server::TRow::operator<<= (cdrStream &_n)
{
  (TStringSeq&)val <<= _n;
  done = _n.unmarshalBoolean();

}

STI_Client_Server::ExpSequence_ptr STI_Client_Server::ExpSequence_Helper::_nil() {
  return ::STI_Client_Server::ExpSequence::_nil();
}

::CORBA::Boolean STI_Client_Server::ExpSequence_Helper::is_nil(::STI_Client_Server::ExpSequence_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::ExpSequence_Helper::release(::STI_Client_Server::ExpSequence_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::ExpSequence_Helper::marshalObjRef(::STI_Client_Server::ExpSequence_ptr obj, cdrStream& s) {
  ::STI_Client_Server::ExpSequence::_marshalObjRef(obj, s);
}

STI_Client_Server::ExpSequence_ptr STI_Client_Server::ExpSequence_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::ExpSequence::_unmarshalObjRef(s);
}

void STI_Client_Server::ExpSequence_Helper::duplicate(::STI_Client_Server::ExpSequence_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_duplicate(::STI_Client_Server::ExpSequence_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ExpSequence _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ExpSequence* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ExpSequence;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::ExpSequence::_PD_repoId = "IDL:STI_Client_Server/ExpSequence:1.0";


STI_Client_Server::_objref_ExpSequence::~_objref_ExpSequence() {
  
}


STI_Client_Server::_objref_ExpSequence::_objref_ExpSequence(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::ExpSequence::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_ExpSequence::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::ExpSequence::_PD_repoId )
    return (::STI_Client_Server::ExpSequence_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::ExpSequence::_PD_repoId) )
    return (::STI_Client_Server::ExpSequence_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSTI__Client__Server_mTStringSeq_i_cSTI__Client__Server_mTRowSeq
class _0RL_cd_3085e22bd952fa98_62000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_62000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TStringSeq_var arg_0_;
  const STI_Client_Server::TStringSeq* arg_0;
  STI_Client_Server::TRowSeq_var arg_1_;
  const STI_Client_Server::TRowSeq* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_3085e22bd952fa98_62000000::marshalArguments(cdrStream& _n)
{
  (const STI_Client_Server::TStringSeq&) *arg_0 >>= _n;
  (const STI_Client_Server::TRowSeq&) *arg_1 >>= _n;

}

void _0RL_cd_3085e22bd952fa98_62000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI_Client_Server::TStringSeq;
  (STI_Client_Server::TStringSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new STI_Client_Server::TRowSeq;
  (STI_Client_Server::TRowSeq&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_3085e22bd952fa98_62000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_3085e22bd952fa98_62000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_72000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_62000000* tcd = (_0RL_cd_3085e22bd952fa98_62000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->setExpSequence(*tcd->arg_0, *tcd->arg_1);


}

::CORBA::Boolean STI_Client_Server::_objref_ExpSequence::setExpSequence(const TStringSeq& Variables, const TRowSeq& Experiments)
{
  _0RL_cd_3085e22bd952fa98_62000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_72000000, "setExpSequence", 15);
  _call_desc.arg_0 = &(TStringSeq&) Variables;
  _call_desc.arg_1 = &(TRowSeq&) Experiments;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSTI__Client__Server_mTStringSeq
class _0RL_cd_3085e22bd952fa98_82000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_82000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TStringSeq_var arg_0_;
  const STI_Client_Server::TStringSeq* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_3085e22bd952fa98_82000000::marshalArguments(cdrStream& _n)
{
  (const STI_Client_Server::TStringSeq&) *arg_0 >>= _n;

}

void _0RL_cd_3085e22bd952fa98_82000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI_Client_Server::TStringSeq;
  (STI_Client_Server::TStringSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_3085e22bd952fa98_82000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_3085e22bd952fa98_82000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_92000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_82000000* tcd = (_0RL_cd_3085e22bd952fa98_82000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->appendRow(*tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_ExpSequence::appendRow(const TStringSeq& newRow)
{
  _0RL_cd_3085e22bd952fa98_82000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_92000000, "appendRow", 10);
  _call_desc.arg_0 = &(TStringSeq&) newRow;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cunsigned_plong_i_cunsigned_plong
class _0RL_cd_3085e22bd952fa98_a2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_a2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::ULong arg_0;
  ::CORBA::ULong arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_3085e22bd952fa98_a2000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_3085e22bd952fa98_a2000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  (::CORBA::ULong&)arg_1 <<= _n;

}

void _0RL_cd_3085e22bd952fa98_a2000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_3085e22bd952fa98_a2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_b2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a2000000* tcd = (_0RL_cd_3085e22bd952fa98_a2000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->moveRow(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean STI_Client_Server::_objref_ExpSequence::moveRow(::CORBA::ULong oldPos, ::CORBA::ULong newPos)
{
  _0RL_cd_3085e22bd952fa98_a2000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_b2000000, "moveRow", 8);
  _call_desc.arg_0 = oldPos;
  _call_desc.arg_1 = newPos;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cunsigned_plong_i_cSTI__Client__Server_mTRow
class _0RL_cd_3085e22bd952fa98_c2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_c2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::ULong arg_0;
  STI_Client_Server::TRow_var arg_1_;
  const STI_Client_Server::TRow* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_3085e22bd952fa98_c2000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const STI_Client_Server::TRow&) *arg_1 >>= _n;

}

void _0RL_cd_3085e22bd952fa98_c2000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  arg_1_ = new STI_Client_Server::TRow;
  (STI_Client_Server::TRow&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_3085e22bd952fa98_c2000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_3085e22bd952fa98_c2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_d2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_c2000000* tcd = (_0RL_cd_3085e22bd952fa98_c2000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->editRow(tcd->arg_0, *tcd->arg_1);


}

::CORBA::Boolean STI_Client_Server::_objref_ExpSequence::editRow(::CORBA::ULong pos, const TRow& newRow)
{
  _0RL_cd_3085e22bd952fa98_c2000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_d2000000, "editRow", 8);
  _call_desc.arg_0 = pos;
  _call_desc.arg_1 = &(TRow&) newRow;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cunsigned_plong
class _0RL_cd_3085e22bd952fa98_e2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_e2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::ULong arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_3085e22bd952fa98_e2000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_3085e22bd952fa98_e2000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;

}

void _0RL_cd_3085e22bd952fa98_e2000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_3085e22bd952fa98_e2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_f2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_e2000000* tcd = (_0RL_cd_3085e22bd952fa98_e2000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->deleteRow(tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_ExpSequence::deleteRow(::CORBA::ULong pos)
{
  _0RL_cd_3085e22bd952fa98_e2000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_f2000000, "deleteRow", 10);
  _call_desc.arg_0 = pos;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_03000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  impl->clear();


}

void STI_Client_Server::_objref_ExpSequence::clear()
{
  _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_03000000, "clear", 6);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cunsigned_plong_i_cboolean
class _0RL_cd_3085e22bd952fa98_13000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_13000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::ULong arg_0;
  ::CORBA::Boolean arg_1;
};

void _0RL_cd_3085e22bd952fa98_13000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_3085e22bd952fa98_13000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  arg_1 = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_23000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_13000000* tcd = (_0RL_cd_3085e22bd952fa98_13000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  impl->editRowDone(tcd->arg_0, tcd->arg_1);


}

void STI_Client_Server::_objref_ExpSequence::editRowDone(::CORBA::ULong pos, ::CORBA::Boolean newDone)
{
  _0RL_cd_3085e22bd952fa98_13000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_23000000, "editRowDone", 12);
  _call_desc.arg_0 = pos;
  _call_desc.arg_1 = newDone;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_33000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_02000000* tcd = (_0RL_cd_3085e22bd952fa98_02000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->variables();


}

STI_Client_Server::TStringSeq* STI_Client_Server::_objref_ExpSequence::variables()
{
  _0RL_cd_3085e22bd952fa98_02000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_33000000, "_get_variables", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cSTI__Client__Server_mTStringSeq
class _0RL_cd_3085e22bd952fa98_43000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_43000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  STI_Client_Server::TStringSeq_var arg_0_;
  const STI_Client_Server::TStringSeq* arg_0;
};

void _0RL_cd_3085e22bd952fa98_43000000::marshalArguments(cdrStream& _n)
{
  (const STI_Client_Server::TStringSeq&) *arg_0 >>= _n;

}

void _0RL_cd_3085e22bd952fa98_43000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI_Client_Server::TStringSeq;
  (STI_Client_Server::TStringSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_53000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_43000000* tcd = (_0RL_cd_3085e22bd952fa98_43000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  impl->variables(*tcd->arg_0);


}

void STI_Client_Server::_objref_ExpSequence::variables(const TStringSeq& _v)
{
  _0RL_cd_3085e22bd952fa98_43000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_53000000, "_set_variables", 15);
  _call_desc.arg_0 = &(TStringSeq&) _v;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTRowSeq
class _0RL_cd_3085e22bd952fa98_63000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_63000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TRowSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_63000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TRowSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_63000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TRowSeq;
  (STI_Client_Server::TRowSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_73000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_63000000* tcd = (_0RL_cd_3085e22bd952fa98_63000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->experiments();


}

STI_Client_Server::TRowSeq* STI_Client_Server::_objref_ExpSequence::experiments()
{
  _0RL_cd_3085e22bd952fa98_63000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_73000000, "_get_experiments", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_ExpSequence::~_pof_ExpSequence() {}


omniObjRef*
STI_Client_Server::_pof_ExpSequence::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_ExpSequence(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_ExpSequence::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::ExpSequence::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_ExpSequence _the_pof_STI__Client__Server_mExpSequence;

STI_Client_Server::_impl_ExpSequence::~_impl_ExpSequence() {}


::CORBA::Boolean
STI_Client_Server::_impl_ExpSequence::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "setExpSequence") ) {

    _0RL_cd_3085e22bd952fa98_62000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_72000000, "setExpSequence", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "appendRow") ) {

    _0RL_cd_3085e22bd952fa98_82000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_92000000, "appendRow", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "moveRow") ) {

    _0RL_cd_3085e22bd952fa98_a2000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_b2000000, "moveRow", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "editRow") ) {

    _0RL_cd_3085e22bd952fa98_c2000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_d2000000, "editRow", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "deleteRow") ) {

    _0RL_cd_3085e22bd952fa98_e2000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_f2000000, "deleteRow", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "clear") ) {

    _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_03000000, "clear", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "editRowDone") ) {

    _0RL_cd_3085e22bd952fa98_13000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_23000000, "editRowDone", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_variables") ) {

    _0RL_cd_3085e22bd952fa98_02000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_33000000, "_get_variables", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_variables") ) {

    _0RL_cd_3085e22bd952fa98_43000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_53000000, "_set_variables", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_experiments") ) {

    _0RL_cd_3085e22bd952fa98_63000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_73000000, "_get_experiments", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_ExpSequence::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::ExpSequence::_PD_repoId )
    return (::STI_Client_Server::_impl_ExpSequence*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::ExpSequence::_PD_repoId) )
    return (::STI_Client_Server::_impl_ExpSequence*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_ExpSequence::_mostDerivedRepoId()
{
  return ::STI_Client_Server::ExpSequence::_PD_repoId;
}

void
STI_Client_Server::TExpRunInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalString(fileName,0);
  _n.marshalString(description,0);
  _n.marshalString(serverStoragePath,0);

}

void
STI_Client_Server::TExpRunInfo::operator<<= (cdrStream &_n)
{
  fileName = _n.unmarshalString(0);
  description = _n.unmarshalString(0);
  serverStoragePath = _n.unmarshalString(0);

}

void
STI_Client_Server::TExpSequenceInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalString(sequenceFileName,0);
  _n.marshalString(sequenceDescription,0);
  _n.marshalString(serverStoragePath,0);
  _n.marshalString(trialFilenameBase,0);

}

void
STI_Client_Server::TExpSequenceInfo::operator<<= (cdrStream &_n)
{
  sequenceFileName = _n.unmarshalString(0);
  sequenceDescription = _n.unmarshalString(0);
  serverStoragePath = _n.unmarshalString(0);
  trialFilenameBase = _n.unmarshalString(0);

}

STI_Client_Server::Control_ptr STI_Client_Server::Control_Helper::_nil() {
  return ::STI_Client_Server::Control::_nil();
}

::CORBA::Boolean STI_Client_Server::Control_Helper::is_nil(::STI_Client_Server::Control_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::Control_Helper::release(::STI_Client_Server::Control_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::Control_Helper::marshalObjRef(::STI_Client_Server::Control_ptr obj, cdrStream& s) {
  ::STI_Client_Server::Control::_marshalObjRef(obj, s);
}

STI_Client_Server::Control_ptr STI_Client_Server::Control_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::Control::_unmarshalObjRef(s);
}

void STI_Client_Server::Control_Helper::duplicate(::STI_Client_Server::Control_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::Control_ptr
STI_Client_Server::Control::_duplicate(::STI_Client_Server::Control_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::Control_ptr
STI_Client_Server::Control::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::Control_ptr
STI_Client_Server::Control::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::Control_ptr
STI_Client_Server::Control::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Control _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Control* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Control;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::Control::_PD_repoId = "IDL:STI_Client_Server/Control:1.0";


STI_Client_Server::_objref_Control::~_objref_Control() {
  
}


STI_Client_Server::_objref_Control::_objref_Control(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::Control::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_Control::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::Control::_PD_repoId )
    return (::STI_Client_Server::Control_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::Control::_PD_repoId) )
    return (::STI_Client_Server::Control_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTStatus
class _0RL_cd_3085e22bd952fa98_83000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_83000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TStatus result;
};

void _0RL_cd_3085e22bd952fa98_83000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TStatus&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_83000000::unmarshalReturnedValues(cdrStream& _n)
{
  (STI_Client_Server::TStatus&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_93000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_83000000* tcd = (_0RL_cd_3085e22bd952fa98_83000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  tcd->result = impl->status();


}

STI_Client_Server::TStatus STI_Client_Server::_objref_Control::status()
{
  _0RL_cd_3085e22bd952fa98_83000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_93000000, "status", 7);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring
class _0RL_cd_3085e22bd952fa98_a3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_a3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var result;
};

void _0RL_cd_3085e22bd952fa98_a3000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_3085e22bd952fa98_a3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_3085e22bd952fa98_a3000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_3085e22bd952fa98_a3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_b3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a3000000* tcd = (_0RL_cd_3085e22bd952fa98_a3000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  tcd->result = impl->transferErr(tcd->arg_0);


}

char* STI_Client_Server::_objref_Control::transferErr(const char* deviceID)
{
  _0RL_cd_3085e22bd952fa98_a3000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_b3000000, "transferErr", 12);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_c3000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->reset();


}

void STI_Client_Server::_objref_Control::reset()
{
  _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_c3000000, "reset", 6);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_d3000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->setDirect();


}

void STI_Client_Server::_objref_Control::setDirect()
{
  _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_d3000000, "setDirect", 10);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cboolean_i_cSTI__Client__Server_mTExpRunInfo
class _0RL_cd_3085e22bd952fa98_e3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_e3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::Boolean arg_0;
  STI_Client_Server::TExpRunInfo_var arg_1_;
  const STI_Client_Server::TExpRunInfo* arg_1;
};

void _0RL_cd_3085e22bd952fa98_e3000000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);
  (const STI_Client_Server::TExpRunInfo&) *arg_1 >>= _n;

}

void _0RL_cd_3085e22bd952fa98_e3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();
  arg_1_ = new STI_Client_Server::TExpRunInfo;
  (STI_Client_Server::TExpRunInfo&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_f3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_e3000000* tcd = (_0RL_cd_3085e22bd952fa98_e3000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->runSingle(tcd->arg_0, *tcd->arg_1);


}

void STI_Client_Server::_objref_Control::runSingle(::CORBA::Boolean documented, const TExpRunInfo& info)
{
  _0RL_cd_3085e22bd952fa98_e3000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_f3000000, "runSingle", 10);
  _call_desc.arg_0 = documented;
  _call_desc.arg_1 = &(TExpRunInfo&) info;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cboolean_i_cSTI__Client__Server_mTExpSequenceInfo
class _0RL_cd_3085e22bd952fa98_04000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_04000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::Boolean arg_0;
  STI_Client_Server::TExpSequenceInfo_var arg_1_;
  const STI_Client_Server::TExpSequenceInfo* arg_1;
};

void _0RL_cd_3085e22bd952fa98_04000000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);
  (const STI_Client_Server::TExpSequenceInfo&) *arg_1 >>= _n;

}

void _0RL_cd_3085e22bd952fa98_04000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();
  arg_1_ = new STI_Client_Server::TExpSequenceInfo;
  (STI_Client_Server::TExpSequenceInfo&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_14000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_04000000* tcd = (_0RL_cd_3085e22bd952fa98_04000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->runSequence(tcd->arg_0, *tcd->arg_1);


}

void STI_Client_Server::_objref_Control::runSequence(::CORBA::Boolean documented, const TExpSequenceInfo& info)
{
  _0RL_cd_3085e22bd952fa98_04000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_14000000, "runSequence", 12);
  _call_desc.arg_0 = documented;
  _call_desc.arg_1 = &(TExpSequenceInfo&) info;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_24000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->_cxx_continue();


}

void STI_Client_Server::_objref_Control::_cxx_continue()
{
  _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_24000000, "continue", 9);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_34000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->stop();


}

void STI_Client_Server::_objref_Control::stop()
{
  _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_34000000, "stop", 5);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTExpRunInfo
class _0RL_cd_3085e22bd952fa98_44000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_44000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TExpRunInfo_var result;
};

void _0RL_cd_3085e22bd952fa98_44000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TExpRunInfo&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_44000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TExpRunInfo;
  (STI_Client_Server::TExpRunInfo&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_54000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_44000000* tcd = (_0RL_cd_3085e22bd952fa98_44000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  tcd->result = impl->getDefaultRunInfo();


}

STI_Client_Server::TExpRunInfo* STI_Client_Server::_objref_Control::getDefaultRunInfo()
{
  _0RL_cd_3085e22bd952fa98_44000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_54000000, "getDefaultRunInfo", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTExpSequenceInfo
class _0RL_cd_3085e22bd952fa98_64000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_64000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TExpSequenceInfo_var result;
};

void _0RL_cd_3085e22bd952fa98_64000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TExpSequenceInfo&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_64000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TExpSequenceInfo;
  (STI_Client_Server::TExpSequenceInfo&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_74000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_64000000* tcd = (_0RL_cd_3085e22bd952fa98_64000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  tcd->result = impl->getDefaultSequenceInfo();


}

STI_Client_Server::TExpSequenceInfo* STI_Client_Server::_objref_Control::getDefaultSequenceInfo()
{
  _0RL_cd_3085e22bd952fa98_64000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_74000000, "getDefaultSequenceInfo", 23);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_84000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a0000000* tcd = (_0RL_cd_3085e22bd952fa98_a0000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  tcd->result = impl->errMsg();


}

char* STI_Client_Server::_objref_Control::errMsg()
{
  _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_84000000, "_get_errMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_Control::~_pof_Control() {}


omniObjRef*
STI_Client_Server::_pof_Control::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_Control(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_Control::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::Control::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_Control _the_pof_STI__Client__Server_mControl;

STI_Client_Server::_impl_Control::~_impl_Control() {}


::CORBA::Boolean
STI_Client_Server::_impl_Control::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "status") ) {

    _0RL_cd_3085e22bd952fa98_83000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_93000000, "status", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "transferErr") ) {

    _0RL_cd_3085e22bd952fa98_a3000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_b3000000, "transferErr", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "reset") ) {

    _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_c3000000, "reset", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setDirect") ) {

    _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_d3000000, "setDirect", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "runSingle") ) {

    _0RL_cd_3085e22bd952fa98_e3000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_f3000000, "runSingle", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "runSequence") ) {

    _0RL_cd_3085e22bd952fa98_04000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_14000000, "runSequence", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "continue") ) {

    _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_24000000, "continue", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stop") ) {

    _0RL_cd_3085e22bd952fa98_60000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_34000000, "stop", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDefaultRunInfo") ) {

    _0RL_cd_3085e22bd952fa98_44000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_54000000, "getDefaultRunInfo", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDefaultSequenceInfo") ) {

    _0RL_cd_3085e22bd952fa98_64000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_74000000, "getDefaultSequenceInfo", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_errMsg") ) {

    _0RL_cd_3085e22bd952fa98_a0000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_84000000, "_get_errMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_Control::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::Control::_PD_repoId )
    return (::STI_Client_Server::_impl_Control*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::Control::_PD_repoId) )
    return (::STI_Client_Server::_impl_Control*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_Control::_mostDerivedRepoId()
{
  return ::STI_Client_Server::Control::_PD_repoId;
}

void
STI_Client_Server::TAttribute::operator>>= (cdrStream &_n) const
{
  _n.marshalString(key,0);
  _n.marshalString(value,0);
  (const TStringSeq&) values >>= _n;

}

void
STI_Client_Server::TAttribute::operator<<= (cdrStream &_n)
{
  key = _n.unmarshalString(0);
  value = _n.unmarshalString(0);
  (TStringSeq&)values <<= _n;

}

STI_Client_Server::DeviceConfigure_ptr STI_Client_Server::DeviceConfigure_Helper::_nil() {
  return ::STI_Client_Server::DeviceConfigure::_nil();
}

::CORBA::Boolean STI_Client_Server::DeviceConfigure_Helper::is_nil(::STI_Client_Server::DeviceConfigure_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::DeviceConfigure_Helper::release(::STI_Client_Server::DeviceConfigure_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::DeviceConfigure_Helper::marshalObjRef(::STI_Client_Server::DeviceConfigure_ptr obj, cdrStream& s) {
  ::STI_Client_Server::DeviceConfigure::_marshalObjRef(obj, s);
}

STI_Client_Server::DeviceConfigure_ptr STI_Client_Server::DeviceConfigure_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::DeviceConfigure::_unmarshalObjRef(s);
}

void STI_Client_Server::DeviceConfigure_Helper::duplicate(::STI_Client_Server::DeviceConfigure_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::DeviceConfigure_ptr
STI_Client_Server::DeviceConfigure::_duplicate(::STI_Client_Server::DeviceConfigure_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::DeviceConfigure_ptr
STI_Client_Server::DeviceConfigure::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::DeviceConfigure_ptr
STI_Client_Server::DeviceConfigure::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::DeviceConfigure_ptr
STI_Client_Server::DeviceConfigure::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DeviceConfigure _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DeviceConfigure* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DeviceConfigure;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::DeviceConfigure::_PD_repoId = "IDL:STI_Client_Server/DeviceConfigure:1.0";


STI_Client_Server::_objref_DeviceConfigure::~_objref_DeviceConfigure() {
  
}


STI_Client_Server::_objref_DeviceConfigure::_objref_DeviceConfigure(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::DeviceConfigure::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_DeviceConfigure::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::DeviceConfigure::_PD_repoId )
    return (::STI_Client_Server::DeviceConfigure_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::DeviceConfigure::_PD_repoId) )
    return (::STI_Client_Server::DeviceConfigure_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTAttributeSeq_i_cstring
class _0RL_cd_3085e22bd952fa98_94000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_94000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI_Client_Server::TAttributeSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_94000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_3085e22bd952fa98_94000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_3085e22bd952fa98_94000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TAttributeSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_94000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TAttributeSeq;
  (STI_Client_Server::TAttributeSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_a4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_94000000* tcd = (_0RL_cd_3085e22bd952fa98_94000000*)cd;
  STI_Client_Server::_impl_DeviceConfigure* impl = (STI_Client_Server::_impl_DeviceConfigure*) svnt->_ptrToInterface(STI_Client_Server::DeviceConfigure::_PD_repoId);
  tcd->result = impl->getDeviceAttributes(tcd->arg_0);


}

STI_Client_Server::TAttributeSeq* STI_Client_Server::_objref_DeviceConfigure::getDeviceAttributes(const char* deviceID)
{
  _0RL_cd_3085e22bd952fa98_94000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_a4000000, "getDeviceAttributes", 20);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring_i_cstring
class _0RL_cd_3085e22bd952fa98_b4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_b4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_3085e22bd952fa98_b4000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);

}

void _0RL_cd_3085e22bd952fa98_b4000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_3085e22bd952fa98_b4000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_3085e22bd952fa98_b4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_c4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_b4000000* tcd = (_0RL_cd_3085e22bd952fa98_b4000000*)cd;
  STI_Client_Server::_impl_DeviceConfigure* impl = (STI_Client_Server::_impl_DeviceConfigure*) svnt->_ptrToInterface(STI_Client_Server::DeviceConfigure::_PD_repoId);
  tcd->result = impl->setDeviceAttribute(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean STI_Client_Server::_objref_DeviceConfigure::setDeviceAttribute(const char* deviceID, const char* key, const char* value)
{
  _0RL_cd_3085e22bd952fa98_b4000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_c4000000, "setDeviceAttribute", 19);
  _call_desc.arg_0 = deviceID;
  _call_desc.arg_1 = key;
  _call_desc.arg_2 = value;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTChannelSeq_i_cstring
class _0RL_cd_3085e22bd952fa98_d4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_d4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI_Client_Server::TChannelSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_d4000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_3085e22bd952fa98_d4000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_3085e22bd952fa98_d4000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TChannelSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_d4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TChannelSeq;
  (STI_Client_Server::TChannelSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_e4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_d4000000* tcd = (_0RL_cd_3085e22bd952fa98_d4000000*)cd;
  STI_Client_Server::_impl_DeviceConfigure* impl = (STI_Client_Server::_impl_DeviceConfigure*) svnt->_ptrToInterface(STI_Client_Server::DeviceConfigure::_PD_repoId);
  tcd->result = impl->getDeviceChannels(tcd->arg_0);


}

STI_Client_Server::TChannelSeq* STI_Client_Server::_objref_DeviceConfigure::getDeviceChannels(const char* deviceID)
{
  _0RL_cd_3085e22bd952fa98_d4000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_e4000000, "getDeviceChannels", 18);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_f4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_11000000* tcd = (_0RL_cd_3085e22bd952fa98_11000000*)cd;
  STI_Client_Server::_impl_DeviceConfigure* impl = (STI_Client_Server::_impl_DeviceConfigure*) svnt->_ptrToInterface(STI_Client_Server::DeviceConfigure::_PD_repoId);
  tcd->result = impl->deviceStatus(tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_DeviceConfigure::deviceStatus(const char* deviceID)
{
  _0RL_cd_3085e22bd952fa98_11000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_f4000000, "deviceStatus", 13);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTDeviceSeq
class _0RL_cd_3085e22bd952fa98_05000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_05000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TDeviceSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_05000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TDeviceSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_05000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TDeviceSeq;
  (STI_Client_Server::TDeviceSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_15000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_05000000* tcd = (_0RL_cd_3085e22bd952fa98_05000000*)cd;
  STI_Client_Server::_impl_DeviceConfigure* impl = (STI_Client_Server::_impl_DeviceConfigure*) svnt->_ptrToInterface(STI_Client_Server::DeviceConfigure::_PD_repoId);
  tcd->result = impl->devices();


}

STI_Client_Server::TDeviceSeq* STI_Client_Server::_objref_DeviceConfigure::devices()
{
  _0RL_cd_3085e22bd952fa98_05000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_15000000, "_get_devices", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_DeviceConfigure::~_pof_DeviceConfigure() {}


omniObjRef*
STI_Client_Server::_pof_DeviceConfigure::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_DeviceConfigure(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_DeviceConfigure::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::DeviceConfigure::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_DeviceConfigure _the_pof_STI__Client__Server_mDeviceConfigure;

STI_Client_Server::_impl_DeviceConfigure::~_impl_DeviceConfigure() {}


::CORBA::Boolean
STI_Client_Server::_impl_DeviceConfigure::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getDeviceAttributes") ) {

    _0RL_cd_3085e22bd952fa98_94000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_a4000000, "getDeviceAttributes", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setDeviceAttribute") ) {

    _0RL_cd_3085e22bd952fa98_b4000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_c4000000, "setDeviceAttribute", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDeviceChannels") ) {

    _0RL_cd_3085e22bd952fa98_d4000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_e4000000, "getDeviceChannels", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "deviceStatus") ) {

    _0RL_cd_3085e22bd952fa98_11000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_f4000000, "deviceStatus", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_devices") ) {

    _0RL_cd_3085e22bd952fa98_05000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_15000000, "_get_devices", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_DeviceConfigure::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::DeviceConfigure::_PD_repoId )
    return (::STI_Client_Server::_impl_DeviceConfigure*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::DeviceConfigure::_PD_repoId) )
    return (::STI_Client_Server::_impl_DeviceConfigure*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_DeviceConfigure::_mostDerivedRepoId()
{
  return ::STI_Client_Server::DeviceConfigure::_PD_repoId;
}

STI_Client_Server::StreamingDataTransfer_ptr STI_Client_Server::StreamingDataTransfer_Helper::_nil() {
  return ::STI_Client_Server::StreamingDataTransfer::_nil();
}

::CORBA::Boolean STI_Client_Server::StreamingDataTransfer_Helper::is_nil(::STI_Client_Server::StreamingDataTransfer_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::StreamingDataTransfer_Helper::release(::STI_Client_Server::StreamingDataTransfer_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::StreamingDataTransfer_Helper::marshalObjRef(::STI_Client_Server::StreamingDataTransfer_ptr obj, cdrStream& s) {
  ::STI_Client_Server::StreamingDataTransfer::_marshalObjRef(obj, s);
}

STI_Client_Server::StreamingDataTransfer_ptr STI_Client_Server::StreamingDataTransfer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::StreamingDataTransfer::_unmarshalObjRef(s);
}

void STI_Client_Server::StreamingDataTransfer_Helper::duplicate(::STI_Client_Server::StreamingDataTransfer_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::StreamingDataTransfer_ptr
STI_Client_Server::StreamingDataTransfer::_duplicate(::STI_Client_Server::StreamingDataTransfer_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::StreamingDataTransfer_ptr
STI_Client_Server::StreamingDataTransfer::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::StreamingDataTransfer_ptr
STI_Client_Server::StreamingDataTransfer::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::StreamingDataTransfer_ptr
STI_Client_Server::StreamingDataTransfer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_StreamingDataTransfer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_StreamingDataTransfer* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_StreamingDataTransfer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::StreamingDataTransfer::_PD_repoId = "IDL:STI_Client_Server/StreamingDataTransfer:1.0";


STI_Client_Server::_objref_StreamingDataTransfer::~_objref_StreamingDataTransfer() {
  
}


STI_Client_Server::_objref_StreamingDataTransfer::_objref_StreamingDataTransfer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::StreamingDataTransfer::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_StreamingDataTransfer::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::StreamingDataTransfer::_PD_repoId )
    return (::STI_Client_Server::StreamingDataTransfer_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::StreamingDataTransfer::_PD_repoId) )
    return (::STI_Client_Server::StreamingDataTransfer_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cSTI__Server__Device_mTMeasurementSeq_i_cstring_i_cunsigned_pshort_i_cdouble_i_cdouble_i_cdouble
class _0RL_cd_3085e22bd952fa98_25000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_25000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::UShort arg_1;
  ::CORBA::Double arg_2;
  ::CORBA::Double arg_3;
  ::CORBA::Double arg_4;
  STI_Server_Device::TMeasurementSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_25000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;
  arg_4 >>= _n;

}

void _0RL_cd_3085e22bd952fa98_25000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::UShort&)arg_1 <<= _n;
  (::CORBA::Double&)arg_2 <<= _n;
  (::CORBA::Double&)arg_3 <<= _n;
  (::CORBA::Double&)arg_4 <<= _n;

}

void _0RL_cd_3085e22bd952fa98_25000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Server_Device::TMeasurementSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_25000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Server_Device::TMeasurementSeq;
  (STI_Server_Device::TMeasurementSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_35000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_25000000* tcd = (_0RL_cd_3085e22bd952fa98_25000000*)cd;
  STI_Client_Server::_impl_StreamingDataTransfer* impl = (STI_Client_Server::_impl_StreamingDataTransfer*) svnt->_ptrToInterface(STI_Client_Server::StreamingDataTransfer::_PD_repoId);
  tcd->result = impl->getStreamingData(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);


}

STI_Server_Device::TMeasurementSeq* STI_Client_Server::_objref_StreamingDataTransfer::getStreamingData(const char* deviceID, ::CORBA::UShort channel, ::CORBA::Double initial_t, ::CORBA::Double final_t, ::CORBA::Double delta_t)
{
  _0RL_cd_3085e22bd952fa98_25000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_35000000, "getStreamingData", 17);
  _call_desc.arg_0 = deviceID;
  _call_desc.arg_1 = channel;
  _call_desc.arg_2 = initial_t;
  _call_desc.arg_3 = final_t;
  _call_desc.arg_4 = delta_t;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Server__Device_mTMeasurementSeq_i_cstring
class _0RL_cd_3085e22bd952fa98_45000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_45000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI_Server_Device::TMeasurementSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_45000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_3085e22bd952fa98_45000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_3085e22bd952fa98_45000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Server_Device::TMeasurementSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_45000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Server_Device::TMeasurementSeq;
  (STI_Server_Device::TMeasurementSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_55000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_45000000* tcd = (_0RL_cd_3085e22bd952fa98_45000000*)cd;
  STI_Client_Server::_impl_StreamingDataTransfer* impl = (STI_Client_Server::_impl_StreamingDataTransfer*) svnt->_ptrToInterface(STI_Client_Server::StreamingDataTransfer::_PD_repoId);
  tcd->result = impl->getMeasurements(tcd->arg_0);


}

STI_Server_Device::TMeasurementSeq* STI_Client_Server::_objref_StreamingDataTransfer::getMeasurements(const char* deviceID)
{
  _0RL_cd_3085e22bd952fa98_45000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_55000000, "getMeasurements", 16);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_65000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a3000000* tcd = (_0RL_cd_3085e22bd952fa98_a3000000*)cd;
  STI_Client_Server::_impl_StreamingDataTransfer* impl = (STI_Client_Server::_impl_StreamingDataTransfer*) svnt->_ptrToInterface(STI_Client_Server::StreamingDataTransfer::_PD_repoId);
  tcd->result = impl->getErrMsg(tcd->arg_0);


}

char* STI_Client_Server::_objref_StreamingDataTransfer::getErrMsg(const char* deviceID)
{
  _0RL_cd_3085e22bd952fa98_a3000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_65000000, "getErrMsg", 10);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_StreamingDataTransfer::~_pof_StreamingDataTransfer() {}


omniObjRef*
STI_Client_Server::_pof_StreamingDataTransfer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_StreamingDataTransfer(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_StreamingDataTransfer::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::StreamingDataTransfer::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_StreamingDataTransfer _the_pof_STI__Client__Server_mStreamingDataTransfer;

STI_Client_Server::_impl_StreamingDataTransfer::~_impl_StreamingDataTransfer() {}


::CORBA::Boolean
STI_Client_Server::_impl_StreamingDataTransfer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getStreamingData") ) {

    _0RL_cd_3085e22bd952fa98_25000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_35000000, "getStreamingData", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getMeasurements") ) {

    _0RL_cd_3085e22bd952fa98_45000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_55000000, "getMeasurements", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getErrMsg") ) {

    _0RL_cd_3085e22bd952fa98_a3000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_65000000, "getErrMsg", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_StreamingDataTransfer::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::StreamingDataTransfer::_PD_repoId )
    return (::STI_Client_Server::_impl_StreamingDataTransfer*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::StreamingDataTransfer::_PD_repoId) )
    return (::STI_Client_Server::_impl_StreamingDataTransfer*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_StreamingDataTransfer::_mostDerivedRepoId()
{
  return ::STI_Client_Server::StreamingDataTransfer::_PD_repoId;
}

STI_Client_Server::ServerCommandLine_ptr STI_Client_Server::ServerCommandLine_Helper::_nil() {
  return ::STI_Client_Server::ServerCommandLine::_nil();
}

::CORBA::Boolean STI_Client_Server::ServerCommandLine_Helper::is_nil(::STI_Client_Server::ServerCommandLine_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::ServerCommandLine_Helper::release(::STI_Client_Server::ServerCommandLine_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::ServerCommandLine_Helper::marshalObjRef(::STI_Client_Server::ServerCommandLine_ptr obj, cdrStream& s) {
  ::STI_Client_Server::ServerCommandLine::_marshalObjRef(obj, s);
}

STI_Client_Server::ServerCommandLine_ptr STI_Client_Server::ServerCommandLine_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::ServerCommandLine::_unmarshalObjRef(s);
}

void STI_Client_Server::ServerCommandLine_Helper::duplicate(::STI_Client_Server::ServerCommandLine_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::ServerCommandLine_ptr
STI_Client_Server::ServerCommandLine::_duplicate(::STI_Client_Server::ServerCommandLine_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::ServerCommandLine_ptr
STI_Client_Server::ServerCommandLine::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::ServerCommandLine_ptr
STI_Client_Server::ServerCommandLine::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::ServerCommandLine_ptr
STI_Client_Server::ServerCommandLine::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ServerCommandLine _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ServerCommandLine* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ServerCommandLine;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::ServerCommandLine::_PD_repoId = "IDL:STI_Client_Server/ServerCommandLine:1.0";


STI_Client_Server::_objref_ServerCommandLine::~_objref_ServerCommandLine() {
  
}


STI_Client_Server::_objref_ServerCommandLine::_objref_ServerCommandLine(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::ServerCommandLine::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_ServerCommandLine::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::ServerCommandLine::_PD_repoId )
    return (::STI_Client_Server::ServerCommandLine_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::ServerCommandLine::_PD_repoId) )
    return (::STI_Client_Server::ServerCommandLine_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_75000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a3000000* tcd = (_0RL_cd_3085e22bd952fa98_a3000000*)cd;
  STI_Client_Server::_impl_ServerCommandLine* impl = (STI_Client_Server::_impl_ServerCommandLine*) svnt->_ptrToInterface(STI_Client_Server::ServerCommandLine::_PD_repoId);
  tcd->result = impl->deviceCmdName(tcd->arg_0);


}

char* STI_Client_Server::_objref_ServerCommandLine::deviceCmdName(const char* deviceID)
{
  _0RL_cd_3085e22bd952fa98_a3000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_75000000, "deviceCmdName", 14);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring_i_cstring
class _0RL_cd_3085e22bd952fa98_85000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_85000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var result;
};

void _0RL_cd_3085e22bd952fa98_85000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_3085e22bd952fa98_85000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_3085e22bd952fa98_85000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_3085e22bd952fa98_85000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_95000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_85000000* tcd = (_0RL_cd_3085e22bd952fa98_85000000*)cd;
  STI_Client_Server::_impl_ServerCommandLine* impl = (STI_Client_Server::_impl_ServerCommandLine*) svnt->_ptrToInterface(STI_Client_Server::ServerCommandLine::_PD_repoId);
  tcd->result = impl->executeArgs(tcd->arg_0, tcd->arg_1);


}

char* STI_Client_Server::_objref_ServerCommandLine::executeArgs(const char* deviceID, const char* args)
{
  _0RL_cd_3085e22bd952fa98_85000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_95000000, "executeArgs", 12);
  _call_desc.arg_0 = deviceID;
  _call_desc.arg_1 = args;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTStringSeq_i_cstring
class _0RL_cd_3085e22bd952fa98_a5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3085e22bd952fa98_a5000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI_Client_Server::TStringSeq_var result;
};

void _0RL_cd_3085e22bd952fa98_a5000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_3085e22bd952fa98_a5000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_3085e22bd952fa98_a5000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TStringSeq&) result >>= _n;

}

void _0RL_cd_3085e22bd952fa98_a5000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TStringSeq;
  (STI_Client_Server::TStringSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_b5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a5000000* tcd = (_0RL_cd_3085e22bd952fa98_a5000000*)cd;
  STI_Client_Server::_impl_ServerCommandLine* impl = (STI_Client_Server::_impl_ServerCommandLine*) svnt->_ptrToInterface(STI_Client_Server::ServerCommandLine::_PD_repoId);
  tcd->result = impl->registeredPartners(tcd->arg_0);


}

STI_Client_Server::TStringSeq* STI_Client_Server::_objref_ServerCommandLine::registeredPartners(const char* deviceID)
{
  _0RL_cd_3085e22bd952fa98_a5000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_b5000000, "registeredPartners", 19);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_3085e22bd952fa98_c5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3085e22bd952fa98_a5000000* tcd = (_0RL_cd_3085e22bd952fa98_a5000000*)cd;
  STI_Client_Server::_impl_ServerCommandLine* impl = (STI_Client_Server::_impl_ServerCommandLine*) svnt->_ptrToInterface(STI_Client_Server::ServerCommandLine::_PD_repoId);
  tcd->result = impl->requiredPartners(tcd->arg_0);


}

STI_Client_Server::TStringSeq* STI_Client_Server::_objref_ServerCommandLine::requiredPartners(const char* deviceID)
{
  _0RL_cd_3085e22bd952fa98_a5000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_c5000000, "requiredPartners", 17);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_ServerCommandLine::~_pof_ServerCommandLine() {}


omniObjRef*
STI_Client_Server::_pof_ServerCommandLine::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_ServerCommandLine(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_ServerCommandLine::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::ServerCommandLine::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_ServerCommandLine _the_pof_STI__Client__Server_mServerCommandLine;

STI_Client_Server::_impl_ServerCommandLine::~_impl_ServerCommandLine() {}


::CORBA::Boolean
STI_Client_Server::_impl_ServerCommandLine::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "deviceCmdName") ) {

    _0RL_cd_3085e22bd952fa98_a3000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_75000000, "deviceCmdName", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "executeArgs") ) {

    _0RL_cd_3085e22bd952fa98_85000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_95000000, "executeArgs", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registeredPartners") ) {

    _0RL_cd_3085e22bd952fa98_a5000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_b5000000, "registeredPartners", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "requiredPartners") ) {

    _0RL_cd_3085e22bd952fa98_a5000000 _call_desc(_0RL_lcfn_3085e22bd952fa98_c5000000, "requiredPartners", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_ServerCommandLine::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::ServerCommandLine::_PD_repoId )
    return (::STI_Client_Server::_impl_ServerCommandLine*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::ServerCommandLine::_PD_repoId) )
    return (::STI_Client_Server::_impl_ServerCommandLine*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_ServerCommandLine::_mostDerivedRepoId()
{
  return ::STI_Client_Server::ServerCommandLine::_PD_repoId;
}

POA_STI_Client_Server::ModeInterrupt::~ModeInterrupt() {}

POA_STI_Client_Server::ModeHandler::~ModeHandler() {}

POA_STI_Client_Server::Messenger::~Messenger() {}

POA_STI_Client_Server::Parser::~Parser() {}

POA_STI_Client_Server::ExpSequence::~ExpSequence() {}

POA_STI_Client_Server::Control::~Control() {}

POA_STI_Client_Server::DeviceConfigure::~DeviceConfigure() {}

POA_STI_Client_Server::StreamingDataTransfer::~StreamingDataTransfer() {}

POA_STI_Client_Server::ServerCommandLine::~ServerCommandLine() {}

