// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "client.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
STI_Client_Server::TOverwritten::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  _n.marshalString(value,0);

}

void
STI_Client_Server::TOverwritten::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  value = _n.unmarshalString(0);

}

void
STI_Client_Server::TDevice::operator>>= (cdrStream &_n) const
{
  _n.marshalString(deviceType,0);
  _n.marshalString(address,0);
  moduleNum >>= _n;
  _n.marshalString(deviceID,0);
  _n.marshalString(deviceContext,0);

}

void
STI_Client_Server::TDevice::operator<<= (cdrStream &_n)
{
  deviceType = _n.unmarshalString(0);
  address = _n.unmarshalString(0);
  (::CORBA::UShort&)moduleNum <<= _n;
  deviceID = _n.unmarshalString(0);
  deviceContext = _n.unmarshalString(0);

}

void
STI_Client_Server::TChannel::operator>>= (cdrStream &_n) const
{
  (const TDevice&) device >>= _n;
  channel >>= _n;
  type >>= _n;
  inputType >>= _n;
  outputType >>= _n;

}

void
STI_Client_Server::TChannel::operator<<= (cdrStream &_n)
{
  (TDevice&)device <<= _n;
  (::CORBA::UShort&)channel <<= _n;
  (STI_Server_Device::TChannelType&)type <<= _n;
  (STI_Server_Device::TData&)inputType <<= _n;
  (STI_Server_Device::TValue&)outputType <<= _n;

}

void
STI_Client_Server::TVarMixed::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  switch(_pd__d) {
    case TypeNumber:
      _pd_number >>= _n;
      break;
    case TypeString:
      _n.marshalString(_pd_stringVal,0);
      break;
    case TypeChannel:
      _pd_channel >>= _n;
      break;
    case TypeObject:
      _n.marshalString(_pd_objectVal,0);
      break;
    default: break;

  
  }


}

void
STI_Client_Server::TVarMixed::operator<<= (cdrStream& _n)
{
  (TType&)_pd__d <<= _n;

  switch(_pd__d) {
    case TypeNumber:
      _pd__default = 0;
      (::CORBA::Double&)_pd_number <<= _n;
      break;
    case TypeString:
      _pd__default = 0;
      _pd_stringVal = _n.unmarshalString(0);
      break;
    case TypeChannel:
      _pd__default = 0;
      (::CORBA::UShort&)_pd_channel <<= _n;
      break;
    case TypeObject:
      _pd__default = 0;
      _pd_objectVal = _n.unmarshalString(0);
      break;

  }
  _pd__initialised = 1;
}

void
STI_Client_Server::TPosition::operator>>= (cdrStream &_n) const
{
  file >>= _n;
  line >>= _n;

}

void
STI_Client_Server::TPosition::operator<<= (cdrStream &_n)
{
  (::CORBA::UShort&)file <<= _n;
  (::CORBA::ULong&)line <<= _n;

}

void
STI_Client_Server::TVariable::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  (const TVarMixed&) value >>= _n;
  (const TPosition&) pos >>= _n;

}

void
STI_Client_Server::TVariable::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (TVarMixed&)value <<= _n;
  (TPosition&)pos <<= _n;

}

void
STI_Client_Server::TDDS::operator>>= (cdrStream &_n) const
{
  freq >>= _n;
  phase >>= _n;
  ampl >>= _n;

}

void
STI_Client_Server::TDDS::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)freq <<= _n;
  (::CORBA::Double&)phase <<= _n;
  (::CORBA::Double&)ampl <<= _n;

}

void
STI_Client_Server::TValMixed::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  switch(_pd__d) {
    case STI_Server_Device::ValueNumber:
      _pd_number >>= _n;
      break;
    case STI_Server_Device::ValueString:
      _n.marshalString(_pd_stringVal,0);
      break;
    case STI_Server_Device::ValueDDSTriplet:
      (const TDDS&) _pd_triplet >>= _n;
      break;
    case STI_Server_Device::ValueMeas:
      _n.marshalBoolean(_pd_meas);
      break;
    default: break;

  
  }


}

void
STI_Client_Server::TValMixed::operator<<= (cdrStream& _n)
{
  (STI_Server_Device::TValue&)_pd__d <<= _n;

  switch(_pd__d) {
    case STI_Server_Device::ValueNumber:
      _pd__default = 0;
      (::CORBA::Double&)_pd_number <<= _n;
      break;
    case STI_Server_Device::ValueString:
      _pd__default = 0;
      _pd_stringVal = _n.unmarshalString(0);
      break;
    case STI_Server_Device::ValueDDSTriplet:
      _pd__default = 0;
      (TDDS&)_pd_triplet <<= _n;
      break;
    case STI_Server_Device::ValueMeas:
      _pd__default = 0;
      _pd_meas = _n.unmarshalBoolean();
      break;

  }
  _pd__initialised = 1;
}

void
STI_Client_Server::TEvent::operator>>= (cdrStream &_n) const
{
  channel >>= _n;
  time >>= _n;
  (const TValMixed&) value >>= _n;
  (const TPosition&) pos >>= _n;

}

void
STI_Client_Server::TEvent::operator<<= (cdrStream &_n)
{
  (::CORBA::UShort&)channel <<= _n;
  (::CORBA::Double&)time <<= _n;
  (TValMixed&)value <<= _n;
  (TPosition&)pos <<= _n;

}

STI_Client_Server::ModeHandler_ptr STI_Client_Server::ModeHandler_Helper::_nil() {
  return ::STI_Client_Server::ModeHandler::_nil();
}

::CORBA::Boolean STI_Client_Server::ModeHandler_Helper::is_nil(::STI_Client_Server::ModeHandler_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::ModeHandler_Helper::release(::STI_Client_Server::ModeHandler_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::ModeHandler_Helper::marshalObjRef(::STI_Client_Server::ModeHandler_ptr obj, cdrStream& s) {
  ::STI_Client_Server::ModeHandler::_marshalObjRef(obj, s);
}

STI_Client_Server::ModeHandler_ptr STI_Client_Server::ModeHandler_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::ModeHandler::_unmarshalObjRef(s);
}

void STI_Client_Server::ModeHandler_Helper::duplicate(::STI_Client_Server::ModeHandler_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_duplicate(::STI_Client_Server::ModeHandler_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ModeHandler _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ModeHandler* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ModeHandler;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::ModeHandler::_PD_repoId = "IDL:STI_Client_Server/ModeHandler:1.0";


STI_Client_Server::_objref_ModeHandler::~_objref_ModeHandler() {
  
}


STI_Client_Server::_objref_ModeHandler::_objref_ModeHandler(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::ModeHandler::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_ModeHandler::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::ModeHandler::_PD_repoId )
    return (::STI_Client_Server::ModeHandler_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::ModeHandler::_PD_repoId) )
    return (::STI_Client_Server::ModeHandler_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_6065364CF0FE09FD_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_6065364CF0FE09FD_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_6065364CF0FE09FD_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_6065364CF0FE09FD_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6065364CF0FE09FD_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_00000000* tcd = (_0RL_cd_6065364CF0FE09FD_00000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->requestControl(tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_ModeHandler::requestControl(const char* myName)
{
  _0RL_cd_6065364CF0FE09FD_00000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_10000000, "requestControl", 15);
  _call_desc.arg_0 = myName;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cboolean
class _0RL_cd_6065364CF0FE09FD_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::Boolean arg_0;
};

void _0RL_cd_6065364CF0FE09FD_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);

}

void _0RL_cd_6065364CF0FE09FD_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_20000000* tcd = (_0RL_cd_6065364CF0FE09FD_20000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  impl->answerRequest(tcd->arg_0);


}

void STI_Client_Server::_objref_ModeHandler::answerRequest(::CORBA::Boolean yield)
{
  _0RL_cd_6065364CF0FE09FD_20000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_30000000, "answerRequest", 14);
  _call_desc.arg_0 = yield;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_6065364CF0FE09FD_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var result;
};

void _0RL_cd_6065364CF0FE09FD_40000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_6065364CF0FE09FD_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_40000000* tcd = (_0RL_cd_6065364CF0FE09FD_40000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->controller();


}

char* STI_Client_Server::_objref_ModeHandler::controller()
{
  _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_50000000, "_get_controller", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_6065364CF0FE09FD_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_6065364CF0FE09FD_60000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_6065364CF0FE09FD_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_60000000* tcd = (_0RL_cd_6065364CF0FE09FD_60000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  impl->controller(tcd->arg_0);


}

void STI_Client_Server::_objref_ModeHandler::controller(const char* _v)
{
  _0RL_cd_6065364CF0FE09FD_60000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_70000000, "_set_controller", 16);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_6065364CF0FE09FD_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::Boolean result;
};

void _0RL_cd_6065364CF0FE09FD_80000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6065364CF0FE09FD_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_80000000* tcd = (_0RL_cd_6065364CF0FE09FD_80000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->requestPending();


}

::CORBA::Boolean STI_Client_Server::_objref_ModeHandler::requestPending()
{
  _0RL_cd_6065364CF0FE09FD_80000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_90000000, "_get_requestPending", 20);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_20000000* tcd = (_0RL_cd_6065364CF0FE09FD_20000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  impl->requestPending(tcd->arg_0);


}

void STI_Client_Server::_objref_ModeHandler::requestPending(::CORBA::Boolean _v)
{
  _0RL_cd_6065364CF0FE09FD_20000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_a0000000, "_set_requestPending", 20);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_40000000* tcd = (_0RL_cd_6065364CF0FE09FD_40000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->requesterName();


}

char* STI_Client_Server::_objref_ModeHandler::requesterName()
{
  _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_b0000000, "_get_requesterName", 19);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_60000000* tcd = (_0RL_cd_6065364CF0FE09FD_60000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  impl->requesterName(tcd->arg_0);


}

void STI_Client_Server::_objref_ModeHandler::requesterName(const char* _v)
{
  _0RL_cd_6065364CF0FE09FD_60000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_c0000000, "_set_requesterName", 19);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}
STI_Client_Server::_pof_ModeHandler::~_pof_ModeHandler() {}


omniObjRef*
STI_Client_Server::_pof_ModeHandler::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_ModeHandler(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_ModeHandler::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::ModeHandler::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_ModeHandler _the_pof_STI__Client__Server_mModeHandler;

STI_Client_Server::_impl_ModeHandler::~_impl_ModeHandler() {}


::CORBA::Boolean
STI_Client_Server::_impl_ModeHandler::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "requestControl") ) {

    _0RL_cd_6065364CF0FE09FD_00000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_10000000, "requestControl", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "answerRequest") ) {

    _0RL_cd_6065364CF0FE09FD_20000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_30000000, "answerRequest", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_controller") ) {

    _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_50000000, "_get_controller", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_controller") ) {

    _0RL_cd_6065364CF0FE09FD_60000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_70000000, "_set_controller", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_requestPending") ) {

    _0RL_cd_6065364CF0FE09FD_80000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_90000000, "_get_requestPending", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_requestPending") ) {

    _0RL_cd_6065364CF0FE09FD_20000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_a0000000, "_set_requestPending", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_requesterName") ) {

    _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_b0000000, "_get_requesterName", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_requesterName") ) {

    _0RL_cd_6065364CF0FE09FD_60000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_c0000000, "_set_requesterName", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_ModeHandler::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::ModeHandler::_PD_repoId )
    return (::STI_Client_Server::_impl_ModeHandler*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::ModeHandler::_PD_repoId) )
    return (::STI_Client_Server::_impl_ModeHandler*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_ModeHandler::_mostDerivedRepoId()
{
  return ::STI_Client_Server::ModeHandler::_PD_repoId;
}

STI_Client_Server::Parser_ptr STI_Client_Server::Parser_Helper::_nil() {
  return ::STI_Client_Server::Parser::_nil();
}

::CORBA::Boolean STI_Client_Server::Parser_Helper::is_nil(::STI_Client_Server::Parser_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::Parser_Helper::release(::STI_Client_Server::Parser_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::Parser_Helper::marshalObjRef(::STI_Client_Server::Parser_ptr obj, cdrStream& s) {
  ::STI_Client_Server::Parser::_marshalObjRef(obj, s);
}

STI_Client_Server::Parser_ptr STI_Client_Server::Parser_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::Parser::_unmarshalObjRef(s);
}

void STI_Client_Server::Parser_Helper::duplicate(::STI_Client_Server::Parser_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_duplicate(::STI_Client_Server::Parser_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Parser _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Parser* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Parser;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::Parser::_PD_repoId = "IDL:STI_Client_Server/Parser:1.0";


STI_Client_Server::_objref_Parser::~_objref_Parser() {
  
}


STI_Client_Server::_objref_Parser::_objref_Parser(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::Parser::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_Parser::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::Parser::_PD_repoId )
    return (::STI_Client_Server::Parser_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::Parser::_PD_repoId) )
    return (::STI_Client_Server::Parser_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_00000000* tcd = (_0RL_cd_6065364CF0FE09FD_00000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->parseFile(tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_Parser::parseFile(const char* filename)
{
  _0RL_cd_6065364CF0FE09FD_00000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_d0000000, "parseFile", 10);
  _call_desc.arg_0 = filename;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_00000000* tcd = (_0RL_cd_6065364CF0FE09FD_00000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->parseString(tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_Parser::parseString(const char* code)
{
  _0RL_cd_6065364CF0FE09FD_00000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_e0000000, "parseString", 12);
  _call_desc.arg_0 = code;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTOverwrittenSeq
class _0RL_cd_6065364CF0FE09FD_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_f0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TOverwrittenSeq_var result;
};

void _0RL_cd_6065364CF0FE09FD_f0000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TOverwrittenSeq&) result >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_f0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TOverwrittenSeq;
  (STI_Client_Server::TOverwrittenSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_f0000000* tcd = (_0RL_cd_6065364CF0FE09FD_f0000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->overwritten();


}

STI_Client_Server::TOverwrittenSeq* STI_Client_Server::_objref_Parser::overwritten()
{
  _0RL_cd_6065364CF0FE09FD_f0000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_01000000, "_get_overwritten", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cSTI__Client__Server_mTOverwrittenSeq
class _0RL_cd_6065364CF0FE09FD_11000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_11000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  STI_Client_Server::TOverwrittenSeq_var arg_0_;
  const STI_Client_Server::TOverwrittenSeq* arg_0;
};

void _0RL_cd_6065364CF0FE09FD_11000000::marshalArguments(cdrStream& _n)
{
  (const STI_Client_Server::TOverwrittenSeq&) *arg_0 >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_11000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI_Client_Server::TOverwrittenSeq;
  (STI_Client_Server::TOverwrittenSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_11000000* tcd = (_0RL_cd_6065364CF0FE09FD_11000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  impl->overwritten(*tcd->arg_0);


}

void STI_Client_Server::_objref_Parser::overwritten(const TOverwrittenSeq& _v)
{
  _0RL_cd_6065364CF0FE09FD_11000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_21000000, "_set_overwritten", 17);
  _call_desc.arg_0 = &(TOverwrittenSeq&) _v;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_80000000* tcd = (_0RL_cd_6065364CF0FE09FD_80000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->lockOnParse();


}

::CORBA::Boolean STI_Client_Server::_objref_Parser::lockOnParse()
{
  _0RL_cd_6065364CF0FE09FD_80000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_31000000, "_get_lockOnParse", 17);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_41000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_20000000* tcd = (_0RL_cd_6065364CF0FE09FD_20000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  impl->lockOnParse(tcd->arg_0);


}

void STI_Client_Server::_objref_Parser::lockOnParse(::CORBA::Boolean _v)
{
  _0RL_cd_6065364CF0FE09FD_20000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_41000000, "_set_lockOnParse", 17);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_40000000* tcd = (_0RL_cd_6065364CF0FE09FD_40000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->outMsg();


}

char* STI_Client_Server::_objref_Parser::outMsg()
{
  _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_51000000, "_get_outMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_61000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_40000000* tcd = (_0RL_cd_6065364CF0FE09FD_40000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->errMsg();


}

char* STI_Client_Server::_objref_Parser::errMsg()
{
  _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_61000000, "_get_errMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_40000000* tcd = (_0RL_cd_6065364CF0FE09FD_40000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->mainFile();


}

char* STI_Client_Server::_objref_Parser::mainFile()
{
  _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_71000000, "_get_mainFile", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTChannelSeq
class _0RL_cd_6065364CF0FE09FD_81000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_81000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TChannelSeq_var result;
};

void _0RL_cd_6065364CF0FE09FD_81000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TChannelSeq&) result >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_81000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TChannelSeq;
  (STI_Client_Server::TChannelSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_81000000* tcd = (_0RL_cd_6065364CF0FE09FD_81000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->channels();


}

STI_Client_Server::TChannelSeq* STI_Client_Server::_objref_Parser::channels()
{
  _0RL_cd_6065364CF0FE09FD_81000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_91000000, "_get_channels", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTStringSeq
class _0RL_cd_6065364CF0FE09FD_a1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_a1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TStringSeq_var result;
};

void _0RL_cd_6065364CF0FE09FD_a1000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TStringSeq&) result >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_a1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TStringSeq;
  (STI_Client_Server::TStringSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_a1000000* tcd = (_0RL_cd_6065364CF0FE09FD_a1000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->files();


}

STI_Client_Server::TStringSeq* STI_Client_Server::_objref_Parser::files()
{
  _0RL_cd_6065364CF0FE09FD_a1000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_b1000000, "_get_files", 11);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTVariableSeq
class _0RL_cd_6065364CF0FE09FD_c1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_c1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TVariableSeq_var result;
};

void _0RL_cd_6065364CF0FE09FD_c1000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TVariableSeq&) result >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_c1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TVariableSeq;
  (STI_Client_Server::TVariableSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_c1000000* tcd = (_0RL_cd_6065364CF0FE09FD_c1000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->variables();


}

STI_Client_Server::TVariableSeq* STI_Client_Server::_objref_Parser::variables()
{
  _0RL_cd_6065364CF0FE09FD_c1000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_d1000000, "_get_variables", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTEventSeq
class _0RL_cd_6065364CF0FE09FD_e1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_e1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TEventSeq_var result;
};

void _0RL_cd_6065364CF0FE09FD_e1000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TEventSeq&) result >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_e1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TEventSeq;
  (STI_Client_Server::TEventSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_f1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_e1000000* tcd = (_0RL_cd_6065364CF0FE09FD_e1000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->events();


}

STI_Client_Server::TEventSeq* STI_Client_Server::_objref_Parser::events()
{
  _0RL_cd_6065364CF0FE09FD_e1000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_f1000000, "_get_events", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_Parser::~_pof_Parser() {}


omniObjRef*
STI_Client_Server::_pof_Parser::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_Parser(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_Parser::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::Parser::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_Parser _the_pof_STI__Client__Server_mParser;

STI_Client_Server::_impl_Parser::~_impl_Parser() {}


::CORBA::Boolean
STI_Client_Server::_impl_Parser::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "parseFile") ) {

    _0RL_cd_6065364CF0FE09FD_00000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_d0000000, "parseFile", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "parseString") ) {

    _0RL_cd_6065364CF0FE09FD_00000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_e0000000, "parseString", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_overwritten") ) {

    _0RL_cd_6065364CF0FE09FD_f0000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_01000000, "_get_overwritten", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_overwritten") ) {

    _0RL_cd_6065364CF0FE09FD_11000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_21000000, "_set_overwritten", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_lockOnParse") ) {

    _0RL_cd_6065364CF0FE09FD_80000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_31000000, "_get_lockOnParse", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_lockOnParse") ) {

    _0RL_cd_6065364CF0FE09FD_20000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_41000000, "_set_lockOnParse", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_outMsg") ) {

    _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_51000000, "_get_outMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_errMsg") ) {

    _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_61000000, "_get_errMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_mainFile") ) {

    _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_71000000, "_get_mainFile", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_channels") ) {

    _0RL_cd_6065364CF0FE09FD_81000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_91000000, "_get_channels", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_files") ) {

    _0RL_cd_6065364CF0FE09FD_a1000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_b1000000, "_get_files", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_variables") ) {

    _0RL_cd_6065364CF0FE09FD_c1000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_d1000000, "_get_variables", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_events") ) {

    _0RL_cd_6065364CF0FE09FD_e1000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_f1000000, "_get_events", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_Parser::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::Parser::_PD_repoId )
    return (::STI_Client_Server::_impl_Parser*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::Parser::_PD_repoId) )
    return (::STI_Client_Server::_impl_Parser*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_Parser::_mostDerivedRepoId()
{
  return ::STI_Client_Server::Parser::_PD_repoId;
}

void
STI_Client_Server::TStatus::operator>>= (cdrStream &_n) const
{
  level >>= _n;
  curTime >>= _n;
  curEvent >>= _n;
  curCycle >>= _n;

}

void
STI_Client_Server::TStatus::operator<<= (cdrStream &_n)
{
  (TStatusLevel&)level <<= _n;
  (::CORBA::Double&)curTime <<= _n;
  (::CORBA::ULong&)curEvent <<= _n;
  (::CORBA::UShort&)curCycle <<= _n;

}

void
STI_Client_Server::TRow::operator>>= (cdrStream &_n) const
{
  (const TStringSeq&) val >>= _n;
  _n.marshalBoolean(done);

}

void
STI_Client_Server::TRow::operator<<= (cdrStream &_n)
{
  (TStringSeq&)val <<= _n;
  done = _n.unmarshalBoolean();

}

STI_Client_Server::ExpSequence_ptr STI_Client_Server::ExpSequence_Helper::_nil() {
  return ::STI_Client_Server::ExpSequence::_nil();
}

::CORBA::Boolean STI_Client_Server::ExpSequence_Helper::is_nil(::STI_Client_Server::ExpSequence_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::ExpSequence_Helper::release(::STI_Client_Server::ExpSequence_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::ExpSequence_Helper::marshalObjRef(::STI_Client_Server::ExpSequence_ptr obj, cdrStream& s) {
  ::STI_Client_Server::ExpSequence::_marshalObjRef(obj, s);
}

STI_Client_Server::ExpSequence_ptr STI_Client_Server::ExpSequence_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::ExpSequence::_unmarshalObjRef(s);
}

void STI_Client_Server::ExpSequence_Helper::duplicate(::STI_Client_Server::ExpSequence_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_duplicate(::STI_Client_Server::ExpSequence_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ExpSequence _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ExpSequence* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ExpSequence;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::ExpSequence::_PD_repoId = "IDL:STI_Client_Server/ExpSequence:1.0";


STI_Client_Server::_objref_ExpSequence::~_objref_ExpSequence() {
  
}


STI_Client_Server::_objref_ExpSequence::_objref_ExpSequence(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::ExpSequence::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_ExpSequence::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::ExpSequence::_PD_repoId )
    return (::STI_Client_Server::ExpSequence_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::ExpSequence::_PD_repoId) )
    return (::STI_Client_Server::ExpSequence_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSTI__Client__Server_mTStringSeq
class _0RL_cd_6065364CF0FE09FD_02000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_02000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TStringSeq_var arg_0_;
  const STI_Client_Server::TStringSeq* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_6065364CF0FE09FD_02000000::marshalArguments(cdrStream& _n)
{
  (const STI_Client_Server::TStringSeq&) *arg_0 >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_02000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI_Client_Server::TStringSeq;
  (STI_Client_Server::TStringSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_6065364CF0FE09FD_02000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6065364CF0FE09FD_02000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_02000000* tcd = (_0RL_cd_6065364CF0FE09FD_02000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->appendRow(*tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_ExpSequence::appendRow(const TStringSeq& newRow)
{
  _0RL_cd_6065364CF0FE09FD_02000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_12000000, "appendRow", 10);
  _call_desc.arg_0 = &(TStringSeq&) newRow;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cunsigned_plong_i_cunsigned_plong
class _0RL_cd_6065364CF0FE09FD_22000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_22000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::ULong arg_0;
  ::CORBA::ULong arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_6065364CF0FE09FD_22000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_22000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  (::CORBA::ULong&)arg_1 <<= _n;

}

void _0RL_cd_6065364CF0FE09FD_22000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6065364CF0FE09FD_22000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_32000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_22000000* tcd = (_0RL_cd_6065364CF0FE09FD_22000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->moveRow(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean STI_Client_Server::_objref_ExpSequence::moveRow(::CORBA::ULong oldPos, ::CORBA::ULong newPos)
{
  _0RL_cd_6065364CF0FE09FD_22000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_32000000, "moveRow", 8);
  _call_desc.arg_0 = oldPos;
  _call_desc.arg_1 = newPos;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cunsigned_plong_i_cSTI__Client__Server_mTStringSeq
class _0RL_cd_6065364CF0FE09FD_42000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_42000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::ULong arg_0;
  STI_Client_Server::TStringSeq_var arg_1_;
  const STI_Client_Server::TStringSeq* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_6065364CF0FE09FD_42000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const STI_Client_Server::TStringSeq&) *arg_1 >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_42000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  arg_1_ = new STI_Client_Server::TStringSeq;
  (STI_Client_Server::TStringSeq&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_6065364CF0FE09FD_42000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6065364CF0FE09FD_42000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_52000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_42000000* tcd = (_0RL_cd_6065364CF0FE09FD_42000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->editRow(tcd->arg_0, *tcd->arg_1);


}

::CORBA::Boolean STI_Client_Server::_objref_ExpSequence::editRow(::CORBA::ULong pos, const TStringSeq& newRow)
{
  _0RL_cd_6065364CF0FE09FD_42000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_52000000, "editRow", 8);
  _call_desc.arg_0 = pos;
  _call_desc.arg_1 = &(TStringSeq&) newRow;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cunsigned_plong_i_cboolean
class _0RL_cd_6065364CF0FE09FD_62000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_62000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::ULong arg_0;
  ::CORBA::Boolean arg_1;
};

void _0RL_cd_6065364CF0FE09FD_62000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_6065364CF0FE09FD_62000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  arg_1 = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_72000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_62000000* tcd = (_0RL_cd_6065364CF0FE09FD_62000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  impl->editDone(tcd->arg_0, tcd->arg_1);


}

void STI_Client_Server::_objref_ExpSequence::editDone(::CORBA::ULong pos, ::CORBA::Boolean newDone)
{
  _0RL_cd_6065364CF0FE09FD_62000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_72000000, "editDone", 9);
  _call_desc.arg_0 = pos;
  _call_desc.arg_1 = newDone;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_a1000000* tcd = (_0RL_cd_6065364CF0FE09FD_a1000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->variables();


}

STI_Client_Server::TStringSeq* STI_Client_Server::_objref_ExpSequence::variables()
{
  _0RL_cd_6065364CF0FE09FD_a1000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_82000000, "_get_variables", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTRowSeq
class _0RL_cd_6065364CF0FE09FD_92000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_92000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TRowSeq_var result;
};

void _0RL_cd_6065364CF0FE09FD_92000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TRowSeq&) result >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_92000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TRowSeq;
  (STI_Client_Server::TRowSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_a2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_92000000* tcd = (_0RL_cd_6065364CF0FE09FD_92000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->experiments();


}

STI_Client_Server::TRowSeq* STI_Client_Server::_objref_ExpSequence::experiments()
{
  _0RL_cd_6065364CF0FE09FD_92000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_a2000000, "_get_experiments", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_ExpSequence::~_pof_ExpSequence() {}


omniObjRef*
STI_Client_Server::_pof_ExpSequence::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_ExpSequence(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_ExpSequence::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::ExpSequence::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_ExpSequence _the_pof_STI__Client__Server_mExpSequence;

STI_Client_Server::_impl_ExpSequence::~_impl_ExpSequence() {}


::CORBA::Boolean
STI_Client_Server::_impl_ExpSequence::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "appendRow") ) {

    _0RL_cd_6065364CF0FE09FD_02000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_12000000, "appendRow", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "moveRow") ) {

    _0RL_cd_6065364CF0FE09FD_22000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_32000000, "moveRow", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "editRow") ) {

    _0RL_cd_6065364CF0FE09FD_42000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_52000000, "editRow", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "editDone") ) {

    _0RL_cd_6065364CF0FE09FD_62000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_72000000, "editDone", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_variables") ) {

    _0RL_cd_6065364CF0FE09FD_a1000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_82000000, "_get_variables", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_experiments") ) {

    _0RL_cd_6065364CF0FE09FD_92000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_a2000000, "_get_experiments", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_ExpSequence::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::ExpSequence::_PD_repoId )
    return (::STI_Client_Server::_impl_ExpSequence*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::ExpSequence::_PD_repoId) )
    return (::STI_Client_Server::_impl_ExpSequence*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_ExpSequence::_mostDerivedRepoId()
{
  return ::STI_Client_Server::ExpSequence::_PD_repoId;
}

STI_Client_Server::Control_ptr STI_Client_Server::Control_Helper::_nil() {
  return ::STI_Client_Server::Control::_nil();
}

::CORBA::Boolean STI_Client_Server::Control_Helper::is_nil(::STI_Client_Server::Control_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::Control_Helper::release(::STI_Client_Server::Control_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::Control_Helper::marshalObjRef(::STI_Client_Server::Control_ptr obj, cdrStream& s) {
  ::STI_Client_Server::Control::_marshalObjRef(obj, s);
}

STI_Client_Server::Control_ptr STI_Client_Server::Control_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::Control::_unmarshalObjRef(s);
}

void STI_Client_Server::Control_Helper::duplicate(::STI_Client_Server::Control_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::Control_ptr
STI_Client_Server::Control::_duplicate(::STI_Client_Server::Control_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::Control_ptr
STI_Client_Server::Control::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::Control_ptr
STI_Client_Server::Control::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::Control_ptr
STI_Client_Server::Control::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Control _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Control* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Control;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::Control::_PD_repoId = "IDL:STI_Client_Server/Control:1.0";


STI_Client_Server::_objref_Control::~_objref_Control() {
  
}


STI_Client_Server::_objref_Control::_objref_Control(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::Control::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_Control::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::Control::_PD_repoId )
    return (::STI_Client_Server::Control_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::Control::_PD_repoId) )
    return (::STI_Client_Server::Control_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTStatus
class _0RL_cd_6065364CF0FE09FD_b2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_b2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TStatus result;
};

void _0RL_cd_6065364CF0FE09FD_b2000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TStatus&) result >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_b2000000::unmarshalReturnedValues(cdrStream& _n)
{
  (STI_Client_Server::TStatus&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_c2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_b2000000* tcd = (_0RL_cd_6065364CF0FE09FD_b2000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  tcd->result = impl->status();


}

STI_Client_Server::TStatus STI_Client_Server::_objref_Control::status()
{
  _0RL_cd_6065364CF0FE09FD_b2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_c2000000, "status", 7);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_6065364CF0FE09FD_d2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_d2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
    
  
  
};

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_e2000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->reset();


}

void STI_Client_Server::_objref_Control::reset()
{
  _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_e2000000, "reset", 6);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_f2000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->setDirect();


}

void STI_Client_Server::_objref_Control::setDirect()
{
  _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_f2000000, "setDirect", 10);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_03000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->runSingle();


}

void STI_Client_Server::_objref_Control::runSingle()
{
  _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_03000000, "runSingle", 10);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_13000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->runSequence();


}

void STI_Client_Server::_objref_Control::runSequence()
{
  _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_13000000, "runSequence", 12);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_23000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->_cxx_continue();


}

void STI_Client_Server::_objref_Control::_cxx_continue()
{
  _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_23000000, "continue", 9);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_33000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->stop();


}

void STI_Client_Server::_objref_Control::stop()
{
  _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_33000000, "stop", 5);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_43000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_40000000* tcd = (_0RL_cd_6065364CF0FE09FD_40000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  tcd->result = impl->errMsg();


}

char* STI_Client_Server::_objref_Control::errMsg()
{
  _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_43000000, "_get_errMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_Control::~_pof_Control() {}


omniObjRef*
STI_Client_Server::_pof_Control::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_Control(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_Control::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::Control::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_Control _the_pof_STI__Client__Server_mControl;

STI_Client_Server::_impl_Control::~_impl_Control() {}


::CORBA::Boolean
STI_Client_Server::_impl_Control::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "status") ) {

    _0RL_cd_6065364CF0FE09FD_b2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_c2000000, "status", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "reset") ) {

    _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_e2000000, "reset", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setDirect") ) {

    _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_f2000000, "setDirect", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "runSingle") ) {

    _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_03000000, "runSingle", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "runSequence") ) {

    _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_13000000, "runSequence", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "continue") ) {

    _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_23000000, "continue", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stop") ) {

    _0RL_cd_6065364CF0FE09FD_d2000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_33000000, "stop", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_errMsg") ) {

    _0RL_cd_6065364CF0FE09FD_40000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_43000000, "_get_errMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_Control::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::Control::_PD_repoId )
    return (::STI_Client_Server::_impl_Control*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::Control::_PD_repoId) )
    return (::STI_Client_Server::_impl_Control*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_Control::_mostDerivedRepoId()
{
  return ::STI_Client_Server::Control::_PD_repoId;
}

void
STI_Client_Server::TAttribute::operator>>= (cdrStream &_n) const
{
  _n.marshalString(key,0);
  _n.marshalString(value,0);
  (const TStringSeq&) values >>= _n;

}

void
STI_Client_Server::TAttribute::operator<<= (cdrStream &_n)
{
  key = _n.unmarshalString(0);
  value = _n.unmarshalString(0);
  (TStringSeq&)values <<= _n;

}

STI_Client_Server::DeviceConfigure_ptr STI_Client_Server::DeviceConfigure_Helper::_nil() {
  return ::STI_Client_Server::DeviceConfigure::_nil();
}

::CORBA::Boolean STI_Client_Server::DeviceConfigure_Helper::is_nil(::STI_Client_Server::DeviceConfigure_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::DeviceConfigure_Helper::release(::STI_Client_Server::DeviceConfigure_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::DeviceConfigure_Helper::marshalObjRef(::STI_Client_Server::DeviceConfigure_ptr obj, cdrStream& s) {
  ::STI_Client_Server::DeviceConfigure::_marshalObjRef(obj, s);
}

STI_Client_Server::DeviceConfigure_ptr STI_Client_Server::DeviceConfigure_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::DeviceConfigure::_unmarshalObjRef(s);
}

void STI_Client_Server::DeviceConfigure_Helper::duplicate(::STI_Client_Server::DeviceConfigure_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::DeviceConfigure_ptr
STI_Client_Server::DeviceConfigure::_duplicate(::STI_Client_Server::DeviceConfigure_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::DeviceConfigure_ptr
STI_Client_Server::DeviceConfigure::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::DeviceConfigure_ptr
STI_Client_Server::DeviceConfigure::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::DeviceConfigure_ptr
STI_Client_Server::DeviceConfigure::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DeviceConfigure _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DeviceConfigure* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DeviceConfigure;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::DeviceConfigure::_PD_repoId = "IDL:STI_Client_Server/DeviceConfigure:1.0";


STI_Client_Server::_objref_DeviceConfigure::~_objref_DeviceConfigure() {
  
}


STI_Client_Server::_objref_DeviceConfigure::_objref_DeviceConfigure(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::DeviceConfigure::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_DeviceConfigure::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::DeviceConfigure::_PD_repoId )
    return (::STI_Client_Server::DeviceConfigure_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::DeviceConfigure::_PD_repoId) )
    return (::STI_Client_Server::DeviceConfigure_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTAttributeSeq_i_cstring
class _0RL_cd_6065364CF0FE09FD_53000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_53000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI_Client_Server::TAttributeSeq_var result;
};

void _0RL_cd_6065364CF0FE09FD_53000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_6065364CF0FE09FD_53000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_6065364CF0FE09FD_53000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TAttributeSeq&) result >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_53000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TAttributeSeq;
  (STI_Client_Server::TAttributeSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_63000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_53000000* tcd = (_0RL_cd_6065364CF0FE09FD_53000000*)cd;
  STI_Client_Server::_impl_DeviceConfigure* impl = (STI_Client_Server::_impl_DeviceConfigure*) svnt->_ptrToInterface(STI_Client_Server::DeviceConfigure::_PD_repoId);
  tcd->result = impl->getDeviceAttributes(tcd->arg_0);


}

STI_Client_Server::TAttributeSeq* STI_Client_Server::_objref_DeviceConfigure::getDeviceAttributes(const char* deviceID)
{
  _0RL_cd_6065364CF0FE09FD_53000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_63000000, "getDeviceAttributes", 20);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring_i_cstring
class _0RL_cd_6065364CF0FE09FD_73000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_73000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_6065364CF0FE09FD_73000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);

}

void _0RL_cd_6065364CF0FE09FD_73000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_6065364CF0FE09FD_73000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6065364CF0FE09FD_73000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_83000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_73000000* tcd = (_0RL_cd_6065364CF0FE09FD_73000000*)cd;
  STI_Client_Server::_impl_DeviceConfigure* impl = (STI_Client_Server::_impl_DeviceConfigure*) svnt->_ptrToInterface(STI_Client_Server::DeviceConfigure::_PD_repoId);
  tcd->result = impl->setDeviceAttribute(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean STI_Client_Server::_objref_DeviceConfigure::setDeviceAttribute(const char* deviceID, const char* key, const char* value)
{
  _0RL_cd_6065364CF0FE09FD_73000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_83000000, "setDeviceAttribute", 19);
  _call_desc.arg_0 = deviceID;
  _call_desc.arg_1 = key;
  _call_desc.arg_2 = value;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTChannelSeq_i_cstring
class _0RL_cd_6065364CF0FE09FD_93000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_93000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI_Client_Server::TChannelSeq_var result;
};

void _0RL_cd_6065364CF0FE09FD_93000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_6065364CF0FE09FD_93000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_6065364CF0FE09FD_93000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TChannelSeq&) result >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_93000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TChannelSeq;
  (STI_Client_Server::TChannelSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_a3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_93000000* tcd = (_0RL_cd_6065364CF0FE09FD_93000000*)cd;
  STI_Client_Server::_impl_DeviceConfigure* impl = (STI_Client_Server::_impl_DeviceConfigure*) svnt->_ptrToInterface(STI_Client_Server::DeviceConfigure::_PD_repoId);
  tcd->result = impl->getDeviceChannels(tcd->arg_0);


}

STI_Client_Server::TChannelSeq* STI_Client_Server::_objref_DeviceConfigure::getDeviceChannels(const char* deviceID)
{
  _0RL_cd_6065364CF0FE09FD_93000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_a3000000, "getDeviceChannels", 18);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_b3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_00000000* tcd = (_0RL_cd_6065364CF0FE09FD_00000000*)cd;
  STI_Client_Server::_impl_DeviceConfigure* impl = (STI_Client_Server::_impl_DeviceConfigure*) svnt->_ptrToInterface(STI_Client_Server::DeviceConfigure::_PD_repoId);
  tcd->result = impl->deviceStatus(tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_DeviceConfigure::deviceStatus(const char* deviceID)
{
  _0RL_cd_6065364CF0FE09FD_00000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_b3000000, "deviceStatus", 13);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTDeviceSeq
class _0RL_cd_6065364CF0FE09FD_c3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364CF0FE09FD_c3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TDeviceSeq_var result;
};

void _0RL_cd_6065364CF0FE09FD_c3000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TDeviceSeq&) result >>= _n;

}

void _0RL_cd_6065364CF0FE09FD_c3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TDeviceSeq;
  (STI_Client_Server::TDeviceSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364CF0FE09FD_d3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364CF0FE09FD_c3000000* tcd = (_0RL_cd_6065364CF0FE09FD_c3000000*)cd;
  STI_Client_Server::_impl_DeviceConfigure* impl = (STI_Client_Server::_impl_DeviceConfigure*) svnt->_ptrToInterface(STI_Client_Server::DeviceConfigure::_PD_repoId);
  tcd->result = impl->devices();


}

STI_Client_Server::TDeviceSeq* STI_Client_Server::_objref_DeviceConfigure::devices()
{
  _0RL_cd_6065364CF0FE09FD_c3000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_d3000000, "_get_devices", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_DeviceConfigure::~_pof_DeviceConfigure() {}


omniObjRef*
STI_Client_Server::_pof_DeviceConfigure::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_DeviceConfigure(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_DeviceConfigure::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::DeviceConfigure::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_DeviceConfigure _the_pof_STI__Client__Server_mDeviceConfigure;

STI_Client_Server::_impl_DeviceConfigure::~_impl_DeviceConfigure() {}


::CORBA::Boolean
STI_Client_Server::_impl_DeviceConfigure::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getDeviceAttributes") ) {

    _0RL_cd_6065364CF0FE09FD_53000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_63000000, "getDeviceAttributes", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setDeviceAttribute") ) {

    _0RL_cd_6065364CF0FE09FD_73000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_83000000, "setDeviceAttribute", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDeviceChannels") ) {

    _0RL_cd_6065364CF0FE09FD_93000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_a3000000, "getDeviceChannels", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "deviceStatus") ) {

    _0RL_cd_6065364CF0FE09FD_00000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_b3000000, "deviceStatus", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_devices") ) {

    _0RL_cd_6065364CF0FE09FD_c3000000 _call_desc(_0RL_lcfn_6065364CF0FE09FD_d3000000, "_get_devices", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_DeviceConfigure::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::DeviceConfigure::_PD_repoId )
    return (::STI_Client_Server::_impl_DeviceConfigure*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::DeviceConfigure::_PD_repoId) )
    return (::STI_Client_Server::_impl_DeviceConfigure*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_DeviceConfigure::_mostDerivedRepoId()
{
  return ::STI_Client_Server::DeviceConfigure::_PD_repoId;
}

POA_STI_Client_Server::ModeHandler::~ModeHandler() {}

POA_STI_Client_Server::Parser::~Parser() {}

POA_STI_Client_Server::ExpSequence::~ExpSequence() {}

POA_STI_Client_Server::Control::~Control() {}

POA_STI_Client_Server::DeviceConfigure::~DeviceConfigure() {}

