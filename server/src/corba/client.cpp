// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "client_clnt.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
STI_Client_Server::TOverwritten::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  _n.marshalString(value,0);

}

void
STI_Client_Server::TOverwritten::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  value = _n.unmarshalString(0);

}

void
STI_Client_Server::TBoard::operator>>= (cdrStream &_n) const
{
  _n.marshalString(boardType,0);
  _n.marshalString(address,0);
  moduleType >>= _n;

}

void
STI_Client_Server::TBoard::operator<<= (cdrStream &_n)
{
  boardType = _n.unmarshalString(0);
  address = _n.unmarshalString(0);
  (::CORBA::UShort&)moduleType <<= _n;

}

void
STI_Client_Server::TChannel::operator>>= (cdrStream &_n) const
{
  (const TBoard&) board >>= _n;
  channel >>= _n;

}

void
STI_Client_Server::TChannel::operator<<= (cdrStream &_n)
{
  (TBoard&)board <<= _n;
  (::CORBA::UShort&)channel <<= _n;

}

void
STI_Client_Server::TVarMixed::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  switch(_pd__d) {
    case TypeNumber:
      _pd_number >>= _n;
      break;
    case TypeString:
      _n.marshalString(_pd_stringVal,0);
      break;
    case TypeChannel:
      _pd_channel >>= _n;
      break;
    case TypeObject:
      _n.marshalString(_pd_objectVal,0);
      break;
    default: break;

  
  }


}

void
STI_Client_Server::TVarMixed::operator<<= (cdrStream& _n)
{
  (TType&)_pd__d <<= _n;

  switch(_pd__d) {
    case TypeNumber:
      _pd__default = 0;
      (::CORBA::Double&)_pd_number <<= _n;
      break;
    case TypeString:
      _pd__default = 0;
      _pd_stringVal = _n.unmarshalString(0);
      break;
    case TypeChannel:
      _pd__default = 0;
      (::CORBA::UShort&)_pd_channel <<= _n;
      break;
    case TypeObject:
      _pd__default = 0;
      _pd_objectVal = _n.unmarshalString(0);
      break;

  }
  _pd__initialised = 1;
}

void
STI_Client_Server::TPosition::operator>>= (cdrStream &_n) const
{
  file >>= _n;
  line >>= _n;

}

void
STI_Client_Server::TPosition::operator<<= (cdrStream &_n)
{
  (::CORBA::UShort&)file <<= _n;
  (::CORBA::ULong&)line <<= _n;

}

void
STI_Client_Server::TVariable::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  (const TVarMixed&) value >>= _n;
  (const TPosition&) pos >>= _n;

}

void
STI_Client_Server::TVariable::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (TVarMixed&)value <<= _n;
  (TPosition&)pos <<= _n;

}

void
STI_Client_Server::TDDS::operator>>= (cdrStream &_n) const
{
  freq >>= _n;
  phase >>= _n;
  ampl >>= _n;

}

void
STI_Client_Server::TDDS::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)freq <<= _n;
  (::CORBA::Double&)phase <<= _n;
  (::CORBA::Double&)ampl <<= _n;

}

void
STI_Client_Server::TValMixed::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  switch(_pd__d) {
    case ValueNumber:
      _pd_number >>= _n;
      break;
    case ValueString:
      _n.marshalString(_pd_stringVal,0);
      break;
    case ValueDDSTriplet:
      (const TDDS&) _pd_triplet >>= _n;
      break;
    default: break;

  
  }


}

void
STI_Client_Server::TValMixed::operator<<= (cdrStream& _n)
{
  (TValue&)_pd__d <<= _n;

  switch(_pd__d) {
    case ValueNumber:
      _pd__default = 0;
      (::CORBA::Double&)_pd_number <<= _n;
      break;
    case ValueString:
      _pd__default = 0;
      _pd_stringVal = _n.unmarshalString(0);
      break;
    case ValueDDSTriplet:
      _pd__default = 0;
      (TDDS&)_pd_triplet <<= _n;
      break;

  }
  _pd__initialised = 1;
}

void
STI_Client_Server::TEvent::operator>>= (cdrStream &_n) const
{
  channel >>= _n;
  time >>= _n;
  (const TValMixed&) value >>= _n;
  (const TPosition&) pos >>= _n;

}

void
STI_Client_Server::TEvent::operator<<= (cdrStream &_n)
{
  (::CORBA::UShort&)channel <<= _n;
  (::CORBA::Double&)time <<= _n;
  (TValMixed&)value <<= _n;
  (TPosition&)pos <<= _n;

}

STI_Client_Server::ModeHandler_ptr STI_Client_Server::ModeHandler_Helper::_nil() {
  return ::STI_Client_Server::ModeHandler::_nil();
}

::CORBA::Boolean STI_Client_Server::ModeHandler_Helper::is_nil(::STI_Client_Server::ModeHandler_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::ModeHandler_Helper::release(::STI_Client_Server::ModeHandler_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::ModeHandler_Helper::marshalObjRef(::STI_Client_Server::ModeHandler_ptr obj, cdrStream& s) {
  ::STI_Client_Server::ModeHandler::_marshalObjRef(obj, s);
}

STI_Client_Server::ModeHandler_ptr STI_Client_Server::ModeHandler_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::ModeHandler::_unmarshalObjRef(s);
}

void STI_Client_Server::ModeHandler_Helper::duplicate(::STI_Client_Server::ModeHandler_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_duplicate(::STI_Client_Server::ModeHandler_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::ModeHandler_ptr
STI_Client_Server::ModeHandler::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ModeHandler _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ModeHandler* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ModeHandler;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::ModeHandler::_PD_repoId = "IDL:STI_Client_Server/ModeHandler:1.0";


STI_Client_Server::_objref_ModeHandler::~_objref_ModeHandler() {
  
}


STI_Client_Server::_objref_ModeHandler::_objref_ModeHandler(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::ModeHandler::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_ModeHandler::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::ModeHandler::_PD_repoId )
    return (::STI_Client_Server::ModeHandler_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::ModeHandler::_PD_repoId) )
    return (::STI_Client_Server::ModeHandler_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_6065364cf0fe09fd_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_6065364cf0fe09fd_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_6065364cf0fe09fd_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_6065364cf0fe09fd_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6065364cf0fe09fd_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_00000000* tcd = (_0RL_cd_6065364cf0fe09fd_00000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->requestControl(tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_ModeHandler::requestControl(const char* myName)
{
  _0RL_cd_6065364cf0fe09fd_00000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_10000000, "requestControl", 15);
  _call_desc.arg_0 = myName;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cboolean
class _0RL_cd_6065364cf0fe09fd_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::Boolean arg_0;
};

void _0RL_cd_6065364cf0fe09fd_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);

}

void _0RL_cd_6065364cf0fe09fd_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_20000000* tcd = (_0RL_cd_6065364cf0fe09fd_20000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  impl->answerRequest(tcd->arg_0);


}

void STI_Client_Server::_objref_ModeHandler::answerRequest(::CORBA::Boolean yield)
{
  _0RL_cd_6065364cf0fe09fd_20000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_30000000, "answerRequest", 14);
  _call_desc.arg_0 = yield;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_6065364cf0fe09fd_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var result;
};

void _0RL_cd_6065364cf0fe09fd_40000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_6065364cf0fe09fd_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_40000000* tcd = (_0RL_cd_6065364cf0fe09fd_40000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->controller();


}

char* STI_Client_Server::_objref_ModeHandler::controller()
{
  _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_50000000, "_get_controller", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_6065364cf0fe09fd_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_6065364cf0fe09fd_60000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_6065364cf0fe09fd_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_60000000* tcd = (_0RL_cd_6065364cf0fe09fd_60000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  impl->controller(tcd->arg_0);


}

void STI_Client_Server::_objref_ModeHandler::controller(const char* _v)
{
  _0RL_cd_6065364cf0fe09fd_60000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_70000000, "_set_controller", 16);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_6065364cf0fe09fd_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::Boolean result;
};

void _0RL_cd_6065364cf0fe09fd_80000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6065364cf0fe09fd_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_80000000* tcd = (_0RL_cd_6065364cf0fe09fd_80000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->requestPending();


}

::CORBA::Boolean STI_Client_Server::_objref_ModeHandler::requestPending()
{
  _0RL_cd_6065364cf0fe09fd_80000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_90000000, "_get_requestPending", 20);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_20000000* tcd = (_0RL_cd_6065364cf0fe09fd_20000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  impl->requestPending(tcd->arg_0);


}

void STI_Client_Server::_objref_ModeHandler::requestPending(::CORBA::Boolean _v)
{
  _0RL_cd_6065364cf0fe09fd_20000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_a0000000, "_set_requestPending", 20);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_40000000* tcd = (_0RL_cd_6065364cf0fe09fd_40000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->requesterName();


}

char* STI_Client_Server::_objref_ModeHandler::requesterName()
{
  _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_b0000000, "_get_requesterName", 19);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_60000000* tcd = (_0RL_cd_6065364cf0fe09fd_60000000*)cd;
  STI_Client_Server::_impl_ModeHandler* impl = (STI_Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI_Client_Server::ModeHandler::_PD_repoId);
  impl->requesterName(tcd->arg_0);


}

void STI_Client_Server::_objref_ModeHandler::requesterName(const char* _v)
{
  _0RL_cd_6065364cf0fe09fd_60000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_c0000000, "_set_requesterName", 19);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}
STI_Client_Server::_pof_ModeHandler::~_pof_ModeHandler() {}


omniObjRef*
STI_Client_Server::_pof_ModeHandler::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_ModeHandler(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_ModeHandler::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::ModeHandler::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_ModeHandler _the_pof_STI__Client__Server_mModeHandler;

STI_Client_Server::_impl_ModeHandler::~_impl_ModeHandler() {}


::CORBA::Boolean
STI_Client_Server::_impl_ModeHandler::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "requestControl") ) {

    _0RL_cd_6065364cf0fe09fd_00000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_10000000, "requestControl", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "answerRequest") ) {

    _0RL_cd_6065364cf0fe09fd_20000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_30000000, "answerRequest", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_controller") ) {

    _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_50000000, "_get_controller", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_controller") ) {

    _0RL_cd_6065364cf0fe09fd_60000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_70000000, "_set_controller", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_requestPending") ) {

    _0RL_cd_6065364cf0fe09fd_80000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_90000000, "_get_requestPending", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_requestPending") ) {

    _0RL_cd_6065364cf0fe09fd_20000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_a0000000, "_set_requestPending", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_requesterName") ) {

    _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_b0000000, "_get_requesterName", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_requesterName") ) {

    _0RL_cd_6065364cf0fe09fd_60000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_c0000000, "_set_requesterName", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_ModeHandler::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::ModeHandler::_PD_repoId )
    return (::STI_Client_Server::_impl_ModeHandler*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::ModeHandler::_PD_repoId) )
    return (::STI_Client_Server::_impl_ModeHandler*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_ModeHandler::_mostDerivedRepoId()
{
  return ::STI_Client_Server::ModeHandler::_PD_repoId;
}

STI_Client_Server::Parser_ptr STI_Client_Server::Parser_Helper::_nil() {
  return ::STI_Client_Server::Parser::_nil();
}

::CORBA::Boolean STI_Client_Server::Parser_Helper::is_nil(::STI_Client_Server::Parser_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::Parser_Helper::release(::STI_Client_Server::Parser_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::Parser_Helper::marshalObjRef(::STI_Client_Server::Parser_ptr obj, cdrStream& s) {
  ::STI_Client_Server::Parser::_marshalObjRef(obj, s);
}

STI_Client_Server::Parser_ptr STI_Client_Server::Parser_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::Parser::_unmarshalObjRef(s);
}

void STI_Client_Server::Parser_Helper::duplicate(::STI_Client_Server::Parser_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_duplicate(::STI_Client_Server::Parser_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::Parser_ptr
STI_Client_Server::Parser::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Parser _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Parser* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Parser;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::Parser::_PD_repoId = "IDL:STI_Client_Server/Parser:1.0";


STI_Client_Server::_objref_Parser::~_objref_Parser() {
  
}


STI_Client_Server::_objref_Parser::_objref_Parser(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::Parser::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_Parser::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::Parser::_PD_repoId )
    return (::STI_Client_Server::Parser_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::Parser::_PD_repoId) )
    return (::STI_Client_Server::Parser_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_00000000* tcd = (_0RL_cd_6065364cf0fe09fd_00000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->parseFile(tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_Parser::parseFile(const char* filename)
{
  _0RL_cd_6065364cf0fe09fd_00000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_d0000000, "parseFile", 10);
  _call_desc.arg_0 = filename;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_00000000* tcd = (_0RL_cd_6065364cf0fe09fd_00000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->parseString(tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_Parser::parseString(const char* code)
{
  _0RL_cd_6065364cf0fe09fd_00000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_e0000000, "parseString", 12);
  _call_desc.arg_0 = code;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTOverwrittenSeq
class _0RL_cd_6065364cf0fe09fd_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_f0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TOverwrittenSeq_var result;
};

void _0RL_cd_6065364cf0fe09fd_f0000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TOverwrittenSeq&) result >>= _n;

}

void _0RL_cd_6065364cf0fe09fd_f0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TOverwrittenSeq;
  (STI_Client_Server::TOverwrittenSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_f0000000* tcd = (_0RL_cd_6065364cf0fe09fd_f0000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->overwritten();


}

STI_Client_Server::TOverwrittenSeq* STI_Client_Server::_objref_Parser::overwritten()
{
  _0RL_cd_6065364cf0fe09fd_f0000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_01000000, "_get_overwritten", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cSTI__Client__Server_mTOverwrittenSeq
class _0RL_cd_6065364cf0fe09fd_11000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_11000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  STI_Client_Server::TOverwrittenSeq_var arg_0_;
  const STI_Client_Server::TOverwrittenSeq* arg_0;
};

void _0RL_cd_6065364cf0fe09fd_11000000::marshalArguments(cdrStream& _n)
{
  (const STI_Client_Server::TOverwrittenSeq&) *arg_0 >>= _n;

}

void _0RL_cd_6065364cf0fe09fd_11000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI_Client_Server::TOverwrittenSeq;
  (STI_Client_Server::TOverwrittenSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_11000000* tcd = (_0RL_cd_6065364cf0fe09fd_11000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  impl->overwritten(*tcd->arg_0);


}

void STI_Client_Server::_objref_Parser::overwritten(const TOverwrittenSeq& _v)
{
  _0RL_cd_6065364cf0fe09fd_11000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_21000000, "_set_overwritten", 17);
  _call_desc.arg_0 = &(TOverwrittenSeq&) _v;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_80000000* tcd = (_0RL_cd_6065364cf0fe09fd_80000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->lockOnParse();


}

::CORBA::Boolean STI_Client_Server::_objref_Parser::lockOnParse()
{
  _0RL_cd_6065364cf0fe09fd_80000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_31000000, "_get_lockOnParse", 17);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_41000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_20000000* tcd = (_0RL_cd_6065364cf0fe09fd_20000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  impl->lockOnParse(tcd->arg_0);


}

void STI_Client_Server::_objref_Parser::lockOnParse(::CORBA::Boolean _v)
{
  _0RL_cd_6065364cf0fe09fd_20000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_41000000, "_set_lockOnParse", 17);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_40000000* tcd = (_0RL_cd_6065364cf0fe09fd_40000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->outMsg();


}

char* STI_Client_Server::_objref_Parser::outMsg()
{
  _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_51000000, "_get_outMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_61000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_40000000* tcd = (_0RL_cd_6065364cf0fe09fd_40000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->errMsg();


}

char* STI_Client_Server::_objref_Parser::errMsg()
{
  _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_61000000, "_get_errMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_40000000* tcd = (_0RL_cd_6065364cf0fe09fd_40000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->mainFile();


}

char* STI_Client_Server::_objref_Parser::mainFile()
{
  _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_71000000, "_get_mainFile", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTChannelSeq
class _0RL_cd_6065364cf0fe09fd_81000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_81000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TChannelSeq_var result;
};

void _0RL_cd_6065364cf0fe09fd_81000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TChannelSeq&) result >>= _n;

}

void _0RL_cd_6065364cf0fe09fd_81000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TChannelSeq;
  (STI_Client_Server::TChannelSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_81000000* tcd = (_0RL_cd_6065364cf0fe09fd_81000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->channels();


}

STI_Client_Server::TChannelSeq* STI_Client_Server::_objref_Parser::channels()
{
  _0RL_cd_6065364cf0fe09fd_81000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_91000000, "_get_channels", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTStringSeq
class _0RL_cd_6065364cf0fe09fd_a1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_a1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TStringSeq_var result;
};

void _0RL_cd_6065364cf0fe09fd_a1000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TStringSeq&) result >>= _n;

}

void _0RL_cd_6065364cf0fe09fd_a1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TStringSeq;
  (STI_Client_Server::TStringSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_a1000000* tcd = (_0RL_cd_6065364cf0fe09fd_a1000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->files();


}

STI_Client_Server::TStringSeq* STI_Client_Server::_objref_Parser::files()
{
  _0RL_cd_6065364cf0fe09fd_a1000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_b1000000, "_get_files", 11);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTVariableSeq
class _0RL_cd_6065364cf0fe09fd_c1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_c1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TVariableSeq_var result;
};

void _0RL_cd_6065364cf0fe09fd_c1000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TVariableSeq&) result >>= _n;

}

void _0RL_cd_6065364cf0fe09fd_c1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TVariableSeq;
  (STI_Client_Server::TVariableSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_c1000000* tcd = (_0RL_cd_6065364cf0fe09fd_c1000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->variables();


}

STI_Client_Server::TVariableSeq* STI_Client_Server::_objref_Parser::variables()
{
  _0RL_cd_6065364cf0fe09fd_c1000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_d1000000, "_get_variables", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTEventSeq
class _0RL_cd_6065364cf0fe09fd_e1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_e1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TEventSeq_var result;
};

void _0RL_cd_6065364cf0fe09fd_e1000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TEventSeq&) result >>= _n;

}

void _0RL_cd_6065364cf0fe09fd_e1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TEventSeq;
  (STI_Client_Server::TEventSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_f1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_e1000000* tcd = (_0RL_cd_6065364cf0fe09fd_e1000000*)cd;
  STI_Client_Server::_impl_Parser* impl = (STI_Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI_Client_Server::Parser::_PD_repoId);
  tcd->result = impl->events();


}

STI_Client_Server::TEventSeq* STI_Client_Server::_objref_Parser::events()
{
  _0RL_cd_6065364cf0fe09fd_e1000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_f1000000, "_get_events", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_Parser::~_pof_Parser() {}


omniObjRef*
STI_Client_Server::_pof_Parser::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_Parser(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_Parser::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::Parser::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_Parser _the_pof_STI__Client__Server_mParser;

STI_Client_Server::_impl_Parser::~_impl_Parser() {}


::CORBA::Boolean
STI_Client_Server::_impl_Parser::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "parseFile") ) {

    _0RL_cd_6065364cf0fe09fd_00000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_d0000000, "parseFile", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "parseString") ) {

    _0RL_cd_6065364cf0fe09fd_00000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_e0000000, "parseString", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_overwritten") ) {

    _0RL_cd_6065364cf0fe09fd_f0000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_01000000, "_get_overwritten", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_overwritten") ) {

    _0RL_cd_6065364cf0fe09fd_11000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_21000000, "_set_overwritten", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_lockOnParse") ) {

    _0RL_cd_6065364cf0fe09fd_80000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_31000000, "_get_lockOnParse", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_lockOnParse") ) {

    _0RL_cd_6065364cf0fe09fd_20000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_41000000, "_set_lockOnParse", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_outMsg") ) {

    _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_51000000, "_get_outMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_errMsg") ) {

    _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_61000000, "_get_errMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_mainFile") ) {

    _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_71000000, "_get_mainFile", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_channels") ) {

    _0RL_cd_6065364cf0fe09fd_81000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_91000000, "_get_channels", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_files") ) {

    _0RL_cd_6065364cf0fe09fd_a1000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_b1000000, "_get_files", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_variables") ) {

    _0RL_cd_6065364cf0fe09fd_c1000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_d1000000, "_get_variables", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_events") ) {

    _0RL_cd_6065364cf0fe09fd_e1000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_f1000000, "_get_events", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_Parser::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::Parser::_PD_repoId )
    return (::STI_Client_Server::_impl_Parser*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::Parser::_PD_repoId) )
    return (::STI_Client_Server::_impl_Parser*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_Parser::_mostDerivedRepoId()
{
  return ::STI_Client_Server::Parser::_PD_repoId;
}

void
STI_Client_Server::TStatus::operator>>= (cdrStream &_n) const
{
  level >>= _n;
  curTime >>= _n;
  curEvent >>= _n;
  curCycle >>= _n;

}

void
STI_Client_Server::TStatus::operator<<= (cdrStream &_n)
{
  (TStatusLevel&)level <<= _n;
  (::CORBA::Double&)curTime <<= _n;
  (::CORBA::ULong&)curEvent <<= _n;
  (::CORBA::UShort&)curCycle <<= _n;

}

void
STI_Client_Server::TRow::operator>>= (cdrStream &_n) const
{
  (const TStringSeq&) val >>= _n;
  _n.marshalBoolean(done);

}

void
STI_Client_Server::TRow::operator<<= (cdrStream &_n)
{
  (TStringSeq&)val <<= _n;
  done = _n.unmarshalBoolean();

}

STI_Client_Server::ExpSequence_ptr STI_Client_Server::ExpSequence_Helper::_nil() {
  return ::STI_Client_Server::ExpSequence::_nil();
}

::CORBA::Boolean STI_Client_Server::ExpSequence_Helper::is_nil(::STI_Client_Server::ExpSequence_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::ExpSequence_Helper::release(::STI_Client_Server::ExpSequence_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::ExpSequence_Helper::marshalObjRef(::STI_Client_Server::ExpSequence_ptr obj, cdrStream& s) {
  ::STI_Client_Server::ExpSequence::_marshalObjRef(obj, s);
}

STI_Client_Server::ExpSequence_ptr STI_Client_Server::ExpSequence_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::ExpSequence::_unmarshalObjRef(s);
}

void STI_Client_Server::ExpSequence_Helper::duplicate(::STI_Client_Server::ExpSequence_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_duplicate(::STI_Client_Server::ExpSequence_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::ExpSequence_ptr
STI_Client_Server::ExpSequence::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ExpSequence _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ExpSequence* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ExpSequence;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::ExpSequence::_PD_repoId = "IDL:STI_Client_Server/ExpSequence:1.0";


STI_Client_Server::_objref_ExpSequence::~_objref_ExpSequence() {
  
}


STI_Client_Server::_objref_ExpSequence::_objref_ExpSequence(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::ExpSequence::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_ExpSequence::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::ExpSequence::_PD_repoId )
    return (::STI_Client_Server::ExpSequence_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::ExpSequence::_PD_repoId) )
    return (::STI_Client_Server::ExpSequence_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSTI__Client__Server_mTStringSeq
class _0RL_cd_6065364cf0fe09fd_02000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_02000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TStringSeq_var arg_0_;
  const STI_Client_Server::TStringSeq* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_6065364cf0fe09fd_02000000::marshalArguments(cdrStream& _n)
{
  (const STI_Client_Server::TStringSeq&) *arg_0 >>= _n;

}

void _0RL_cd_6065364cf0fe09fd_02000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI_Client_Server::TStringSeq;
  (STI_Client_Server::TStringSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_6065364cf0fe09fd_02000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6065364cf0fe09fd_02000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_02000000* tcd = (_0RL_cd_6065364cf0fe09fd_02000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->appendRow(*tcd->arg_0);


}

::CORBA::Boolean STI_Client_Server::_objref_ExpSequence::appendRow(const TStringSeq& newRow)
{
  _0RL_cd_6065364cf0fe09fd_02000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_12000000, "appendRow", 10);
  _call_desc.arg_0 = &(TStringSeq&) newRow;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cunsigned_plong_i_cunsigned_plong
class _0RL_cd_6065364cf0fe09fd_22000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_22000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::ULong arg_0;
  ::CORBA::ULong arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_6065364cf0fe09fd_22000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_6065364cf0fe09fd_22000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  (::CORBA::ULong&)arg_1 <<= _n;

}

void _0RL_cd_6065364cf0fe09fd_22000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6065364cf0fe09fd_22000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_32000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_22000000* tcd = (_0RL_cd_6065364cf0fe09fd_22000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->moveRow(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean STI_Client_Server::_objref_ExpSequence::moveRow(::CORBA::ULong oldPos, ::CORBA::ULong newPos)
{
  _0RL_cd_6065364cf0fe09fd_22000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_32000000, "moveRow", 8);
  _call_desc.arg_0 = oldPos;
  _call_desc.arg_1 = newPos;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cunsigned_plong_i_cSTI__Client__Server_mTStringSeq
class _0RL_cd_6065364cf0fe09fd_42000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_42000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::ULong arg_0;
  STI_Client_Server::TStringSeq_var arg_1_;
  const STI_Client_Server::TStringSeq* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_6065364cf0fe09fd_42000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const STI_Client_Server::TStringSeq&) *arg_1 >>= _n;

}

void _0RL_cd_6065364cf0fe09fd_42000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  arg_1_ = new STI_Client_Server::TStringSeq;
  (STI_Client_Server::TStringSeq&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_6065364cf0fe09fd_42000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6065364cf0fe09fd_42000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_52000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_42000000* tcd = (_0RL_cd_6065364cf0fe09fd_42000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->editRow(tcd->arg_0, *tcd->arg_1);


}

::CORBA::Boolean STI_Client_Server::_objref_ExpSequence::editRow(::CORBA::ULong pos, const TStringSeq& newRow)
{
  _0RL_cd_6065364cf0fe09fd_42000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_52000000, "editRow", 8);
  _call_desc.arg_0 = pos;
  _call_desc.arg_1 = &(TStringSeq&) newRow;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cunsigned_plong_i_cboolean
class _0RL_cd_6065364cf0fe09fd_62000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_62000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  ::CORBA::ULong arg_0;
  ::CORBA::Boolean arg_1;
};

void _0RL_cd_6065364cf0fe09fd_62000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_6065364cf0fe09fd_62000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  arg_1 = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_72000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_62000000* tcd = (_0RL_cd_6065364cf0fe09fd_62000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  impl->editDone(tcd->arg_0, tcd->arg_1);


}

void STI_Client_Server::_objref_ExpSequence::editDone(::CORBA::ULong pos, ::CORBA::Boolean newDone)
{
  _0RL_cd_6065364cf0fe09fd_62000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_72000000, "editDone", 9);
  _call_desc.arg_0 = pos;
  _call_desc.arg_1 = newDone;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_a1000000* tcd = (_0RL_cd_6065364cf0fe09fd_a1000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->variables();


}

STI_Client_Server::TStringSeq* STI_Client_Server::_objref_ExpSequence::variables()
{
  _0RL_cd_6065364cf0fe09fd_a1000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_82000000, "_get_variables", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTRowSeq
class _0RL_cd_6065364cf0fe09fd_92000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_92000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TRowSeq_var result;
};

void _0RL_cd_6065364cf0fe09fd_92000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TRowSeq&) result >>= _n;

}

void _0RL_cd_6065364cf0fe09fd_92000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Client_Server::TRowSeq;
  (STI_Client_Server::TRowSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_a2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_92000000* tcd = (_0RL_cd_6065364cf0fe09fd_92000000*)cd;
  STI_Client_Server::_impl_ExpSequence* impl = (STI_Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI_Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->experiments();


}

STI_Client_Server::TRowSeq* STI_Client_Server::_objref_ExpSequence::experiments()
{
  _0RL_cd_6065364cf0fe09fd_92000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_a2000000, "_get_experiments", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_ExpSequence::~_pof_ExpSequence() {}


omniObjRef*
STI_Client_Server::_pof_ExpSequence::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_ExpSequence(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_ExpSequence::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::ExpSequence::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_ExpSequence _the_pof_STI__Client__Server_mExpSequence;

STI_Client_Server::_impl_ExpSequence::~_impl_ExpSequence() {}


::CORBA::Boolean
STI_Client_Server::_impl_ExpSequence::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "appendRow") ) {

    _0RL_cd_6065364cf0fe09fd_02000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_12000000, "appendRow", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "moveRow") ) {

    _0RL_cd_6065364cf0fe09fd_22000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_32000000, "moveRow", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "editRow") ) {

    _0RL_cd_6065364cf0fe09fd_42000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_52000000, "editRow", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "editDone") ) {

    _0RL_cd_6065364cf0fe09fd_62000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_72000000, "editDone", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_variables") ) {

    _0RL_cd_6065364cf0fe09fd_a1000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_82000000, "_get_variables", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_experiments") ) {

    _0RL_cd_6065364cf0fe09fd_92000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_a2000000, "_get_experiments", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_ExpSequence::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::ExpSequence::_PD_repoId )
    return (::STI_Client_Server::_impl_ExpSequence*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::ExpSequence::_PD_repoId) )
    return (::STI_Client_Server::_impl_ExpSequence*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_ExpSequence::_mostDerivedRepoId()
{
  return ::STI_Client_Server::ExpSequence::_PD_repoId;
}

STI_Client_Server::Control_ptr STI_Client_Server::Control_Helper::_nil() {
  return ::STI_Client_Server::Control::_nil();
}

::CORBA::Boolean STI_Client_Server::Control_Helper::is_nil(::STI_Client_Server::Control_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Client_Server::Control_Helper::release(::STI_Client_Server::Control_ptr p) {
  ::CORBA::release(p);
}

void STI_Client_Server::Control_Helper::marshalObjRef(::STI_Client_Server::Control_ptr obj, cdrStream& s) {
  ::STI_Client_Server::Control::_marshalObjRef(obj, s);
}

STI_Client_Server::Control_ptr STI_Client_Server::Control_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Client_Server::Control::_unmarshalObjRef(s);
}

void STI_Client_Server::Control_Helper::duplicate(::STI_Client_Server::Control_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Client_Server::Control_ptr
STI_Client_Server::Control::_duplicate(::STI_Client_Server::Control_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Client_Server::Control_ptr
STI_Client_Server::Control::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Client_Server::Control_ptr
STI_Client_Server::Control::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Client_Server::Control_ptr
STI_Client_Server::Control::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Control _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Control* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Control;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Client_Server::Control::_PD_repoId = "IDL:STI_Client_Server/Control:1.0";


STI_Client_Server::_objref_Control::~_objref_Control() {
  
}


STI_Client_Server::_objref_Control::_objref_Control(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Client_Server::Control::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Client_Server::_objref_Control::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Client_Server::Control::_PD_repoId )
    return (::STI_Client_Server::Control_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Client_Server::Control::_PD_repoId) )
    return (::STI_Client_Server::Control_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mTStatus
class _0RL_cd_6065364cf0fe09fd_b2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_b2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::TStatus result;
};

void _0RL_cd_6065364cf0fe09fd_b2000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Client_Server::TStatus&) result >>= _n;

}

void _0RL_cd_6065364cf0fe09fd_b2000000::unmarshalReturnedValues(cdrStream& _n)
{
  (STI_Client_Server::TStatus&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_c2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_b2000000* tcd = (_0RL_cd_6065364cf0fe09fd_b2000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  tcd->result = impl->status();


}

STI_Client_Server::TStatus STI_Client_Server::_objref_Control::status()
{
  _0RL_cd_6065364cf0fe09fd_b2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_c2000000, "status", 7);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_6065364cf0fe09fd_d2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_d2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
    
  
  
};

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_e2000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->reset();


}

void STI_Client_Server::_objref_Control::reset()
{
  _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_e2000000, "reset", 6);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_f2000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->setDirect();


}

void STI_Client_Server::_objref_Control::setDirect()
{
  _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_f2000000, "setDirect", 10);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_03000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->runSingle();


}

void STI_Client_Server::_objref_Control::runSingle()
{
  _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_03000000, "runSingle", 10);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_13000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->runSequence();


}

void STI_Client_Server::_objref_Control::runSequence()
{
  _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_13000000, "runSequence", 12);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_23000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->_cxx_continue();


}

void STI_Client_Server::_objref_Control::_cxx_continue()
{
  _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_23000000, "continue", 9);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_33000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  impl->stop();


}

void STI_Client_Server::_objref_Control::stop()
{
  _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_33000000, "stop", 5);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Client__Server_mExpSequence
class _0RL_cd_6065364cf0fe09fd_43000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6065364cf0fe09fd_43000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Client_Server::ExpSequence_var result;
};

void _0RL_cd_6065364cf0fe09fd_43000000::marshalReturnedValues(cdrStream& _n)
{
  STI_Client_Server::ExpSequence::_marshalObjRef(result,_n);

}

void _0RL_cd_6065364cf0fe09fd_43000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = STI_Client_Server::ExpSequence::_unmarshalObjRef(_n);

}

// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_53000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_43000000* tcd = (_0RL_cd_6065364cf0fe09fd_43000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  tcd->result = impl->expSeq();


}

STI_Client_Server::ExpSequence_ptr STI_Client_Server::_objref_Control::expSeq()
{
  _0RL_cd_6065364cf0fe09fd_43000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_53000000, "_get_expSeq", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_6065364cf0fe09fd_63000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6065364cf0fe09fd_40000000* tcd = (_0RL_cd_6065364cf0fe09fd_40000000*)cd;
  STI_Client_Server::_impl_Control* impl = (STI_Client_Server::_impl_Control*) svnt->_ptrToInterface(STI_Client_Server::Control::_PD_repoId);
  tcd->result = impl->errMsg();


}

char* STI_Client_Server::_objref_Control::errMsg()
{
  _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_63000000, "_get_errMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Client_Server::_pof_Control::~_pof_Control() {}


omniObjRef*
STI_Client_Server::_pof_Control::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Client_Server::_objref_Control(ior, id);
}


::CORBA::Boolean
STI_Client_Server::_pof_Control::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Client_Server::Control::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Client_Server::_pof_Control _the_pof_STI__Client__Server_mControl;

STI_Client_Server::_impl_Control::~_impl_Control() {}


::CORBA::Boolean
STI_Client_Server::_impl_Control::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "status") ) {

    _0RL_cd_6065364cf0fe09fd_b2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_c2000000, "status", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "reset") ) {

    _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_e2000000, "reset", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setDirect") ) {

    _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_f2000000, "setDirect", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "runSingle") ) {

    _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_03000000, "runSingle", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "runSequence") ) {

    _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_13000000, "runSequence", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "continue") ) {

    _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_23000000, "continue", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stop") ) {

    _0RL_cd_6065364cf0fe09fd_d2000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_33000000, "stop", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_expSeq") ) {

    _0RL_cd_6065364cf0fe09fd_43000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_53000000, "_get_expSeq", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_errMsg") ) {

    _0RL_cd_6065364cf0fe09fd_40000000 _call_desc(_0RL_lcfn_6065364cf0fe09fd_63000000, "_get_errMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Client_Server::_impl_Control::_ptrToInterface(const char* id)
{
  if( id == ::STI_Client_Server::Control::_PD_repoId )
    return (::STI_Client_Server::_impl_Control*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Client_Server::Control::_PD_repoId) )
    return (::STI_Client_Server::_impl_Control*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Client_Server::_impl_Control::_mostDerivedRepoId()
{
  return ::STI_Client_Server::Control::_PD_repoId;
}

POA_STI_Client_Server::ModeHandler::~ModeHandler() {}

POA_STI_Client_Server::Parser::~Parser() {}

POA_STI_Client_Server::ExpSequence::~ExpSequence() {}

POA_STI_Client_Server::Control::~Control() {}

// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "client_clnt.h"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_STI__Client__Server_mTOverwritten[] = {
  {"name", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"value", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_STI__Client__Server_mTOverwritten
#  undef _0RL_tc_STI__Client__Server_mTOverwritten
#endif
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTOverwritten = CORBA::TypeCode::PR_struct_tc("IDL:STI_Client_Server/TOverwritten:1.0", "TOverwritten", _0RL_structmember_STI__Client__Server_mTOverwritten, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TOverwritten = _0RL_tc_STI__Client__Server_mTOverwritten;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TOverwritten = _0RL_tc_STI__Client__Server_mTOverwritten;
#endif


static CORBA::PR_structMember _0RL_structmember_STI__Client__Server_mTBoard[] = {
  {"boardType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"address", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"moduleType", CORBA::TypeCode::PR_ushort_tc()}
};

#ifdef _0RL_tc_STI__Client__Server_mTBoard
#  undef _0RL_tc_STI__Client__Server_mTBoard
#endif
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTBoard = CORBA::TypeCode::PR_struct_tc("IDL:STI_Client_Server/TBoard:1.0", "TBoard", _0RL_structmember_STI__Client__Server_mTBoard, 3, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TBoard = _0RL_tc_STI__Client__Server_mTBoard;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TBoard = _0RL_tc_STI__Client__Server_mTBoard;
#endif



static CORBA::PR_structMember _0RL_structmember_STI__Client__Server_mTChannel[] = {
  {"board", _0RL_tc_STI__Client__Server_mTBoard},
  {"channel", CORBA::TypeCode::PR_ushort_tc()}
};

#ifdef _0RL_tc_STI__Client__Server_mTChannel
#  undef _0RL_tc_STI__Client__Server_mTChannel
#endif
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTChannel = CORBA::TypeCode::PR_struct_tc("IDL:STI_Client_Server/TChannel:1.0", "TChannel", _0RL_structmember_STI__Client__Server_mTChannel, 2, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TChannel = _0RL_tc_STI__Client__Server_mTChannel;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TChannel = _0RL_tc_STI__Client__Server_mTChannel;
#endif


static const char* _0RL_enumMember_STI__Client__Server_mTType[] = { "TypeNumber", "TypeString", "TypeChannel", "TypeObject" };
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTType = CORBA::TypeCode::PR_enum_tc("IDL:STI_Client_Server/TType:1.0", "TType", _0RL_enumMember_STI__Client__Server_mTType, 4, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TType = _0RL_tc_STI__Client__Server_mTType;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TType = _0RL_tc_STI__Client__Server_mTType;
#endif

static CORBA::PR_unionMember _0RL_unionMember_STI__Client__Server_mTVarMixed[] = {
  {"number", CORBA::TypeCode::PR_double_tc(), STI_Client_Server::TypeNumber},
  {"stringVal", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), STI_Client_Server::TypeString},
  {"channel", CORBA::TypeCode::PR_ushort_tc(), STI_Client_Server::TypeChannel},
  {"objectVal", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), STI_Client_Server::TypeObject}
};
#ifdef _0RL_tc_STI__Client__Server_mTVarMixed
#  undef _0RL_tc_STI__Client__Server_mTVarMixed
#endif
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTVarMixed = CORBA::TypeCode::PR_union_tc("IDL:STI_Client_Server/TVarMixed:1.0", "TVarMixed", _0RL_tc_STI__Client__Server_mTType, _0RL_unionMember_STI__Client__Server_mTVarMixed, 4, -1, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TVarMixed = _0RL_tc_STI__Client__Server_mTVarMixed;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TVarMixed = _0RL_tc_STI__Client__Server_mTVarMixed;
#endif


static CORBA::PR_structMember _0RL_structmember_STI__Client__Server_mTPosition[] = {
  {"file", CORBA::TypeCode::PR_ushort_tc()},
  {"line", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_STI__Client__Server_mTPosition
#  undef _0RL_tc_STI__Client__Server_mTPosition
#endif
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTPosition = CORBA::TypeCode::PR_struct_tc("IDL:STI_Client_Server/TPosition:1.0", "TPosition", _0RL_structmember_STI__Client__Server_mTPosition, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TPosition = _0RL_tc_STI__Client__Server_mTPosition;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TPosition = _0RL_tc_STI__Client__Server_mTPosition;
#endif



static CORBA::PR_structMember _0RL_structmember_STI__Client__Server_mTVariable[] = {
  {"name", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"value", _0RL_tc_STI__Client__Server_mTVarMixed},
  {"pos", _0RL_tc_STI__Client__Server_mTPosition}
};

#ifdef _0RL_tc_STI__Client__Server_mTVariable
#  undef _0RL_tc_STI__Client__Server_mTVariable
#endif
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTVariable = CORBA::TypeCode::PR_struct_tc("IDL:STI_Client_Server/TVariable:1.0", "TVariable", _0RL_structmember_STI__Client__Server_mTVariable, 3, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TVariable = _0RL_tc_STI__Client__Server_mTVariable;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TVariable = _0RL_tc_STI__Client__Server_mTVariable;
#endif


static CORBA::PR_structMember _0RL_structmember_STI__Client__Server_mTDDS[] = {
  {"freq", CORBA::TypeCode::PR_double_tc()},
  {"phase", CORBA::TypeCode::PR_double_tc()},
  {"ampl", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_STI__Client__Server_mTDDS
#  undef _0RL_tc_STI__Client__Server_mTDDS
#endif
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTDDS = CORBA::TypeCode::PR_struct_tc("IDL:STI_Client_Server/TDDS:1.0", "TDDS", _0RL_structmember_STI__Client__Server_mTDDS, 3, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TDDS = _0RL_tc_STI__Client__Server_mTDDS;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TDDS = _0RL_tc_STI__Client__Server_mTDDS;
#endif


static const char* _0RL_enumMember_STI__Client__Server_mTValue[] = { "ValueNumber", "ValueString", "ValueDDSTriplet" };
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTValue = CORBA::TypeCode::PR_enum_tc("IDL:STI_Client_Server/TValue:1.0", "TValue", _0RL_enumMember_STI__Client__Server_mTValue, 3, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TValue = _0RL_tc_STI__Client__Server_mTValue;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TValue = _0RL_tc_STI__Client__Server_mTValue;
#endif


static CORBA::PR_unionMember _0RL_unionMember_STI__Client__Server_mTValMixed[] = {
  {"number", CORBA::TypeCode::PR_double_tc(), STI_Client_Server::ValueNumber},
  {"stringVal", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), STI_Client_Server::ValueString},
  {"triplet", _0RL_tc_STI__Client__Server_mTDDS, STI_Client_Server::ValueDDSTriplet}
};
#ifdef _0RL_tc_STI__Client__Server_mTValMixed
#  undef _0RL_tc_STI__Client__Server_mTValMixed
#endif
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTValMixed = CORBA::TypeCode::PR_union_tc("IDL:STI_Client_Server/TValMixed:1.0", "TValMixed", _0RL_tc_STI__Client__Server_mTValue, _0RL_unionMember_STI__Client__Server_mTValMixed, 3, -1, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TValMixed = _0RL_tc_STI__Client__Server_mTValMixed;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TValMixed = _0RL_tc_STI__Client__Server_mTValMixed;
#endif



static CORBA::PR_structMember _0RL_structmember_STI__Client__Server_mTEvent[] = {
  {"channel", CORBA::TypeCode::PR_ushort_tc()},
  {"time", CORBA::TypeCode::PR_double_tc()},
  {"value", _0RL_tc_STI__Client__Server_mTValMixed},
  {"pos", _0RL_tc_STI__Client__Server_mTPosition}
};

#ifdef _0RL_tc_STI__Client__Server_mTEvent
#  undef _0RL_tc_STI__Client__Server_mTEvent
#endif
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTEvent = CORBA::TypeCode::PR_struct_tc("IDL:STI_Client_Server/TEvent:1.0", "TEvent", _0RL_structmember_STI__Client__Server_mTEvent, 4, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TEvent = _0RL_tc_STI__Client__Server_mTEvent;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TEvent = _0RL_tc_STI__Client__Server_mTEvent;
#endif


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_ModeHandler = CORBA::TypeCode::PR_interface_tc("IDL:STI_Client_Server/ModeHandler:1.0", "ModeHandler", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_ModeHandler = CORBA::TypeCode::PR_interface_tc("IDL:STI_Client_Server/ModeHandler:1.0", "ModeHandler", &_0RL_tcTrack);
#endif





static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTOverwrittenSeq = CORBA::TypeCode::PR_alias_tc("IDL:STI_Client_Server/TOverwrittenSeq:1.0", "TOverwrittenSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_STI__Client__Server_mTOverwritten, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TOverwrittenSeq = _0RL_tc_STI__Client__Server_mTOverwrittenSeq;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TOverwrittenSeq = _0RL_tc_STI__Client__Server_mTOverwrittenSeq;
#endif









static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTChannelSeq = CORBA::TypeCode::PR_alias_tc("IDL:STI_Client_Server/TChannelSeq:1.0", "TChannelSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_STI__Client__Server_mTChannel, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TChannelSeq = _0RL_tc_STI__Client__Server_mTChannelSeq;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TChannelSeq = _0RL_tc_STI__Client__Server_mTChannelSeq;
#endif

static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTStringSeq = CORBA::TypeCode::PR_alias_tc("IDL:STI_Client_Server/TStringSeq:1.0", "TStringSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TStringSeq = _0RL_tc_STI__Client__Server_mTStringSeq;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TStringSeq = _0RL_tc_STI__Client__Server_mTStringSeq;
#endif









static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTVariableSeq = CORBA::TypeCode::PR_alias_tc("IDL:STI_Client_Server/TVariableSeq:1.0", "TVariableSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_STI__Client__Server_mTVariable, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TVariableSeq = _0RL_tc_STI__Client__Server_mTVariableSeq;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TVariableSeq = _0RL_tc_STI__Client__Server_mTVariableSeq;
#endif









static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTEventSeq = CORBA::TypeCode::PR_alias_tc("IDL:STI_Client_Server/TEventSeq:1.0", "TEventSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_STI__Client__Server_mTEvent, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TEventSeq = _0RL_tc_STI__Client__Server_mTEventSeq;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TEventSeq = _0RL_tc_STI__Client__Server_mTEventSeq;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_Parser = CORBA::TypeCode::PR_interface_tc("IDL:STI_Client_Server/Parser:1.0", "Parser", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_Parser = CORBA::TypeCode::PR_interface_tc("IDL:STI_Client_Server/Parser:1.0", "Parser", &_0RL_tcTrack);
#endif

static const char* _0RL_enumMember_STI__Client__Server_mTStatusLevel[] = { "LevelStopped", "LevelRunning", "LevelPaused", "LevelError" };
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTStatusLevel = CORBA::TypeCode::PR_enum_tc("IDL:STI_Client_Server/TStatusLevel:1.0", "TStatusLevel", _0RL_enumMember_STI__Client__Server_mTStatusLevel, 4, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TStatusLevel = _0RL_tc_STI__Client__Server_mTStatusLevel;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TStatusLevel = _0RL_tc_STI__Client__Server_mTStatusLevel;
#endif

static CORBA::PR_structMember _0RL_structmember_STI__Client__Server_mTStatus[] = {
  {"level", _0RL_tc_STI__Client__Server_mTStatusLevel},
  {"curTime", CORBA::TypeCode::PR_double_tc()},
  {"curEvent", CORBA::TypeCode::PR_ulong_tc()},
  {"curCycle", CORBA::TypeCode::PR_ushort_tc()}
};

#ifdef _0RL_tc_STI__Client__Server_mTStatus
#  undef _0RL_tc_STI__Client__Server_mTStatus
#endif
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTStatus = CORBA::TypeCode::PR_struct_tc("IDL:STI_Client_Server/TStatus:1.0", "TStatus", _0RL_structmember_STI__Client__Server_mTStatus, 4, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TStatus = _0RL_tc_STI__Client__Server_mTStatus;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TStatus = _0RL_tc_STI__Client__Server_mTStatus;
#endif


static CORBA::PR_structMember _0RL_structmember_STI__Client__Server_mTRow[] = {
  {"val", _0RL_tc_STI__Client__Server_mTStringSeq},
  {"done", CORBA::TypeCode::PR_boolean_tc()}
};

#ifdef _0RL_tc_STI__Client__Server_mTRow
#  undef _0RL_tc_STI__Client__Server_mTRow
#endif
static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTRow = CORBA::TypeCode::PR_struct_tc("IDL:STI_Client_Server/TRow:1.0", "TRow", _0RL_structmember_STI__Client__Server_mTRow, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TRow = _0RL_tc_STI__Client__Server_mTRow;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TRow = _0RL_tc_STI__Client__Server_mTRow;
#endif






static CORBA::TypeCode_ptr _0RL_tc_STI__Client__Server_mTRowSeq = CORBA::TypeCode::PR_alias_tc("IDL:STI_Client_Server/TRowSeq:1.0", "TRowSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_STI__Client__Server_mTRow, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_TRowSeq = _0RL_tc_STI__Client__Server_mTRowSeq;
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_TRowSeq = _0RL_tc_STI__Client__Server_mTRowSeq;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_ExpSequence = CORBA::TypeCode::PR_interface_tc("IDL:STI_Client_Server/ExpSequence:1.0", "ExpSequence", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_ExpSequence = CORBA::TypeCode::PR_interface_tc("IDL:STI_Client_Server/ExpSequence:1.0", "ExpSequence", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace STI_Client_Server { 
  const ::CORBA::TypeCode_ptr _tc_Control = CORBA::TypeCode::PR_interface_tc("IDL:STI_Client_Server/Control:1.0", "Control", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr STI_Client_Server::_tc_Control = CORBA::TypeCode::PR_interface_tc("IDL:STI_Client_Server/Control:1.0", "Control", &_0RL_tcTrack);
#endif

static void _0RL_STI__Client__Server_mTOverwritten_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TOverwritten* _p = (STI_Client_Server::TOverwritten*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTOverwritten_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TOverwritten* _p = new STI_Client_Server::TOverwritten;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTOverwritten_destructor_fn(void* _v)
{
  STI_Client_Server::TOverwritten* _p = (STI_Client_Server::TOverwritten*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TOverwritten& _s)
{
  STI_Client_Server::TOverwritten* _p = new STI_Client_Server::TOverwritten(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTOverwritten,
               _0RL_STI__Client__Server_mTOverwritten_marshal_fn,
               _0RL_STI__Client__Server_mTOverwritten_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TOverwritten* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTOverwritten,
               _0RL_STI__Client__Server_mTOverwritten_marshal_fn,
               _0RL_STI__Client__Server_mTOverwritten_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TOverwritten*& _sp)
{
  return _a >>= (const STI_Client_Server::TOverwritten*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TOverwritten*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTOverwritten,
                    _0RL_STI__Client__Server_mTOverwritten_unmarshal_fn,
                    _0RL_STI__Client__Server_mTOverwritten_marshal_fn,
                    _0RL_STI__Client__Server_mTOverwritten_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TOverwritten*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTBoard_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TBoard* _p = (STI_Client_Server::TBoard*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTBoard_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TBoard* _p = new STI_Client_Server::TBoard;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTBoard_destructor_fn(void* _v)
{
  STI_Client_Server::TBoard* _p = (STI_Client_Server::TBoard*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TBoard& _s)
{
  STI_Client_Server::TBoard* _p = new STI_Client_Server::TBoard(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTBoard,
               _0RL_STI__Client__Server_mTBoard_marshal_fn,
               _0RL_STI__Client__Server_mTBoard_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TBoard* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTBoard,
               _0RL_STI__Client__Server_mTBoard_marshal_fn,
               _0RL_STI__Client__Server_mTBoard_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TBoard*& _sp)
{
  return _a >>= (const STI_Client_Server::TBoard*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TBoard*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTBoard,
                    _0RL_STI__Client__Server_mTBoard_unmarshal_fn,
                    _0RL_STI__Client__Server_mTBoard_marshal_fn,
                    _0RL_STI__Client__Server_mTBoard_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TBoard*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTChannel_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TChannel* _p = (STI_Client_Server::TChannel*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTChannel_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TChannel* _p = new STI_Client_Server::TChannel;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTChannel_destructor_fn(void* _v)
{
  STI_Client_Server::TChannel* _p = (STI_Client_Server::TChannel*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TChannel& _s)
{
  STI_Client_Server::TChannel* _p = new STI_Client_Server::TChannel(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTChannel,
               _0RL_STI__Client__Server_mTChannel_marshal_fn,
               _0RL_STI__Client__Server_mTChannel_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TChannel* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTChannel,
               _0RL_STI__Client__Server_mTChannel_marshal_fn,
               _0RL_STI__Client__Server_mTChannel_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TChannel*& _sp)
{
  return _a >>= (const STI_Client_Server::TChannel*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TChannel*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTChannel,
                    _0RL_STI__Client__Server_mTChannel_unmarshal_fn,
                    _0RL_STI__Client__Server_mTChannel_marshal_fn,
                    _0RL_STI__Client__Server_mTChannel_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TChannel*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTType_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TType* _p = (STI_Client_Server::TType*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTType_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TType* _p = (STI_Client_Server::TType*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, STI_Client_Server::TType _s)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTType,
               _0RL_STI__Client__Server_mTType_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TType& _s)
{
  return _a.PR_extract(_0RL_tc_STI__Client__Server_mTType,
                       _0RL_STI__Client__Server_mTType_unmarshal_fn,
                       &_s);
}

static void _0RL_STI__Client__Server_mTVarMixed_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TVarMixed* _p = (STI_Client_Server::TVarMixed*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTVarMixed_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TVarMixed* _p = new STI_Client_Server::TVarMixed;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTVarMixed_destructor_fn(void* _v)
{
  STI_Client_Server::TVarMixed* _p = (STI_Client_Server::TVarMixed*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TVarMixed& _s)
{
  STI_Client_Server::TVarMixed* _p = new STI_Client_Server::TVarMixed(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTVarMixed,
               _0RL_STI__Client__Server_mTVarMixed_marshal_fn,
               _0RL_STI__Client__Server_mTVarMixed_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TVarMixed* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTVarMixed,
               _0RL_STI__Client__Server_mTVarMixed_marshal_fn,
               _0RL_STI__Client__Server_mTVarMixed_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TVarMixed*& _sp)
{
  return _a >>= (const STI_Client_Server::TVarMixed*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TVarMixed*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTVarMixed,
                    _0RL_STI__Client__Server_mTVarMixed_unmarshal_fn,
                    _0RL_STI__Client__Server_mTVarMixed_marshal_fn,
                    _0RL_STI__Client__Server_mTVarMixed_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TVarMixed*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTPosition_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TPosition* _p = (STI_Client_Server::TPosition*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTPosition_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TPosition* _p = new STI_Client_Server::TPosition;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTPosition_destructor_fn(void* _v)
{
  STI_Client_Server::TPosition* _p = (STI_Client_Server::TPosition*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TPosition& _s)
{
  STI_Client_Server::TPosition* _p = new STI_Client_Server::TPosition(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTPosition,
               _0RL_STI__Client__Server_mTPosition_marshal_fn,
               _0RL_STI__Client__Server_mTPosition_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TPosition* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTPosition,
               _0RL_STI__Client__Server_mTPosition_marshal_fn,
               _0RL_STI__Client__Server_mTPosition_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TPosition*& _sp)
{
  return _a >>= (const STI_Client_Server::TPosition*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TPosition*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTPosition,
                    _0RL_STI__Client__Server_mTPosition_unmarshal_fn,
                    _0RL_STI__Client__Server_mTPosition_marshal_fn,
                    _0RL_STI__Client__Server_mTPosition_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TPosition*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTVariable_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TVariable* _p = (STI_Client_Server::TVariable*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTVariable_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TVariable* _p = new STI_Client_Server::TVariable;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTVariable_destructor_fn(void* _v)
{
  STI_Client_Server::TVariable* _p = (STI_Client_Server::TVariable*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TVariable& _s)
{
  STI_Client_Server::TVariable* _p = new STI_Client_Server::TVariable(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTVariable,
               _0RL_STI__Client__Server_mTVariable_marshal_fn,
               _0RL_STI__Client__Server_mTVariable_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TVariable* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTVariable,
               _0RL_STI__Client__Server_mTVariable_marshal_fn,
               _0RL_STI__Client__Server_mTVariable_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TVariable*& _sp)
{
  return _a >>= (const STI_Client_Server::TVariable*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TVariable*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTVariable,
                    _0RL_STI__Client__Server_mTVariable_unmarshal_fn,
                    _0RL_STI__Client__Server_mTVariable_marshal_fn,
                    _0RL_STI__Client__Server_mTVariable_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TVariable*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTDDS_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TDDS* _p = (STI_Client_Server::TDDS*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTDDS_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TDDS* _p = new STI_Client_Server::TDDS;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTDDS_destructor_fn(void* _v)
{
  STI_Client_Server::TDDS* _p = (STI_Client_Server::TDDS*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TDDS& _s)
{
  STI_Client_Server::TDDS* _p = new STI_Client_Server::TDDS(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTDDS,
               _0RL_STI__Client__Server_mTDDS_marshal_fn,
               _0RL_STI__Client__Server_mTDDS_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TDDS* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTDDS,
               _0RL_STI__Client__Server_mTDDS_marshal_fn,
               _0RL_STI__Client__Server_mTDDS_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TDDS*& _sp)
{
  return _a >>= (const STI_Client_Server::TDDS*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TDDS*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTDDS,
                    _0RL_STI__Client__Server_mTDDS_unmarshal_fn,
                    _0RL_STI__Client__Server_mTDDS_marshal_fn,
                    _0RL_STI__Client__Server_mTDDS_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TDDS*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTValue_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TValue* _p = (STI_Client_Server::TValue*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTValue_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TValue* _p = (STI_Client_Server::TValue*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, STI_Client_Server::TValue _s)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTValue,
               _0RL_STI__Client__Server_mTValue_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TValue& _s)
{
  return _a.PR_extract(_0RL_tc_STI__Client__Server_mTValue,
                       _0RL_STI__Client__Server_mTValue_unmarshal_fn,
                       &_s);
}

static void _0RL_STI__Client__Server_mTValMixed_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TValMixed* _p = (STI_Client_Server::TValMixed*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTValMixed_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TValMixed* _p = new STI_Client_Server::TValMixed;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTValMixed_destructor_fn(void* _v)
{
  STI_Client_Server::TValMixed* _p = (STI_Client_Server::TValMixed*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TValMixed& _s)
{
  STI_Client_Server::TValMixed* _p = new STI_Client_Server::TValMixed(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTValMixed,
               _0RL_STI__Client__Server_mTValMixed_marshal_fn,
               _0RL_STI__Client__Server_mTValMixed_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TValMixed* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTValMixed,
               _0RL_STI__Client__Server_mTValMixed_marshal_fn,
               _0RL_STI__Client__Server_mTValMixed_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TValMixed*& _sp)
{
  return _a >>= (const STI_Client_Server::TValMixed*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TValMixed*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTValMixed,
                    _0RL_STI__Client__Server_mTValMixed_unmarshal_fn,
                    _0RL_STI__Client__Server_mTValMixed_marshal_fn,
                    _0RL_STI__Client__Server_mTValMixed_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TValMixed*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTEvent_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TEvent* _p = (STI_Client_Server::TEvent*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTEvent_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TEvent* _p = new STI_Client_Server::TEvent;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTEvent_destructor_fn(void* _v)
{
  STI_Client_Server::TEvent* _p = (STI_Client_Server::TEvent*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TEvent& _s)
{
  STI_Client_Server::TEvent* _p = new STI_Client_Server::TEvent(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTEvent,
               _0RL_STI__Client__Server_mTEvent_marshal_fn,
               _0RL_STI__Client__Server_mTEvent_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TEvent* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTEvent,
               _0RL_STI__Client__Server_mTEvent_marshal_fn,
               _0RL_STI__Client__Server_mTEvent_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TEvent*& _sp)
{
  return _a >>= (const STI_Client_Server::TEvent*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TEvent*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTEvent,
                    _0RL_STI__Client__Server_mTEvent_unmarshal_fn,
                    _0RL_STI__Client__Server_mTEvent_marshal_fn,
                    _0RL_STI__Client__Server_mTEvent_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TEvent*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mModeHandler_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_STI__Client__Server_mModeHandler_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(STI_Client_Server::ModeHandler::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_STI__Client__Server_mModeHandler_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, STI_Client_Server::ModeHandler_ptr _o)
{
  STI_Client_Server::ModeHandler_ptr _no = STI_Client_Server::ModeHandler::_duplicate(_o);
  _a.PR_insert(STI_Client_Server::_tc_ModeHandler,
               _0RL_STI__Client__Server_mModeHandler_marshal_fn,
               _0RL_STI__Client__Server_mModeHandler_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::ModeHandler_ptr* _op)
{
  _a.PR_insert(STI_Client_Server::_tc_ModeHandler,
               _0RL_STI__Client__Server_mModeHandler_marshal_fn,
               _0RL_STI__Client__Server_mModeHandler_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = STI_Client_Server::ModeHandler::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::ModeHandler_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(STI_Client_Server::_tc_ModeHandler,
                    _0RL_STI__Client__Server_mModeHandler_unmarshal_fn,
                    _0RL_STI__Client__Server_mModeHandler_marshal_fn,
                    _0RL_STI__Client__Server_mModeHandler_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (STI_Client_Server::ModeHandler_ptr)_r->_ptrToObjRef(STI_Client_Server::ModeHandler::_PD_repoId);
    else
      _o = STI_Client_Server::ModeHandler::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTOverwrittenSeq_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TOverwrittenSeq* _p = (STI_Client_Server::TOverwrittenSeq*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTOverwrittenSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TOverwrittenSeq* _p = new STI_Client_Server::TOverwrittenSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTOverwrittenSeq_destructor_fn(void* _v)
{
  STI_Client_Server::TOverwrittenSeq* _p = (STI_Client_Server::TOverwrittenSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TOverwrittenSeq& _s)
{
  STI_Client_Server::TOverwrittenSeq* _p = new STI_Client_Server::TOverwrittenSeq(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTOverwrittenSeq,
               _0RL_STI__Client__Server_mTOverwrittenSeq_marshal_fn,
               _0RL_STI__Client__Server_mTOverwrittenSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TOverwrittenSeq* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTOverwrittenSeq,
               _0RL_STI__Client__Server_mTOverwrittenSeq_marshal_fn,
               _0RL_STI__Client__Server_mTOverwrittenSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TOverwrittenSeq*& _sp)
{
  return _a >>= (const STI_Client_Server::TOverwrittenSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TOverwrittenSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTOverwrittenSeq,
                    _0RL_STI__Client__Server_mTOverwrittenSeq_unmarshal_fn,
                    _0RL_STI__Client__Server_mTOverwrittenSeq_marshal_fn,
                    _0RL_STI__Client__Server_mTOverwrittenSeq_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TOverwrittenSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTChannelSeq_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TChannelSeq* _p = (STI_Client_Server::TChannelSeq*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTChannelSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TChannelSeq* _p = new STI_Client_Server::TChannelSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTChannelSeq_destructor_fn(void* _v)
{
  STI_Client_Server::TChannelSeq* _p = (STI_Client_Server::TChannelSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TChannelSeq& _s)
{
  STI_Client_Server::TChannelSeq* _p = new STI_Client_Server::TChannelSeq(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTChannelSeq,
               _0RL_STI__Client__Server_mTChannelSeq_marshal_fn,
               _0RL_STI__Client__Server_mTChannelSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TChannelSeq* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTChannelSeq,
               _0RL_STI__Client__Server_mTChannelSeq_marshal_fn,
               _0RL_STI__Client__Server_mTChannelSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TChannelSeq*& _sp)
{
  return _a >>= (const STI_Client_Server::TChannelSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TChannelSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTChannelSeq,
                    _0RL_STI__Client__Server_mTChannelSeq_unmarshal_fn,
                    _0RL_STI__Client__Server_mTChannelSeq_marshal_fn,
                    _0RL_STI__Client__Server_mTChannelSeq_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TChannelSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTStringSeq_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TStringSeq* _p = (STI_Client_Server::TStringSeq*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTStringSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TStringSeq* _p = new STI_Client_Server::TStringSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTStringSeq_destructor_fn(void* _v)
{
  STI_Client_Server::TStringSeq* _p = (STI_Client_Server::TStringSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TStringSeq& _s)
{
  STI_Client_Server::TStringSeq* _p = new STI_Client_Server::TStringSeq(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTStringSeq,
               _0RL_STI__Client__Server_mTStringSeq_marshal_fn,
               _0RL_STI__Client__Server_mTStringSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TStringSeq* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTStringSeq,
               _0RL_STI__Client__Server_mTStringSeq_marshal_fn,
               _0RL_STI__Client__Server_mTStringSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TStringSeq*& _sp)
{
  return _a >>= (const STI_Client_Server::TStringSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TStringSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTStringSeq,
                    _0RL_STI__Client__Server_mTStringSeq_unmarshal_fn,
                    _0RL_STI__Client__Server_mTStringSeq_marshal_fn,
                    _0RL_STI__Client__Server_mTStringSeq_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TStringSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTVariableSeq_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TVariableSeq* _p = (STI_Client_Server::TVariableSeq*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTVariableSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TVariableSeq* _p = new STI_Client_Server::TVariableSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTVariableSeq_destructor_fn(void* _v)
{
  STI_Client_Server::TVariableSeq* _p = (STI_Client_Server::TVariableSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TVariableSeq& _s)
{
  STI_Client_Server::TVariableSeq* _p = new STI_Client_Server::TVariableSeq(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTVariableSeq,
               _0RL_STI__Client__Server_mTVariableSeq_marshal_fn,
               _0RL_STI__Client__Server_mTVariableSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TVariableSeq* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTVariableSeq,
               _0RL_STI__Client__Server_mTVariableSeq_marshal_fn,
               _0RL_STI__Client__Server_mTVariableSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TVariableSeq*& _sp)
{
  return _a >>= (const STI_Client_Server::TVariableSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TVariableSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTVariableSeq,
                    _0RL_STI__Client__Server_mTVariableSeq_unmarshal_fn,
                    _0RL_STI__Client__Server_mTVariableSeq_marshal_fn,
                    _0RL_STI__Client__Server_mTVariableSeq_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TVariableSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTEventSeq_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TEventSeq* _p = (STI_Client_Server::TEventSeq*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTEventSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TEventSeq* _p = new STI_Client_Server::TEventSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTEventSeq_destructor_fn(void* _v)
{
  STI_Client_Server::TEventSeq* _p = (STI_Client_Server::TEventSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TEventSeq& _s)
{
  STI_Client_Server::TEventSeq* _p = new STI_Client_Server::TEventSeq(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTEventSeq,
               _0RL_STI__Client__Server_mTEventSeq_marshal_fn,
               _0RL_STI__Client__Server_mTEventSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TEventSeq* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTEventSeq,
               _0RL_STI__Client__Server_mTEventSeq_marshal_fn,
               _0RL_STI__Client__Server_mTEventSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TEventSeq*& _sp)
{
  return _a >>= (const STI_Client_Server::TEventSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TEventSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTEventSeq,
                    _0RL_STI__Client__Server_mTEventSeq_unmarshal_fn,
                    _0RL_STI__Client__Server_mTEventSeq_marshal_fn,
                    _0RL_STI__Client__Server_mTEventSeq_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TEventSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mParser_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_STI__Client__Server_mParser_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(STI_Client_Server::Parser::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_STI__Client__Server_mParser_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, STI_Client_Server::Parser_ptr _o)
{
  STI_Client_Server::Parser_ptr _no = STI_Client_Server::Parser::_duplicate(_o);
  _a.PR_insert(STI_Client_Server::_tc_Parser,
               _0RL_STI__Client__Server_mParser_marshal_fn,
               _0RL_STI__Client__Server_mParser_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::Parser_ptr* _op)
{
  _a.PR_insert(STI_Client_Server::_tc_Parser,
               _0RL_STI__Client__Server_mParser_marshal_fn,
               _0RL_STI__Client__Server_mParser_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = STI_Client_Server::Parser::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::Parser_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(STI_Client_Server::_tc_Parser,
                    _0RL_STI__Client__Server_mParser_unmarshal_fn,
                    _0RL_STI__Client__Server_mParser_marshal_fn,
                    _0RL_STI__Client__Server_mParser_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (STI_Client_Server::Parser_ptr)_r->_ptrToObjRef(STI_Client_Server::Parser::_PD_repoId);
    else
      _o = STI_Client_Server::Parser::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTStatusLevel_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TStatusLevel* _p = (STI_Client_Server::TStatusLevel*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTStatusLevel_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TStatusLevel* _p = (STI_Client_Server::TStatusLevel*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, STI_Client_Server::TStatusLevel _s)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTStatusLevel,
               _0RL_STI__Client__Server_mTStatusLevel_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TStatusLevel& _s)
{
  return _a.PR_extract(_0RL_tc_STI__Client__Server_mTStatusLevel,
                       _0RL_STI__Client__Server_mTStatusLevel_unmarshal_fn,
                       &_s);
}

static void _0RL_STI__Client__Server_mTStatus_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TStatus* _p = (STI_Client_Server::TStatus*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTStatus_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TStatus* _p = new STI_Client_Server::TStatus;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTStatus_destructor_fn(void* _v)
{
  STI_Client_Server::TStatus* _p = (STI_Client_Server::TStatus*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TStatus& _s)
{
  STI_Client_Server::TStatus* _p = new STI_Client_Server::TStatus(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTStatus,
               _0RL_STI__Client__Server_mTStatus_marshal_fn,
               _0RL_STI__Client__Server_mTStatus_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TStatus* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTStatus,
               _0RL_STI__Client__Server_mTStatus_marshal_fn,
               _0RL_STI__Client__Server_mTStatus_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TStatus*& _sp)
{
  return _a >>= (const STI_Client_Server::TStatus*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TStatus*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTStatus,
                    _0RL_STI__Client__Server_mTStatus_unmarshal_fn,
                    _0RL_STI__Client__Server_mTStatus_marshal_fn,
                    _0RL_STI__Client__Server_mTStatus_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TStatus*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTRow_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TRow* _p = (STI_Client_Server::TRow*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTRow_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TRow* _p = new STI_Client_Server::TRow;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTRow_destructor_fn(void* _v)
{
  STI_Client_Server::TRow* _p = (STI_Client_Server::TRow*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TRow& _s)
{
  STI_Client_Server::TRow* _p = new STI_Client_Server::TRow(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTRow,
               _0RL_STI__Client__Server_mTRow_marshal_fn,
               _0RL_STI__Client__Server_mTRow_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TRow* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTRow,
               _0RL_STI__Client__Server_mTRow_marshal_fn,
               _0RL_STI__Client__Server_mTRow_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TRow*& _sp)
{
  return _a >>= (const STI_Client_Server::TRow*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TRow*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTRow,
                    _0RL_STI__Client__Server_mTRow_unmarshal_fn,
                    _0RL_STI__Client__Server_mTRow_marshal_fn,
                    _0RL_STI__Client__Server_mTRow_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TRow*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mTRowSeq_marshal_fn(cdrStream& _s, void* _v)
{
  STI_Client_Server::TRowSeq* _p = (STI_Client_Server::TRowSeq*)_v;
  *_p >>= _s;
}
static void _0RL_STI__Client__Server_mTRowSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  STI_Client_Server::TRowSeq* _p = new STI_Client_Server::TRowSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_STI__Client__Server_mTRowSeq_destructor_fn(void* _v)
{
  STI_Client_Server::TRowSeq* _p = (STI_Client_Server::TRowSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const STI_Client_Server::TRowSeq& _s)
{
  STI_Client_Server::TRowSeq* _p = new STI_Client_Server::TRowSeq(_s);
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTRowSeq,
               _0RL_STI__Client__Server_mTRowSeq_marshal_fn,
               _0RL_STI__Client__Server_mTRowSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::TRowSeq* _sp)
{
  _a.PR_insert(_0RL_tc_STI__Client__Server_mTRowSeq,
               _0RL_STI__Client__Server_mTRowSeq_marshal_fn,
               _0RL_STI__Client__Server_mTRowSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::TRowSeq*& _sp)
{
  return _a >>= (const STI_Client_Server::TRowSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const STI_Client_Server::TRowSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_STI__Client__Server_mTRowSeq,
                    _0RL_STI__Client__Server_mTRowSeq_unmarshal_fn,
                    _0RL_STI__Client__Server_mTRowSeq_marshal_fn,
                    _0RL_STI__Client__Server_mTRowSeq_destructor_fn,
                    _v)) {
    _sp = (const STI_Client_Server::TRowSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mExpSequence_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_STI__Client__Server_mExpSequence_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(STI_Client_Server::ExpSequence::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_STI__Client__Server_mExpSequence_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, STI_Client_Server::ExpSequence_ptr _o)
{
  STI_Client_Server::ExpSequence_ptr _no = STI_Client_Server::ExpSequence::_duplicate(_o);
  _a.PR_insert(STI_Client_Server::_tc_ExpSequence,
               _0RL_STI__Client__Server_mExpSequence_marshal_fn,
               _0RL_STI__Client__Server_mExpSequence_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::ExpSequence_ptr* _op)
{
  _a.PR_insert(STI_Client_Server::_tc_ExpSequence,
               _0RL_STI__Client__Server_mExpSequence_marshal_fn,
               _0RL_STI__Client__Server_mExpSequence_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = STI_Client_Server::ExpSequence::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::ExpSequence_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(STI_Client_Server::_tc_ExpSequence,
                    _0RL_STI__Client__Server_mExpSequence_unmarshal_fn,
                    _0RL_STI__Client__Server_mExpSequence_marshal_fn,
                    _0RL_STI__Client__Server_mExpSequence_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (STI_Client_Server::ExpSequence_ptr)_r->_ptrToObjRef(STI_Client_Server::ExpSequence::_PD_repoId);
    else
      _o = STI_Client_Server::ExpSequence::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_STI__Client__Server_mControl_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_STI__Client__Server_mControl_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(STI_Client_Server::Control::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_STI__Client__Server_mControl_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, STI_Client_Server::Control_ptr _o)
{
  STI_Client_Server::Control_ptr _no = STI_Client_Server::Control::_duplicate(_o);
  _a.PR_insert(STI_Client_Server::_tc_Control,
               _0RL_STI__Client__Server_mControl_marshal_fn,
               _0RL_STI__Client__Server_mControl_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, STI_Client_Server::Control_ptr* _op)
{
  _a.PR_insert(STI_Client_Server::_tc_Control,
               _0RL_STI__Client__Server_mControl_marshal_fn,
               _0RL_STI__Client__Server_mControl_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = STI_Client_Server::Control::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, STI_Client_Server::Control_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(STI_Client_Server::_tc_Control,
                    _0RL_STI__Client__Server_mControl_unmarshal_fn,
                    _0RL_STI__Client__Server_mControl_marshal_fn,
                    _0RL_STI__Client__Server_mControl_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (STI_Client_Server::Control_ptr)_r->_ptrToObjRef(STI_Client_Server::Control::_PD_repoId);
    else
      _o = STI_Client_Server::Control::_nil();
    return 1;
  }
  return 0;
}

