#include "WhichLock.h"

void arrayToVector(double* myArray, int length, std::vector <double>& myVector)
{
	int i;

	for (i = 0; i < length; i++)
	{
		myVector.push_back(myArray[i]);
	}

}

int main () {
	int length = 334;
	std::vector <double> DAQ_vector;
	std::vector <double> FREQ_vector;
	double offsetGHz = .7;
	//last data set as of 07/06/08; crossover
	//double DAQ_array[]={1.9409, 1.9385, 1.936, 1.936, 1.9336, 1.9336, 1.9336, 1.9336, 1.9287, 1.9287, 1.9312, 1.9263, 1.9287, 1.9263, 1.9287, 1.9312, 1.9287, 1.9263, 1.9287, 1.9214, 1.9263, 1.9238, 1.9214, 1.9214, 1.9214, 1.9238, 1.9165, 1.9165, 1.9189, 1.9165, 1.9116, 1.9165, 1.9116, 1.9116, 1.908, 1.908, 1.9055, 1.908, 1.9055, 1.9055, 1.9055, 1.9031, 1.9031, 1.9031, 1.9055, 1.9006, 1.8982, 1.8958, 1.9006, 1.8982, 1.8958, 1.8958, 1.8884, 1.8933, 1.8884, 1.8933, 1.8884, 1.8933, 1.886, 1.886, 1.8884, 1.886, 1.8884, 1.8909, 1.8884, 1.8909, 1.886, 1.8884, 1.886, 1.8835, 1.8811, 1.8811, 1.8787, 1.8762, 1.8787, 1.8762, 1.8762, 1.8738, 1.8689, 1.8689, 1.8665, 1.8665, 1.864, 1.8689, 1.8665, 1.8665, 1.8665, 1.8689, 1.8689, 1.8689, 1.8738, 1.8665, 1.8665, 1.8665, 1.8567, 1.864, 1.8616, 1.8591, 1.8591, 1.864, 1.8591, 1.8567, 1.853, 1.8567, 1.853, 1.8481, 1.853, 1.8481, 1.8616, 1.8506, 1.8567, 1.8457, 1.8506, 1.8481, 1.853, 1.853, 1.8481, 1.853, 1.8481, 1.8567, 1.8567, 1.8616, 1.864, 1.8665, 1.853, 1.8481, 1.8457, 1.8481, 1.8481, 1.8457, 1.8457, 1.8457, 1.8433, 1.8457, 1.8408, 1.8457, 1.8457, 1.8457, 1.8433, 1.8457, 1.8433, 1.8457, 1.8457, 1.8457, 1.8457, 1.8384, 1.8408, 1.8457, 1.8359, 1.8408, 1.8408, 1.8408, 1.8384, 1.8359, 1.8359, 1.8384, 1.8433, 1.8335, 1.8457, 1.8384, 1.8433, 1.8506, 1.8457, 1.853, 1.8567, 1.864, 1.8616, 1.8616, 1.8567, 1.853, 1.8408, 1.8359, 1.8359, 1.8286, 1.8311, 1.8262, 1.8237, 1.8237, 1.8237, 1.8237, 1.8213, 1.8188, 1.8213, 1.8213, 1.8164, 1.8213, 1.814, 1.8188, 1.8237, 1.8237, 1.8359, 1.8335, 1.8408, 1.8359, 1.8311, 1.8237, 1.8237, 1.8188, 1.8213, 1.8164, 1.814, 1.8188, 1.8164, 1.8164, 1.8188, 1.814, 1.8164, 1.814, 1.8066, 1.8164, 1.8091, 1.8164, 1.8164, 1.8091, 1.8091, 1.8115, 1.8066, 1.8066, 1.8066, 1.8066, 1.8066, 1.8066, 1.8018, 1.8066, 1.8066, 1.8066, 1.8066, 1.8066, 1.8066, 1.8091, 1.8042, 1.8115, 1.8066, 1.8115, 1.8066, 1.8091, 1.814, 1.8164, 1.8164, 1.8213, 1.814, 1.814, 1.814, 1.814, 1.8091, 1.8115, 1.8091, 1.8164, 1.8164, 1.8237, 1.8188, 1.814, 1.8188, 1.814, 1.8188, 1.8213, 1.8237, 1.8164, 1.8262, 1.8237, 1.8237, 1.8286, 1.8262, 1.8433, 1.8457, 1.8506, 1.8506, 1.8591, 1.853, 1.8567, 1.8591, 1.8567, 1.8616, 1.8591, 1.8616, 1.8591, 1.8665, 1.8665, 1.8689, 1.8665, 1.8762, 1.8762, 1.8762, 1.8738, 1.8713, 1.8616, 1.864, 1.8591, 1.864, 1.8665, 1.8665, 1.853, 1.8567, 1.8616, 1.8567, 1.8567, 1.853, 1.853, 1.8457, 1.8457, 1.8481, 1.8433, 1.8457, 1.8433, 1.8457, 1.8457, 1.8433, 1.8481, 1.8481, 1.8481, 1.8457, 1.8506, 1.8457, 1.8506, 1.853, 1.853, 1.853, 1.8457, 1.853, 1.853, 1.8567, 1.8506, 1.8616, 1.853, 1.8616, 1.864, 1.8567, 1.8616, 1.8616, 1.8665, 1.864, 1.8616, 1.8665, 1.864};
	//double FREQ_array[]={1.4, 1.403, 1.406, 1.409, 1.412, 1.415, 1.418, 1.421, 1.424, 1.427, 1.43, 1.433, 1.436, 1.439, 1.442, 1.445, 1.448, 1.451, 1.454, 1.457, 1.46, 1.463, 1.466, 1.469, 1.472, 1.475, 1.478, 1.481, 1.484, 1.487, 1.49, 1.493, 1.496, 1.499, 1.502, 1.505, 1.508, 1.511, 1.514, 1.517, 1.52, 1.523, 1.526, 1.529, 1.532, 1.535, 1.538, 1.541, 1.544, 1.547, 1.55, 1.553, 1.556, 1.559, 1.562, 1.565, 1.568, 1.571, 1.574, 1.577, 1.58, 1.583, 1.586, 1.589, 1.592, 1.595, 1.598, 1.601, 1.604, 1.607, 1.61, 1.613, 1.616, 1.619, 1.622, 1.625, 1.628, 1.631, 1.634, 1.637, 1.64, 1.643, 1.646, 1.649, 1.652, 1.655, 1.658, 1.661, 1.664, 1.667, 1.67, 1.673, 1.676, 1.679, 1.682, 1.685, 1.688, 1.691, 1.694, 1.697, 1.7, 1.703, 1.706, 1.709, 1.712, 1.715, 1.718, 1.721, 1.724, 1.727, 1.73, 1.733, 1.736, 1.739, 1.742, 1.745, 1.748, 1.751, 1.754, 1.757, 1.76, 1.763, 1.766, 1.769, 1.772, 1.775, 1.778, 1.781, 1.784, 1.787, 1.79, 1.793, 1.796, 1.799, 1.802, 1.805, 1.808, 1.811, 1.814, 1.817, 1.82, 1.823, 1.826, 1.829, 1.832, 1.835, 1.838, 1.841, 1.844, 1.847, 1.85, 1.853, 1.856, 1.859, 1.862, 1.865, 1.868, 1.871, 1.874, 1.877, 1.88, 1.883, 1.886, 1.889, 1.892, 1.895, 1.898, 1.901, 1.904, 1.907, 1.91, 1.913, 1.916, 1.919, 1.922, 1.925, 1.928, 1.931, 1.934, 1.937, 1.94, 1.943, 1.946, 1.949, 1.952, 1.955, 1.958, 1.961, 1.964, 1.967, 1.97, 1.973, 1.976, 1.979, 1.982, 1.985, 1.988, 1.991, 1.994, 1.997, 2, 2.003, 2.006, 2.009, 2.012, 2.015, 2.018, 2.021, 2.024, 2.027, 2.03, 2.033, 2.036, 2.039, 2.042, 2.045, 2.048, 2.051, 2.054, 2.057, 2.06, 2.063, 2.066, 2.069, 2.072, 2.075, 2.078, 2.081, 2.084, 2.087, 2.09, 2.093, 2.096, 2.099, 2.102, 2.105, 2.108, 2.111, 2.114, 2.117, 2.12, 2.123, 2.126, 2.129, 2.132, 2.135, 2.138, 2.141, 2.144, 2.147, 2.15, 2.153, 2.156, 2.159, 2.162, 2.165, 2.168, 2.171, 2.174, 2.177, 2.18, 2.183, 2.186, 2.189, 2.192, 2.195, 2.198, 2.201, 2.204, 2.207, 2.21, 2.213, 2.216, 2.219, 2.222, 2.225, 2.228, 2.231, 2.234, 2.237, 2.24, 2.243, 2.246, 2.249, 2.252, 2.255, 2.258, 2.261, 2.264, 2.267, 2.27, 2.273, 2.276, 2.279, 2.282, 2.285, 2.288, 2.291, 2.294, 2.297, 2.3, 2.303, 2.306, 2.309, 2.312, 2.315, 2.318, 2.321, 2.324, 2.327, 2.33, 2.333, 2.336, 2.339, 2.342, 2.345, 2.348, 2.351, 2.354, 2.357, 2.36, 2.363, 2.366, 2.369, 2.372, 2.375, 2.378, 2.381, 2.384, 2.387, 2.39, 2.393, 2.396, 2.399};
	//second data set. transition
	//double DAQ_array[] = {1.9421, 1.9336, 1.9373, 1.9324, 1.9348, 1.9324, 1.9348, 1.9324, 1.9324, 1.9324, 1.9299, 1.9263, 1.9312, 1.9275, 1.9263, 1.9263, 1.9263, 1.9226, 1.9214, 1.9226, 1.925, 1.9263, 1.925, 1.9214, 1.9226, 1.9177, 1.9214, 1.9202, 1.9214, 1.9202, 1.9165, 1.9202, 1.9177, 1.9189, 1.9177, 1.9189, 1.9202, 1.9177, 1.9153, 1.9202, 1.9177, 1.9165, 1.9177, 1.9128, 1.9122, 1.9141, 1.9098, 1.9086, 1.9043, 1.9067, 1.9073, 1.9055, 1.9043, 1.9067, 1.9031, 1.9019, 1.9019, 1.9055, 1.9043, 1.9031, 1.9043, 1.9043, 1.9019, 1.9055, 1.8994, 1.9031, 1.8982, 1.8958, 1.8958, 1.8958, 1.8933, 1.8933, 1.8909, 1.8884, 1.8872, 1.886, 1.886, 1.8835, 1.8835, 1.8811, 1.8774, 1.8787, 1.8787, 1.8762, 1.8787, 1.8799, 1.8774, 1.8738, 1.8738, 1.875, 1.875, 1.8713, 1.8689, 1.8689, 1.8689, 1.8665, 1.864, 1.8616, 1.8616, 1.8677, 1.864, 1.8628, 1.8567, 1.8549, 1.853, 1.8494, 1.8506, 1.8494, 1.8494, 1.8481, 1.8481, 1.8494, 1.8457, 1.8469, 1.8457, 1.8457, 1.8469, 1.842, 1.842, 1.8469, 1.842, 1.8433, 1.8433, 1.8433, 1.8445, 1.842, 1.8384, 1.8372, 1.8396, 1.8359, 1.8323, 1.8335, 1.8347, 1.8323, 1.8311, 1.8298, 1.8347, 1.8323, 1.8323, 1.8359, 1.8372, 1.8384, 1.842, 1.8408, 1.8335, 1.8274, 1.8262, 1.8237, 1.8176, 1.8152, 1.8188, 1.814, 1.814, 1.8091, 1.8091, 1.8054, 1.8042, 1.803, 1.803, 1.7969, 1.7969, 1.8011, 1.7932, 1.7963, 1.7944, 1.7932, 1.7944, 1.7944, 1.7944, 1.7957, 1.7944, 1.7957, 1.7944, 1.7987, 1.7944, 1.7957, 1.7957, 1.7999, 1.7969, 1.7969, 1.7987, 1.7969, 1.8042, 1.8091, 1.8115, 1.8201, 1.8201, 1.8213, 1.8127, 1.8079, 1.8042, 1.8011, 1.792, 1.7908, 1.7932, 1.7871, 1.7859, 1.7871, 1.7859, 1.7822, 1.7871, 1.7834, 1.7798, 1.781, 1.781, 1.7847, 1.7859, 1.7847, 1.7871, 1.7871, 1.7957, 1.803, 1.8066, 1.8054, 1.7999, 1.7957, 1.7932, 1.7883, 1.7859, 1.7834, 1.7871, 1.7847, 1.7822, 1.7834, 1.7859, 1.7859, 1.7871, 1.7859, 1.7896, 1.7908, 1.792, 1.7908, 1.792, 1.7908, 1.792, 1.7883, 1.7908, 1.7908, 1.7932, 1.7957, 1.7944, 1.7987, 1.8011, 1.8079, 1.8164, 1.8188, 1.8262, 1.8237, 1.8274, 1.8274, 1.8323, 1.8323, 1.8335, 1.8359, 1.8384, 1.8457, 1.8445, 1.8506, 1.8518, 1.8506, 1.8549, 1.8561, 1.8506, 1.8445, 1.8396, 1.8384, 1.8396, 1.8347, 1.8359, 1.8347, 1.8384, 1.8359, 1.8384, 1.8372, 1.8347, 1.8347, 1.8323, 1.8311, 1.8298, 1.8347, 1.8347, 1.8335, 1.8323, 1.8323, 1.8359, 1.8335, 1.8359, 1.8311, 1.8323, 1.8359, 1.8347, 1.8347, 1.8323, 1.8323, 1.8359, 1.8384, 1.8384, 1.8372, 1.8384, 1.8237, 1.8384, 1.8433, 1.8384, 1.842, 1.842, 1.842, 1.842, 1.8457, 1.8469, 1.8481, 1.8457, 1.8481, 1.8494, 1.8469, 1.8518, 1.853, 1.853, 1.8536, 1.8549, 1.8591, 1.8579, 1.8604, 1.8665, 1.864, 1.8652, 1.8665, 1.8652, 1.8665, 1.8689, 1.8701, 1.8726, 1.8689, 1.8713, 1.8774};
	//double FREQ_array[] = {1.4, 1.403, 1.406, 1.409, 1.412, 1.415, 1.418, 1.421, 1.424, 1.427, 1.43, 1.433, 1.436, 1.439, 1.442, 1.445, 1.448, 1.451, 1.454, 1.457, 1.46, 1.463, 1.466, 1.469, 1.472, 1.475, 1.478, 1.481, 1.484, 1.487, 1.49, 1.493, 1.496, 1.499, 1.502, 1.505, 1.508, 1.511, 1.514, 1.517, 1.52, 1.523, 1.526, 1.529, 1.532, 1.535, 1.538, 1.541, 1.544, 1.547, 1.55, 1.553, 1.556, 1.559, 1.562, 1.565, 1.568, 1.571, 1.574, 1.577, 1.58, 1.583, 1.586, 1.589, 1.592, 1.595, 1.598, 1.601, 1.604, 1.607, 1.61, 1.613, 1.616, 1.619, 1.622, 1.625, 1.628, 1.631, 1.634, 1.637, 1.64, 1.643, 1.646, 1.649, 1.652, 1.655, 1.658, 1.661, 1.664, 1.667, 1.67, 1.673, 1.676, 1.679, 1.682, 1.685, 1.688, 1.691, 1.694, 1.697, 1.7, 1.703, 1.706, 1.709, 1.712, 1.715, 1.718, 1.721, 1.724, 1.727, 1.73, 1.733, 1.736, 1.739, 1.742, 1.745, 1.748, 1.751, 1.754, 1.757, 1.76, 1.763, 1.766, 1.769, 1.772, 1.775, 1.778, 1.781, 1.784, 1.787, 1.79, 1.793, 1.796, 1.799, 1.802, 1.805, 1.808, 1.811, 1.814, 1.817, 1.82, 1.823, 1.826, 1.829, 1.832, 1.835, 1.838, 1.841, 1.844, 1.847, 1.85, 1.853, 1.856, 1.859, 1.862, 1.865, 1.868, 1.871, 1.874, 1.877, 1.88, 1.883, 1.886, 1.889, 1.892, 1.895, 1.898, 1.901, 1.904, 1.907,1.91, 1.913, 1.916, 1.919, 1.922, 1.925, 1.928, 1.931, 1.934, 1.937, 1.94, 1.943, 1.946, 1.949, 1.952, 1.955, 1.958, 1.961, 1.964, 1.967, 1.97, 1.973, 1.976, 1.979, 1.982, 1.985, 1.988, 1.991, 1.994, 1.997, 2, 2.003, 2.006, 2.009, 2.012, 2.015, 2.018, 2.021, 2.024, 2.027, 2.03, 2.033, 2.036, 2.039, 2.042, 2.045, 2.048, 2.051, 2.054, 2.057, 2.06, 2.063, 2.066, 2.069, 2.072, 2.075, 2.078, 2.081, 2.084, 2.087, 2.09, 2.093, 2.096, 2.099, 2.102, 2.105, 2.108, 2.111, 2.114, 2.117, 2.12, 2.123, 2.126, 2.129, 2.132, 2.135, 2.138, 2.141, 2.144, 2.147, 2.15, 2.153, 2.156, 2.159, 2.162, 2.165, 2.168, 2.171, 2.174, 2.177, 2.18, 2.183, 2.186, 2.189, 2.192, 2.195, 2.198, 2.201, 2.204, 2.207, 2.21, 2.213, 2.216, 2.219, 2.222, 2.225, 2.228, 2.231, 2.234, 2.237, 2.24, 2.243, 2.246, 2.249, 2.252, 2.255, 2.258, 2.261, 2.264, 2.267, 2.27, 2.273, 2.276, 2.279, 2.282, 2.285, 2.288, 2.291, 2.294, 2.297, 2.3, 2.303, 2.306, 2.309, 2.312, 2.315, 2.318, 2.321, 2.324, 2.327, 2.33, 2.333, 2.336, 2.339, 2.342, 2.345, 2.348, 2.351, 2.354, 2.357, 2.36, 2.363, 2.366, 2.369, 2.372, 2.375, 2.378, 2.381, 2.384, 2.387, 2.39, 2.393, 2.396, 2.399};
	//tenth data set. F' = 2 to F' = 4 crossover
	double DAQ_array[] = {1.9189, 1.9189, 1.9189, 1.9165, 1.9141, 1.9141, 1.908, 1.9141, 1.908, 1.9116, 1.908, 1.9055, 1.9116, 1.908, 1.9031, 1.9055, 1.9006, 1.9031, 1.8982, 1.8982, 1.8958, 1.8958, 1.8958, 1.9031, 1.8958, 1.8982, 1.8933, 1.8884, 1.8884, 1.8884, 1.8884, 1.8909, 1.8909, 1.8884, 1.8909, 1.8884, 1.886, 1.8884, 1.8909, 1.886, 1.886, 1.8884, 1.886, 1.886, 1.8835, 1.886, 1.886, 1.8835, 1.8811, 1.8787, 1.8665, 1.8713, 1.8713, 1.8738, 1.8738, 1.8665, 1.8689, 1.8713, 1.8665, 1.8665, 1.8665, 1.8665, 1.864, 1.8665, 1.8665, 1.864, 1.8616, 1.8665, 1.8616, 1.8616, 1.8591, 1.8567, 1.853, 1.8567, 1.853, 1.853, 1.8481, 1.8457, 1.8481, 1.8457, 1.8457, 1.8457, 1.8481, 1.8457, 1.8457, 1.8433, 1.8457, 1.8457, 1.8408, 1.8457, 1.8433, 1.8433, 1.8433, 1.8408, 1.8359, 1.8359, 1.8408, 1.8359, 1.8359, 1.8359, 1.8384, 1.8359, 1.8311, 1.8335, 1.8335, 1.8384, 1.8408, 1.8384, 1.8433, 1.8433, 1.8408, 1.8481, 1.8481, 1.8457, 1.8433, 1.8359, 1.8384, 1.8408, 1.8359, 1.8384, 1.8408, 1.8359, 1.8335, 1.8359, 1.8311, 1.8311, 1.8359, 1.8359, 1.8359, 1.8311, 1.8359, 1.8335, 1.8335, 1.8335, 1.8359, 1.8311, 1.8335, 1.8311, 1.8359, 1.8359, 1.8286, 1.8359, 1.8311, 1.8311, 1.8311, 1.8359, 1.8384, 1.8408, 1.8359, 1.8408, 1.8433, 1.8457, 1.8408, 1.8457, 1.8481, 1.853, 1.8591, 1.853, 1.8567, 1.8481, 1.8433, 1.8408, 1.8311, 1.8286, 1.8262, 1.8262, 1.8237, 1.8237, 1.8213, 1.814, 1.8164, 1.814, 1.814, 1.8237, 1.8188, 1.8188, 1.8213, 1.8188, 1.8164, 1.8237, 1.8286, 1.8262, 1.8359, 1.8359, 1.8335, 1.8335, 1.8237, 1.8213, 1.8213, 1.814, 1.8115, 1.8115, 1.8066, 1.8066, 1.8091, 1.8066, 1.8115, 1.8066, 1.8066, 1.8091, 1.8066, 1.8066, 1.814, 1.8066, 1.8066, 1.8066, 1.8091, 1.8066, 1.8042, 1.7957, 1.7957, 1.7957, 1.7932, 1.7957, 1.7957, 1.8018, 1.7957, 1.8042, 1.7981, 1.8042, 1.8066, 1.8042, 1.8018, 1.8042, 1.8091, 1.8042, 1.8115, 1.8066, 1.8091, 1.8115, 1.8042, 1.8042, 1.8091, 1.8042, 1.8018, 1.7981, 1.7981, 1.8042, 1.8042, 1.7957, 1.7957, 1.8042, 1.8066, 1.8066, 1.8042, 1.8018, 1.8066, 1.8066, 1.8066, 1.8066, 1.8066, 1.8018, 1.8115, 1.8091, 1.8066, 1.8066, 1.8115, 1.8115, 1.8091, 1.8091, 1.8115, 1.8115, 1.814, 1.8188, 1.8115, 1.814, 1.814, 1.8213, 1.8188, 1.8164, 1.8262, 1.8237, 1.8359, 1.8311, 1.8408, 1.8433, 1.8457, 1.8481, 1.853, 1.8567, 1.8506, 1.853, 1.8567, 1.8567, 1.8567, 1.8591, 1.8616, 1.8665, 1.8665, 1.8689, 1.8738, 1.864, 1.8665, 1.8567, 1.8591, 1.853, 1.8506, 1.8457, 1.8457, 1.8457, 1.8457, 1.8457, 1.8481, 1.8408, 1.8408, 1.8433, 1.8384, 1.8433, 1.8384, 1.8359, 1.8433, 1.8384, 1.8359, 1.8408, 1.8408, 1.8384, 1.8384, 1.8408, 1.8408, 1.8433, 1.8457, 1.8457, 1.8408, 1.8433, 1.8433, 1.8408, 1.8408, 1.8408, 1.8457, 1.8506, 1.8457, 1.8506, 1.8433, 1.8457};
	double FREQ_array[] = {1.4, 1.403, 1.406, 1.409, 1.412, 1.415, 1.418, 1.421, 1.424, 1.427, 1.43, 1.433, 1.436, 1.439, 1.442, 1.445, 1.448, 1.451, 1.454, 1.457, 1.46, 1.463, 1.466, 1.469, 1.472, 1.475, 1.478, 1.481, 1.484, 1.487, 1.49, 1.493, 1.496, 1.499, 1.502, 1.505, 1.508, 1.511, 1.514, 1.517, 1.52, 1.523, 1.526, 1.529, 1.532, 1.535, 1.538, 1.541, 1.544, 1.547, 1.55, 1.553, 1.556, 1.559, 1.562, 1.565, 1.568, 1.571, 1.574, 1.577, 1.58, 1.583, 1.586, 1.589, 1.592, 1.595, 1.598, 1.601, 1.604, 1.607, 1.61, 1.613, 1.616, 1.619, 1.622, 1.625, 1.628, 1.631, 1.634, 1.637, 1.64, 1.643, 1.646, 1.649, 1.652, 1.655, 1.658, 1.661, 1.664, 1.667, 1.67, 1.673, 1.676, 1.679, 1.682, 1.685, 1.688, 1.691, 1.694, 1.697, 1.7, 1.703, 1.706, 1.709, 1.712, 1.715, 1.718, 1.721, 1.724, 1.727, 1.73, 1.733, 1.736, 1.739, 1.742, 1.745, 1.748, 1.751, 1.754, 1.757, 1.76, 1.763, 1.766, 1.769, 1.772, 1.775, 1.778, 1.781, 1.784, 1.787, 1.79, 1.793, 1.796, 1.799, 1.802, 1.805, 1.808, 1.811, 1.814, 1.817, 1.82, 1.823, 1.826, 1.829, 1.832, 1.835, 1.838, 1.841, 1.844, 1.847, 1.85, 1.853, 1.856, 1.859, 1.862, 1.865, 1.868, 1.871, 1.874, 1.877, 1.88, 1.883, 1.886, 1.889, 1.892, 1.895, 1.898, 1.901, 1.904, 1.907, 1.91, 1.913, 1.916, 1.919, 1.922, 1.925, 1.928, 1.931, 1.934, 1.937, 1.94, 1.943, 1.946, 1.949, 1.952, 1.955, 1.958, 1.961, 1.964, 1.967, 1.97, 1.973, 1.976, 1.979, 1.982, 1.985, 1.988, 1.991, 1.994, 1.997, 2, 2.003, 2.006, 2.009, 2.012, 2.015, 2.018, 2.021, 2.024, 2.027, 2.03, 2.033, 2.036, 2.039, 2.042, 2.045, 2.048, 2.051, 2.054, 2.057, 2.06, 2.063, 2.066, 2.069, 2.072, 2.075, 2.078, 2.081, 2.084, 2.087, 2.09, 2.093, 2.096, 2.099, 2.102, 2.105, 2.108, 2.111, 2.114, 2.117, 2.12, 2.123, 2.126, 2.129, 2.132, 2.135, 2.138, 2.141, 2.144, 2.147, 2.15, 2.153, 2.156, 2.159, 2.162, 2.165, 2.168, 2.171, 2.174, 2.177, 2.18, 2.183, 2.186, 2.189, 2.192, 2.195, 2.198, 2.201, 2.204, 2.207, 2.21, 2.213, 2.216, 2.219, 2.222, 2.225, 2.228, 2.231, 2.234, 2.237, 2.24, 2.243, 2.246, 2.249, 2.252, 2.255, 2.258, 2.261, 2.264, 2.267, 2.27, 2.273, 2.276, 2.279, 2.282, 2.285, 2.288, 2.291, 2.294, 2.297, 2.3, 2.303, 2.306, 2.309, 2.312, 2.315, 2.318, 2.321, 2.324, 2.327, 2.33, 2.333, 2.336, 2.339, 2.342, 2.345, 2.348, 2.351, 2.354, 2.357, 2.36, 2.363, 2.366, 2.369, 2.372, 2.375, 2.378, 2.381, 2.384, 2.387, 2.39, 2.393, 2.396, 2.399};
	//double FREQ_array[] = {-1.4, -1.403, -1.406, -1.409, -1.412, -1.415, -1.418, -1.421, -1.424, -1.427, -1.43, -1.433, -1.436, -1.439, -1.442, -1.445, -1.448, -1.451, -1.454, -1.457, -1.46, -1.463, -1.466, -1.469, -1.472, -1.475, -1.478, -1.481, -1.484, -1.487, -1.49, -1.493, -1.496, -1.499, -1.502, -1.505, -1.508, -1.511, -1.514, -1.517, -1.52, -1.523, -1.526, -1.529, -1.532, -1.535, -1.538, -1.541, -1.544, -1.547, -1.55, -1.553, -1.556, -1.559, -1.562, -1.565, -1.568, -1.571, -1.574, -1.577, -1.58, -1.583, -1.586, -1.589, -1.592, -1.595, -1.598, -1.601, -1.604, -1.607, -1.61, -1.613, -1.616, -1.619, -1.622, -1.625, -1.628, -1.631, -1.634, -1.637, -1.64, -1.643, -1.646, -1.649, -1.652, -1.655, -1.658, -1.661, -1.664, -1.667, -1.67, -1.673, -1.676, -1.679, -1.682, -1.685, -1.688, -1.691, -1.694, -1.697, -1.7, -1.703, -1.706, -1.709, -1.712, -1.715, -1.718, -1.721, -1.724, -1.727, -1.73, -1.733, -1.736, -1.739, -1.742, -1.745, -1.748, -1.751, -1.754, -1.757, -1.76, -1.763, -1.766, -1.769, -1.772, -1.775, -1.778, -1.781, -1.784, -1.787, -1.79, -1.793, -1.796, -1.799, -1.802, -1.805, -1.808, -1.811, -1.814, -1.817, -1.82, -1.823, -1.826, -1.829, -1.832, -1.835, -1.838, -1.841, -1.844, -1.847, -1.85, -1.853, -1.856, -1.859, -1.862, -1.865, -1.868, -1.871, -1.874, -1.877, -1.88, -1.883, -1.886, -1.889, -1.892, -1.895, -1.898, -1.901, -1.904, -1.907, -1.91, -1.913, -1.916, -1.919, -1.922, -1.925, -1.928, -1.931, -1.934, -1.937, -1.94, -1.943, -1.946, -1.949, -1.952, -1.955, -1.958, -1.961, -1.964, -1.967, -1.97, -1.973, -1.976, -1.979, -1.982, -1.985, -1.988, -1.991, -1.994, -1.997, -2, -2.003, -2.006, -2.009, -2.012, -2.015, -2.018, -2.021, -2.024, -2.027, -2.03, -2.033, -2.036, -2.039, -2.042, -2.045, -2.048, -2.051, -2.054, -2.057, -2.06, -2.063, -2.066, -2.069, -2.072, -2.075, -2.078, -2.081, -2.084, -2.087, -2.09, -2.093, -2.096, -2.099, -2.102, -2.105 -2.108, -2.111, -2.114, -2.117, -2.12, -2.123, -2.126, -2.129, -2.132, -2.135, -2.138, -2.141, -2.144, -2.147, -2.15, -2.153, -2.156, -2.159, -2.162, -2.165, -2.168, -2.171, -2.174, -2.177, -2.18, -2.183, -2.186, -2.189, -2.192, -2.195, -2.198, -2.201, -2.204, -2.207, -2.21, -2.213, -2.216, -2.219, -2.222, -2.225, -2.228, -2.231, -2.234, -2.237, -2.24, -2.243, -2.246, -2.249, -2.252, -2.255, -2.258, -2.261, -2.264, -2.267, -2.27, -2.273, -2.276, -2.279, -2.282, -2.285, -2.288, -2.291, -2.294, -2.297, -2.3, -2.303, -2.306, -2.309, -2.312, -2.315, -2.318, -2.321, -2.324, -2.327, -2.33, -2.333, -2.336, -2.339, -2.342, -2.345, -2.348, -2.351, -2.354, -2.357, -2.36, -2.363, -2.366, -2.369, -2.372, -2.375, -2.378, -2.381, -2.384, -2.387, -2.39, -2.393, -2.396, -2.399};
	std::vector <double> FITDAQ_vector;
	std::vector <double> FITFREQ_vector;
	bool notLocked;
	WhichLock myLock;


	arrayToVector(DAQ_array, length, DAQ_vector);
	arrayToVector(FREQ_array, length, FREQ_vector);

	notLocked = myLock.LockedTo(DAQ_vector, FREQ_vector, FITDAQ_vector, FITFREQ_vector, offsetGHz);

	if (notLocked) {
		std::cout << "Eeeek! Error!" << std::endl;
	}
	else {
		std::cout << FITDAQ_vector.at(0) << std::endl;
		std::cout << FITFREQ_vector.at(0) << std::endl;
		std::cout << FITDAQ_vector.at(1) << std::endl;
		std::cout << FITFREQ_vector.at(1) << std::endl;
		std::cout << FITDAQ_vector.at(2) << std::endl;
		std::cout << FITFREQ_vector.at(2) << std::endl;
		std::cout << "This Worked!!!!!!!!!!!!!!!!!!" << std::endl;
	}

	return (0);
}