// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "device.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
STI_Server_Device::TAttribute::operator>>= (cdrStream &_n) const
{
  _n.marshalString(key,0);
  _n.marshalString(value,0);
  (const TStringSeq&) values >>= _n;

}

void
STI_Server_Device::TAttribute::operator<<= (cdrStream &_n)
{
  key = _n.unmarshalString(0);
  value = _n.unmarshalString(0);
  (TStringSeq&)values <<= _n;

}

STI_Server_Device::Configure_ptr STI_Server_Device::Configure_Helper::_nil() {
  return ::STI_Server_Device::Configure::_nil();
}

::CORBA::Boolean STI_Server_Device::Configure_Helper::is_nil(::STI_Server_Device::Configure_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Server_Device::Configure_Helper::release(::STI_Server_Device::Configure_ptr p) {
  ::CORBA::release(p);
}

void STI_Server_Device::Configure_Helper::marshalObjRef(::STI_Server_Device::Configure_ptr obj, cdrStream& s) {
  ::STI_Server_Device::Configure::_marshalObjRef(obj, s);
}

STI_Server_Device::Configure_ptr STI_Server_Device::Configure_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Server_Device::Configure::_unmarshalObjRef(s);
}

void STI_Server_Device::Configure_Helper::duplicate(::STI_Server_Device::Configure_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Server_Device::Configure_ptr
STI_Server_Device::Configure::_duplicate(::STI_Server_Device::Configure_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Server_Device::Configure_ptr
STI_Server_Device::Configure::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Server_Device::Configure_ptr
STI_Server_Device::Configure::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Server_Device::Configure_ptr
STI_Server_Device::Configure::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Configure _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Configure* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Configure;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Server_Device::Configure::_PD_repoId = "IDL:STI_Server_Device/Configure:1.0";


STI_Server_Device::_objref_Configure::~_objref_Configure() {
  
}


STI_Server_Device::_objref_Configure::_objref_Configure(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Server_Device::Configure::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Server_Device::_objref_Configure::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Server_Device::Configure::_PD_repoId )
    return (::STI_Server_Device::Configure_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Server_Device::Configure::_PD_repoId) )
    return (::STI_Server_Device::Configure_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring
class _0RL_cd_0a5ed34278f815d0_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_0a5ed34278f815d0_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_0a5ed34278f815d0_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_0a5ed34278f815d0_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_0a5ed34278f815d0_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_00000000* tcd = (_0RL_cd_0a5ed34278f815d0_00000000*)cd;
  STI_Server_Device::_impl_Configure* impl = (STI_Server_Device::_impl_Configure*) svnt->_ptrToInterface(STI_Server_Device::Configure::_PD_repoId);
  tcd->result = impl->setAttribute(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean STI_Server_Device::_objref_Configure::setAttribute(const char* key, const char* value)
{
  _0RL_cd_0a5ed34278f815d0_00000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_10000000, "setAttribute", 13);
  _call_desc.arg_0 = key;
  _call_desc.arg_1 = value;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring
class _0RL_cd_0a5ed34278f815d0_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var result;
};

void _0RL_cd_0a5ed34278f815d0_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_0a5ed34278f815d0_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_0a5ed34278f815d0_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_0a5ed34278f815d0_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_20000000* tcd = (_0RL_cd_0a5ed34278f815d0_20000000*)cd;
  STI_Server_Device::_impl_Configure* impl = (STI_Server_Device::_impl_Configure*) svnt->_ptrToInterface(STI_Server_Device::Configure::_PD_repoId);
  tcd->result = impl->getAttribute(tcd->arg_0);


}

char* STI_Server_Device::_objref_Configure::getAttribute(const char* key)
{
  _0RL_cd_0a5ed34278f815d0_20000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_30000000, "getAttribute", 13);
  _call_desc.arg_0 = key;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Server__Device_mTAttributeSeq
class _0RL_cd_0a5ed34278f815d0_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Server_Device::TAttributeSeq_var result;
};

void _0RL_cd_0a5ed34278f815d0_40000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Server_Device::TAttributeSeq&) result >>= _n;

}

void _0RL_cd_0a5ed34278f815d0_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Server_Device::TAttributeSeq;
  (STI_Server_Device::TAttributeSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_40000000* tcd = (_0RL_cd_0a5ed34278f815d0_40000000*)cd;
  STI_Server_Device::_impl_Configure* impl = (STI_Server_Device::_impl_Configure*) svnt->_ptrToInterface(STI_Server_Device::Configure::_PD_repoId);
  tcd->result = impl->attributes();


}

STI_Server_Device::TAttributeSeq* STI_Server_Device::_objref_Configure::attributes()
{
  _0RL_cd_0a5ed34278f815d0_40000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_50000000, "_get_attributes", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_0a5ed34278f815d0_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var result;
};

void _0RL_cd_0a5ed34278f815d0_60000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_0a5ed34278f815d0_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_60000000* tcd = (_0RL_cd_0a5ed34278f815d0_60000000*)cd;
  STI_Server_Device::_impl_Configure* impl = (STI_Server_Device::_impl_Configure*) svnt->_ptrToInterface(STI_Server_Device::Configure::_PD_repoId);
  tcd->result = impl->deviceName();


}

char* STI_Server_Device::_objref_Configure::deviceName()
{
  _0RL_cd_0a5ed34278f815d0_60000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_70000000, "_get_deviceName", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Server_Device::_pof_Configure::~_pof_Configure() {}


omniObjRef*
STI_Server_Device::_pof_Configure::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Server_Device::_objref_Configure(ior, id);
}


::CORBA::Boolean
STI_Server_Device::_pof_Configure::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Server_Device::Configure::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Server_Device::_pof_Configure _the_pof_STI__Server__Device_mConfigure;

STI_Server_Device::_impl_Configure::~_impl_Configure() {}


::CORBA::Boolean
STI_Server_Device::_impl_Configure::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "setAttribute") ) {

    _0RL_cd_0a5ed34278f815d0_00000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_10000000, "setAttribute", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAttribute") ) {

    _0RL_cd_0a5ed34278f815d0_20000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_30000000, "getAttribute", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_attributes") ) {

    _0RL_cd_0a5ed34278f815d0_40000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_50000000, "_get_attributes", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_deviceName") ) {

    _0RL_cd_0a5ed34278f815d0_60000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_70000000, "_get_deviceName", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Server_Device::_impl_Configure::_ptrToInterface(const char* id)
{
  if( id == ::STI_Server_Device::Configure::_PD_repoId )
    return (::STI_Server_Device::_impl_Configure*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Server_Device::Configure::_PD_repoId) )
    return (::STI_Server_Device::_impl_Configure*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Server_Device::_impl_Configure::_mostDerivedRepoId()
{
  return ::STI_Server_Device::Configure::_PD_repoId;
}

void
STI_Server_Device::TDDS::operator>>= (cdrStream &_n) const
{
  freq >>= _n;
  phase >>= _n;
  ampl >>= _n;

}

void
STI_Server_Device::TDDS::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)freq <<= _n;
  (::CORBA::Double&)phase <<= _n;
  (::CORBA::Double&)ampl <<= _n;

}

void
STI_Server_Device::TValMixed::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  switch(_pd__d) {
    case ValueNumber:
      _pd_number >>= _n;
      break;
    case ValueString:
      _n.marshalString(_pd_stringVal,0);
      break;
    case ValueDDSTriplet:
      (const TDDS&) _pd_triplet >>= _n;
      break;
    case ValueMeas:
      _n.marshalBoolean(_pd_meas);
      break;
    default: break;

  
  }


}

void
STI_Server_Device::TValMixed::operator<<= (cdrStream& _n)
{
  (TValue&)_pd__d <<= _n;

  switch(_pd__d) {
    case ValueNumber:
      _pd__default = 0;
      (::CORBA::Double&)_pd_number <<= _n;
      break;
    case ValueString:
      _pd__default = 0;
      _pd_stringVal = _n.unmarshalString(0);
      break;
    case ValueDDSTriplet:
      _pd__default = 0;
      (TDDS&)_pd_triplet <<= _n;
      break;
    case ValueMeas:
      _pd__default = 0;
      _pd_meas = _n.unmarshalBoolean();
      break;

  }
  _pd__initialised = 1;
}

void
STI_Server_Device::TDeviceEvent::operator>>= (cdrStream &_n) const
{
  channel >>= _n;
  time >>= _n;
  (const TValMixed&) value >>= _n;

}

void
STI_Server_Device::TDeviceEvent::operator<<= (cdrStream &_n)
{
  (::CORBA::UShort&)channel <<= _n;
  (::CORBA::Double&)time <<= _n;
  (TValMixed&)value <<= _n;

}

void
STI_Server_Device::TPicture::operator>>= (cdrStream &_n) const
{
  rowLength >>= _n;
  (const TshortSeq&) pixels >>= _n;

}

void
STI_Server_Device::TPicture::operator<<= (cdrStream &_n)
{
  (::CORBA::UShort&)rowLength <<= _n;
  (TshortSeq&)pixels <<= _n;

}

void
STI_Server_Device::TDataMixed::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  switch(_pd__d) {
    case DataNumber:
      _pd_number >>= _n;
      break;
    case DataString:
      _n.marshalString(_pd_stringVal,0);
      break;
    case DataPicture:
      (const TPicture&) _pd_picture >>= _n;
      break;
    case DataNone:
      _n.marshalBoolean(_pd_outVal);
      break;
    default: break;

  
  }


}

void
STI_Server_Device::TDataMixed::operator<<= (cdrStream& _n)
{
  (TData&)_pd__d <<= _n;

  switch(_pd__d) {
    case DataNumber:
      _pd__default = 0;
      (::CORBA::Double&)_pd_number <<= _n;
      break;
    case DataString:
      _pd__default = 0;
      _pd_stringVal = _n.unmarshalString(0);
      break;
    case DataPicture:
      _pd__default = 0;
      (TPicture&)_pd_picture <<= _n;
      break;
    case DataNone:
      _pd__default = 0;
      _pd_outVal = _n.unmarshalBoolean();
      break;

  }
  _pd__initialised = 1;
}

void
STI_Server_Device::TMeasurement::operator>>= (cdrStream &_n) const
{
  channel >>= _n;
  time >>= _n;
  (const TDataMixed&) data >>= _n;

}

void
STI_Server_Device::TMeasurement::operator<<= (cdrStream &_n)
{
  (::CORBA::UShort&)channel <<= _n;
  (::CORBA::Double&)time <<= _n;
  (TDataMixed&)data <<= _n;

}

STI_Server_Device::DataTransfer_ptr STI_Server_Device::DataTransfer_Helper::_nil() {
  return ::STI_Server_Device::DataTransfer::_nil();
}

::CORBA::Boolean STI_Server_Device::DataTransfer_Helper::is_nil(::STI_Server_Device::DataTransfer_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Server_Device::DataTransfer_Helper::release(::STI_Server_Device::DataTransfer_ptr p) {
  ::CORBA::release(p);
}

void STI_Server_Device::DataTransfer_Helper::marshalObjRef(::STI_Server_Device::DataTransfer_ptr obj, cdrStream& s) {
  ::STI_Server_Device::DataTransfer::_marshalObjRef(obj, s);
}

STI_Server_Device::DataTransfer_ptr STI_Server_Device::DataTransfer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Server_Device::DataTransfer::_unmarshalObjRef(s);
}

void STI_Server_Device::DataTransfer_Helper::duplicate(::STI_Server_Device::DataTransfer_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Server_Device::DataTransfer_ptr
STI_Server_Device::DataTransfer::_duplicate(::STI_Server_Device::DataTransfer_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Server_Device::DataTransfer_ptr
STI_Server_Device::DataTransfer::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Server_Device::DataTransfer_ptr
STI_Server_Device::DataTransfer::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Server_Device::DataTransfer_ptr
STI_Server_Device::DataTransfer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DataTransfer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DataTransfer* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DataTransfer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Server_Device::DataTransfer::_PD_repoId = "IDL:STI_Server_Device/DataTransfer:1.0";


STI_Server_Device::_objref_DataTransfer::~_objref_DataTransfer() {
  
}


STI_Server_Device::_objref_DataTransfer::_objref_DataTransfer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Server_Device::DataTransfer::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Server_Device::_objref_DataTransfer::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Server_Device::DataTransfer::_PD_repoId )
    return (::STI_Server_Device::DataTransfer_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Server_Device::DataTransfer::_PD_repoId) )
    return (::STI_Server_Device::DataTransfer_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cSTI__Server__Device_mTMeasurementSeq_i_cunsigned_pshort_i_cdouble_i_cdouble_i_cdouble
class _0RL_cd_0a5ed34278f815d0_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::UShort arg_0;
  ::CORBA::Double arg_1;
  ::CORBA::Double arg_2;
  ::CORBA::Double arg_3;
  STI_Server_Device::TMeasurementSeq_var result;
};

void _0RL_cd_0a5ed34278f815d0_80000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_0a5ed34278f815d0_80000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::UShort&)arg_0 <<= _n;
  (::CORBA::Double&)arg_1 <<= _n;
  (::CORBA::Double&)arg_2 <<= _n;
  (::CORBA::Double&)arg_3 <<= _n;

}

void _0RL_cd_0a5ed34278f815d0_80000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Server_Device::TMeasurementSeq&) result >>= _n;

}

void _0RL_cd_0a5ed34278f815d0_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Server_Device::TMeasurementSeq;
  (STI_Server_Device::TMeasurementSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_80000000* tcd = (_0RL_cd_0a5ed34278f815d0_80000000*)cd;
  STI_Server_Device::_impl_DataTransfer* impl = (STI_Server_Device::_impl_DataTransfer*) svnt->_ptrToInterface(STI_Server_Device::DataTransfer::_PD_repoId);
  tcd->result = impl->getStreamingData(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);


}

STI_Server_Device::TMeasurementSeq* STI_Server_Device::_objref_DataTransfer::getStreamingData(::CORBA::UShort channel, ::CORBA::Double initial_t, ::CORBA::Double final_t, ::CORBA::Double delta_t)
{
  _0RL_cd_0a5ed34278f815d0_80000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_90000000, "getStreamingData", 17);
  _call_desc.arg_0 = channel;
  _call_desc.arg_1 = initial_t;
  _call_desc.arg_2 = final_t;
  _call_desc.arg_3 = delta_t;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_60000000* tcd = (_0RL_cd_0a5ed34278f815d0_60000000*)cd;
  STI_Server_Device::_impl_DataTransfer* impl = (STI_Server_Device::_impl_DataTransfer*) svnt->_ptrToInterface(STI_Server_Device::DataTransfer::_PD_repoId);
  tcd->result = impl->errMsg();


}

char* STI_Server_Device::_objref_DataTransfer::errMsg()
{
  _0RL_cd_0a5ed34278f815d0_60000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_a0000000, "_get_errMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Server__Device_mTMeasurementSeqSeq
class _0RL_cd_0a5ed34278f815d0_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_b0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Server_Device::TMeasurementSeqSeq_var result;
};

void _0RL_cd_0a5ed34278f815d0_b0000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Server_Device::TMeasurementSeqSeq&) result >>= _n;

}

void _0RL_cd_0a5ed34278f815d0_b0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Server_Device::TMeasurementSeqSeq;
  (STI_Server_Device::TMeasurementSeqSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_b0000000* tcd = (_0RL_cd_0a5ed34278f815d0_b0000000*)cd;
  STI_Server_Device::_impl_DataTransfer* impl = (STI_Server_Device::_impl_DataTransfer*) svnt->_ptrToInterface(STI_Server_Device::DataTransfer::_PD_repoId);
  tcd->result = impl->measurements();


}

STI_Server_Device::TMeasurementSeqSeq* STI_Server_Device::_objref_DataTransfer::measurements()
{
  _0RL_cd_0a5ed34278f815d0_b0000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_c0000000, "_get_measurements", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Server_Device::_pof_DataTransfer::~_pof_DataTransfer() {}


omniObjRef*
STI_Server_Device::_pof_DataTransfer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Server_Device::_objref_DataTransfer(ior, id);
}


::CORBA::Boolean
STI_Server_Device::_pof_DataTransfer::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Server_Device::DataTransfer::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Server_Device::_pof_DataTransfer _the_pof_STI__Server__Device_mDataTransfer;

STI_Server_Device::_impl_DataTransfer::~_impl_DataTransfer() {}


::CORBA::Boolean
STI_Server_Device::_impl_DataTransfer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getStreamingData") ) {

    _0RL_cd_0a5ed34278f815d0_80000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_90000000, "getStreamingData", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_errMsg") ) {

    _0RL_cd_0a5ed34278f815d0_60000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_a0000000, "_get_errMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_measurements") ) {

    _0RL_cd_0a5ed34278f815d0_b0000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_c0000000, "_get_measurements", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Server_Device::_impl_DataTransfer::_ptrToInterface(const char* id)
{
  if( id == ::STI_Server_Device::DataTransfer::_PD_repoId )
    return (::STI_Server_Device::_impl_DataTransfer*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Server_Device::DataTransfer::_PD_repoId) )
    return (::STI_Server_Device::_impl_DataTransfer*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Server_Device::_impl_DataTransfer::_mostDerivedRepoId()
{
  return ::STI_Server_Device::DataTransfer::_PD_repoId;
}

void
STI_Server_Device::TStatus::operator>>= (cdrStream &_n) const
{
  level >>= _n;
  curTime >>= _n;
  curEvent >>= _n;
  curCycle >>= _n;

}

void
STI_Server_Device::TStatus::operator<<= (cdrStream &_n)
{
  (TStatusLevel&)level <<= _n;
  (::CORBA::Double&)curTime <<= _n;
  (::CORBA::ULong&)curEvent <<= _n;
  (::CORBA::UShort&)curCycle <<= _n;

}

STI_Server_Device::DeviceControl_ptr STI_Server_Device::DeviceControl_Helper::_nil() {
  return ::STI_Server_Device::DeviceControl::_nil();
}

::CORBA::Boolean STI_Server_Device::DeviceControl_Helper::is_nil(::STI_Server_Device::DeviceControl_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Server_Device::DeviceControl_Helper::release(::STI_Server_Device::DeviceControl_ptr p) {
  ::CORBA::release(p);
}

void STI_Server_Device::DeviceControl_Helper::marshalObjRef(::STI_Server_Device::DeviceControl_ptr obj, cdrStream& s) {
  ::STI_Server_Device::DeviceControl::_marshalObjRef(obj, s);
}

STI_Server_Device::DeviceControl_ptr STI_Server_Device::DeviceControl_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Server_Device::DeviceControl::_unmarshalObjRef(s);
}

void STI_Server_Device::DeviceControl_Helper::duplicate(::STI_Server_Device::DeviceControl_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Server_Device::DeviceControl_ptr
STI_Server_Device::DeviceControl::_duplicate(::STI_Server_Device::DeviceControl_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Server_Device::DeviceControl_ptr
STI_Server_Device::DeviceControl::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Server_Device::DeviceControl_ptr
STI_Server_Device::DeviceControl::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Server_Device::DeviceControl_ptr
STI_Server_Device::DeviceControl::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DeviceControl _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DeviceControl* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DeviceControl;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Server_Device::DeviceControl::_PD_repoId = "IDL:STI_Server_Device/DeviceControl:1.0";


STI_Server_Device::_objref_DeviceControl::~_objref_DeviceControl() {
  
}


STI_Server_Device::_objref_DeviceControl::_objref_DeviceControl(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Server_Device::DeviceControl::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Server_Device::_objref_DeviceControl::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Server_Device::DeviceControl::_PD_repoId )
    return (::STI_Server_Device::DeviceControl_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Server_Device::DeviceControl::_PD_repoId) )
    return (::STI_Server_Device::DeviceControl_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cSTI__Server__Device_mTStatus
class _0RL_cd_0a5ed34278f815d0_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_d0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Server_Device::TStatus result;
};

void _0RL_cd_0a5ed34278f815d0_d0000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Server_Device::TStatus&) result >>= _n;

}

void _0RL_cd_0a5ed34278f815d0_d0000000::unmarshalReturnedValues(cdrStream& _n)
{
  (STI_Server_Device::TStatus&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_d0000000* tcd = (_0RL_cd_0a5ed34278f815d0_d0000000*)cd;
  STI_Server_Device::_impl_DeviceControl* impl = (STI_Server_Device::_impl_DeviceControl*) svnt->_ptrToInterface(STI_Server_Device::DeviceControl::_PD_repoId);
  tcd->result = impl->status();


}

STI_Server_Device::TStatus STI_Server_Device::_objref_DeviceControl::status()
{
  _0RL_cd_0a5ed34278f815d0_d0000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_e0000000, "status", 7);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSTI__Server__Device_mTDeviceEventSeq_i_cboolean
class _0RL_cd_0a5ed34278f815d0_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_f0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Server_Device::TDeviceEventSeq_var arg_0_;
  const STI_Server_Device::TDeviceEventSeq* arg_0;
  ::CORBA::Boolean arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_0a5ed34278f815d0_f0000000::marshalArguments(cdrStream& _n)
{
  (const STI_Server_Device::TDeviceEventSeq&) *arg_0 >>= _n;
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_0a5ed34278f815d0_f0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI_Server_Device::TDeviceEventSeq;
  (STI_Server_Device::TDeviceEventSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1 = _n.unmarshalBoolean();

}

void _0RL_cd_0a5ed34278f815d0_f0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_0a5ed34278f815d0_f0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_f0000000* tcd = (_0RL_cd_0a5ed34278f815d0_f0000000*)cd;
  STI_Server_Device::_impl_DeviceControl* impl = (STI_Server_Device::_impl_DeviceControl*) svnt->_ptrToInterface(STI_Server_Device::DeviceControl::_PD_repoId);
  tcd->result = impl->transferEvents(*tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean STI_Server_Device::_objref_DeviceControl::transferEvents(const TDeviceEventSeq& events, ::CORBA::Boolean dryrun)
{
  _0RL_cd_0a5ed34278f815d0_f0000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_01000000, "transferEvents", 15);
  _call_desc.arg_0 = &(TDeviceEventSeq&) events;
  _call_desc.arg_1 = dryrun;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_0a5ed34278f815d0_11000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_11000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
    
  
  
};

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_21000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Server_Device::_impl_DeviceControl* impl = (STI_Server_Device::_impl_DeviceControl*) svnt->_ptrToInterface(STI_Server_Device::DeviceControl::_PD_repoId);
  impl->reset();


}

void STI_Server_Device::_objref_DeviceControl::reset()
{
  _0RL_cd_0a5ed34278f815d0_11000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_21000000, "reset", 6);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_31000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Server_Device::_impl_DeviceControl* impl = (STI_Server_Device::_impl_DeviceControl*) svnt->_ptrToInterface(STI_Server_Device::DeviceControl::_PD_repoId);
  impl->start();


}

void STI_Server_Device::_objref_DeviceControl::start()
{
  _0RL_cd_0a5ed34278f815d0_11000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_31000000, "start", 6);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_41000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Server_Device::_impl_DeviceControl* impl = (STI_Server_Device::_impl_DeviceControl*) svnt->_ptrToInterface(STI_Server_Device::DeviceControl::_PD_repoId);
  impl->trigger();


}

void STI_Server_Device::_objref_DeviceControl::trigger()
{
  _0RL_cd_0a5ed34278f815d0_11000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_41000000, "trigger", 8);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_51000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI_Server_Device::_impl_DeviceControl* impl = (STI_Server_Device::_impl_DeviceControl*) svnt->_ptrToInterface(STI_Server_Device::DeviceControl::_PD_repoId);
  impl->stop();


}

void STI_Server_Device::_objref_DeviceControl::stop()
{
  _0RL_cd_0a5ed34278f815d0_11000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_51000000, "stop", 5);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_61000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_60000000* tcd = (_0RL_cd_0a5ed34278f815d0_60000000*)cd;
  STI_Server_Device::_impl_DeviceControl* impl = (STI_Server_Device::_impl_DeviceControl*) svnt->_ptrToInterface(STI_Server_Device::DeviceControl::_PD_repoId);
  tcd->result = impl->errMsg();


}

char* STI_Server_Device::_objref_DeviceControl::errMsg()
{
  _0RL_cd_0a5ed34278f815d0_60000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_61000000, "_get_errMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Server_Device::_pof_DeviceControl::~_pof_DeviceControl() {}


omniObjRef*
STI_Server_Device::_pof_DeviceControl::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Server_Device::_objref_DeviceControl(ior, id);
}


::CORBA::Boolean
STI_Server_Device::_pof_DeviceControl::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Server_Device::DeviceControl::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Server_Device::_pof_DeviceControl _the_pof_STI__Server__Device_mDeviceControl;

STI_Server_Device::_impl_DeviceControl::~_impl_DeviceControl() {}


::CORBA::Boolean
STI_Server_Device::_impl_DeviceControl::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "status") ) {

    _0RL_cd_0a5ed34278f815d0_d0000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_e0000000, "status", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "transferEvents") ) {

    _0RL_cd_0a5ed34278f815d0_f0000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_01000000, "transferEvents", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "reset") ) {

    _0RL_cd_0a5ed34278f815d0_11000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_21000000, "reset", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "start") ) {

    _0RL_cd_0a5ed34278f815d0_11000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_31000000, "start", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "trigger") ) {

    _0RL_cd_0a5ed34278f815d0_11000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_41000000, "trigger", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stop") ) {

    _0RL_cd_0a5ed34278f815d0_11000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_51000000, "stop", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_errMsg") ) {

    _0RL_cd_0a5ed34278f815d0_60000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_61000000, "_get_errMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Server_Device::_impl_DeviceControl::_ptrToInterface(const char* id)
{
  if( id == ::STI_Server_Device::DeviceControl::_PD_repoId )
    return (::STI_Server_Device::_impl_DeviceControl*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Server_Device::DeviceControl::_PD_repoId) )
    return (::STI_Server_Device::_impl_DeviceControl*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Server_Device::_impl_DeviceControl::_mostDerivedRepoId()
{
  return ::STI_Server_Device::DeviceControl::_PD_repoId;
}

void
STI_Server_Device::TDeviceChannel::operator>>= (cdrStream &_n) const
{
  channel >>= _n;
  type >>= _n;
  inputType >>= _n;
  outputType >>= _n;

}

void
STI_Server_Device::TDeviceChannel::operator<<= (cdrStream &_n)
{
  (::CORBA::UShort&)channel <<= _n;
  (TChannelType&)type <<= _n;
  (TData&)inputType <<= _n;
  (TValue&)outputType <<= _n;

}

void
STI_Server_Device::TDevice::operator>>= (cdrStream &_n) const
{
  _n.marshalString(deviceName,0);
  _n.marshalString(address,0);
  moduleNum >>= _n;
  _n.marshalString(deviceID,0);
  _n.marshalString(deviceContext,0);

}

void
STI_Server_Device::TDevice::operator<<= (cdrStream &_n)
{
  deviceName = _n.unmarshalString(0);
  address = _n.unmarshalString(0);
  (::CORBA::UShort&)moduleNum <<= _n;
  deviceID = _n.unmarshalString(0);
  deviceContext = _n.unmarshalString(0);

}

STI_Server_Device::ServerConfigure_ptr STI_Server_Device::ServerConfigure_Helper::_nil() {
  return ::STI_Server_Device::ServerConfigure::_nil();
}

::CORBA::Boolean STI_Server_Device::ServerConfigure_Helper::is_nil(::STI_Server_Device::ServerConfigure_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Server_Device::ServerConfigure_Helper::release(::STI_Server_Device::ServerConfigure_ptr p) {
  ::CORBA::release(p);
}

void STI_Server_Device::ServerConfigure_Helper::marshalObjRef(::STI_Server_Device::ServerConfigure_ptr obj, cdrStream& s) {
  ::STI_Server_Device::ServerConfigure::_marshalObjRef(obj, s);
}

STI_Server_Device::ServerConfigure_ptr STI_Server_Device::ServerConfigure_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Server_Device::ServerConfigure::_unmarshalObjRef(s);
}

void STI_Server_Device::ServerConfigure_Helper::duplicate(::STI_Server_Device::ServerConfigure_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Server_Device::ServerConfigure_ptr
STI_Server_Device::ServerConfigure::_duplicate(::STI_Server_Device::ServerConfigure_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Server_Device::ServerConfigure_ptr
STI_Server_Device::ServerConfigure::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Server_Device::ServerConfigure_ptr
STI_Server_Device::ServerConfigure::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Server_Device::ServerConfigure_ptr
STI_Server_Device::ServerConfigure::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ServerConfigure _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ServerConfigure* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ServerConfigure;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Server_Device::ServerConfigure::_PD_repoId = "IDL:STI_Server_Device/ServerConfigure:1.0";


STI_Server_Device::_objref_ServerConfigure::~_objref_ServerConfigure() {
  
}


STI_Server_Device::_objref_ServerConfigure::_objref_ServerConfigure(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Server_Device::ServerConfigure::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Server_Device::_objref_ServerConfigure::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Server_Device::ServerConfigure::_PD_repoId )
    return (::STI_Server_Device::ServerConfigure_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Server_Device::ServerConfigure::_PD_repoId) )
    return (::STI_Server_Device::ServerConfigure_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_n_cSTI__Server__Device_mTDevice
class _0RL_cd_0a5ed34278f815d0_71000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_71000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Server_Device::TDevice_var arg_0_;
  STI_Server_Device::TDevice* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_0a5ed34278f815d0_71000000::marshalArguments(cdrStream& _n)
{
  (const STI_Server_Device::TDevice&) *arg_0 >>= _n;

}

void _0RL_cd_0a5ed34278f815d0_71000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI_Server_Device::TDevice;
  (STI_Server_Device::TDevice&)arg_0_ <<= _n;
  arg_0 = &arg_0_.inout();

}

void _0RL_cd_0a5ed34278f815d0_71000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const STI_Server_Device::TDevice&) *arg_0 >>= _n;

}

void _0RL_cd_0a5ed34278f815d0_71000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  (STI_Server_Device::TDevice&)*arg_0 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_81000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_71000000* tcd = (_0RL_cd_0a5ed34278f815d0_71000000*)cd;
  STI_Server_Device::_impl_ServerConfigure* impl = (STI_Server_Device::_impl_ServerConfigure*) svnt->_ptrToInterface(STI_Server_Device::ServerConfigure::_PD_repoId);
  tcd->result = impl->registerDevice(*tcd->arg_0);


}

::CORBA::Boolean STI_Server_Device::_objref_ServerConfigure::registerDevice(TDevice& device)
{
  _0RL_cd_0a5ed34278f815d0_71000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_81000000, "registerDevice", 15);
  _call_desc.arg_0 = &(TDevice&) device;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cSTI__Server__Device_mTDeviceChannelSeq
class _0RL_cd_0a5ed34278f815d0_91000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_91000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI_Server_Device::TDeviceChannelSeq_var arg_1_;
  const STI_Server_Device::TDeviceChannelSeq* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_0a5ed34278f815d0_91000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const STI_Server_Device::TDeviceChannelSeq&) *arg_1 >>= _n;

}

void _0RL_cd_0a5ed34278f815d0_91000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new STI_Server_Device::TDeviceChannelSeq;
  (STI_Server_Device::TDeviceChannelSeq&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_0a5ed34278f815d0_91000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_0a5ed34278f815d0_91000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_a1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_91000000* tcd = (_0RL_cd_0a5ed34278f815d0_91000000*)cd;
  STI_Server_Device::_impl_ServerConfigure* impl = (STI_Server_Device::_impl_ServerConfigure*) svnt->_ptrToInterface(STI_Server_Device::ServerConfigure::_PD_repoId);
  tcd->result = impl->setChannels(tcd->arg_0, *tcd->arg_1);


}

::CORBA::Boolean STI_Server_Device::_objref_ServerConfigure::setChannels(const char* deviceID, const TDeviceChannelSeq& channels)
{
  _0RL_cd_0a5ed34278f815d0_91000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_a1000000, "setChannels", 12);
  _call_desc.arg_0 = deviceID;
  _call_desc.arg_1 = &(TDeviceChannelSeq&) channels;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_0a5ed34278f815d0_b1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_b1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_0a5ed34278f815d0_b1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_0a5ed34278f815d0_b1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_0a5ed34278f815d0_b1000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_0a5ed34278f815d0_b1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_c1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_b1000000* tcd = (_0RL_cd_0a5ed34278f815d0_b1000000*)cd;
  STI_Server_Device::_impl_ServerConfigure* impl = (STI_Server_Device::_impl_ServerConfigure*) svnt->_ptrToInterface(STI_Server_Device::ServerConfigure::_PD_repoId);
  tcd->result = impl->activateDevice(tcd->arg_0);


}

::CORBA::Boolean STI_Server_Device::_objref_ServerConfigure::activateDevice(const char* deviceID)
{
  _0RL_cd_0a5ed34278f815d0_b1000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_c1000000, "activateDevice", 15);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_b1000000* tcd = (_0RL_cd_0a5ed34278f815d0_b1000000*)cd;
  STI_Server_Device::_impl_ServerConfigure* impl = (STI_Server_Device::_impl_ServerConfigure*) svnt->_ptrToInterface(STI_Server_Device::ServerConfigure::_PD_repoId);
  tcd->result = impl->removeDevice(tcd->arg_0);


}

::CORBA::Boolean STI_Server_Device::_objref_ServerConfigure::removeDevice(const char* deviceID)
{
  _0RL_cd_0a5ed34278f815d0_b1000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_d1000000, "removeDevice", 13);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cSTI__Server__Device_mTDevice
class _0RL_cd_0a5ed34278f815d0_e1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_e1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Server_Device::TDevice_var arg_0_;
  const STI_Server_Device::TDevice* arg_0;
  ::CORBA::String_var result;
};

void _0RL_cd_0a5ed34278f815d0_e1000000::marshalArguments(cdrStream& _n)
{
  (const STI_Server_Device::TDevice&) *arg_0 >>= _n;

}

void _0RL_cd_0a5ed34278f815d0_e1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI_Server_Device::TDevice;
  (STI_Server_Device::TDevice&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_0a5ed34278f815d0_e1000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_0a5ed34278f815d0_e1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_f1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_e1000000* tcd = (_0RL_cd_0a5ed34278f815d0_e1000000*)cd;
  STI_Server_Device::_impl_ServerConfigure* impl = (STI_Server_Device::_impl_ServerConfigure*) svnt->_ptrToInterface(STI_Server_Device::ServerConfigure::_PD_repoId);
  tcd->result = impl->generateDeviceID(*tcd->arg_0);


}

char* STI_Server_Device::_objref_ServerConfigure::generateDeviceID(const TDevice& device)
{
  _0RL_cd_0a5ed34278f815d0_e1000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_f1000000, "generateDeviceID", 17);
  _call_desc.arg_0 = &(TDevice&) device;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_02000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_40000000* tcd = (_0RL_cd_0a5ed34278f815d0_40000000*)cd;
  STI_Server_Device::_impl_ServerConfigure* impl = (STI_Server_Device::_impl_ServerConfigure*) svnt->_ptrToInterface(STI_Server_Device::ServerConfigure::_PD_repoId);
  tcd->result = impl->attributes();


}

STI_Server_Device::TAttributeSeq* STI_Server_Device::_objref_ServerConfigure::attributes()
{
  _0RL_cd_0a5ed34278f815d0_40000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_02000000, "_get_attributes", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_60000000* tcd = (_0RL_cd_0a5ed34278f815d0_60000000*)cd;
  STI_Server_Device::_impl_ServerConfigure* impl = (STI_Server_Device::_impl_ServerConfigure*) svnt->_ptrToInterface(STI_Server_Device::ServerConfigure::_PD_repoId);
  tcd->result = impl->serverName();


}

char* STI_Server_Device::_objref_ServerConfigure::serverName()
{
  _0RL_cd_0a5ed34278f815d0_60000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_12000000, "_get_serverName", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Server_Device::_pof_ServerConfigure::~_pof_ServerConfigure() {}


omniObjRef*
STI_Server_Device::_pof_ServerConfigure::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Server_Device::_objref_ServerConfigure(ior, id);
}


::CORBA::Boolean
STI_Server_Device::_pof_ServerConfigure::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Server_Device::ServerConfigure::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Server_Device::_pof_ServerConfigure _the_pof_STI__Server__Device_mServerConfigure;

STI_Server_Device::_impl_ServerConfigure::~_impl_ServerConfigure() {}


::CORBA::Boolean
STI_Server_Device::_impl_ServerConfigure::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "registerDevice") ) {

    _0RL_cd_0a5ed34278f815d0_71000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_81000000, "registerDevice", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setChannels") ) {

    _0RL_cd_0a5ed34278f815d0_91000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_a1000000, "setChannels", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "activateDevice") ) {

    _0RL_cd_0a5ed34278f815d0_b1000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_c1000000, "activateDevice", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "removeDevice") ) {

    _0RL_cd_0a5ed34278f815d0_b1000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_d1000000, "removeDevice", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "generateDeviceID") ) {

    _0RL_cd_0a5ed34278f815d0_e1000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_f1000000, "generateDeviceID", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_attributes") ) {

    _0RL_cd_0a5ed34278f815d0_40000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_02000000, "_get_attributes", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_serverName") ) {

    _0RL_cd_0a5ed34278f815d0_60000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_12000000, "_get_serverName", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Server_Device::_impl_ServerConfigure::_ptrToInterface(const char* id)
{
  if( id == ::STI_Server_Device::ServerConfigure::_PD_repoId )
    return (::STI_Server_Device::_impl_ServerConfigure*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Server_Device::ServerConfigure::_PD_repoId) )
    return (::STI_Server_Device::_impl_ServerConfigure*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Server_Device::_impl_ServerConfigure::_mostDerivedRepoId()
{
  return ::STI_Server_Device::ServerConfigure::_PD_repoId;
}

STI_Server_Device::CommandLine_ptr STI_Server_Device::CommandLine_Helper::_nil() {
  return ::STI_Server_Device::CommandLine::_nil();
}

::CORBA::Boolean STI_Server_Device::CommandLine_Helper::is_nil(::STI_Server_Device::CommandLine_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI_Server_Device::CommandLine_Helper::release(::STI_Server_Device::CommandLine_ptr p) {
  ::CORBA::release(p);
}

void STI_Server_Device::CommandLine_Helper::marshalObjRef(::STI_Server_Device::CommandLine_ptr obj, cdrStream& s) {
  ::STI_Server_Device::CommandLine::_marshalObjRef(obj, s);
}

STI_Server_Device::CommandLine_ptr STI_Server_Device::CommandLine_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI_Server_Device::CommandLine::_unmarshalObjRef(s);
}

void STI_Server_Device::CommandLine_Helper::duplicate(::STI_Server_Device::CommandLine_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

STI_Server_Device::CommandLine_ptr
STI_Server_Device::CommandLine::_duplicate(::STI_Server_Device::CommandLine_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

STI_Server_Device::CommandLine_ptr
STI_Server_Device::CommandLine::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI_Server_Device::CommandLine_ptr
STI_Server_Device::CommandLine::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI_Server_Device::CommandLine_ptr
STI_Server_Device::CommandLine::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_CommandLine _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_CommandLine* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_CommandLine;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI_Server_Device::CommandLine::_PD_repoId = "IDL:STI_Server_Device/CommandLine:1.0";


STI_Server_Device::_objref_CommandLine::~_objref_CommandLine() {
  
}


STI_Server_Device::_objref_CommandLine::_objref_CommandLine(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI_Server_Device::CommandLine::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI_Server_Device::_objref_CommandLine::_ptrToObjRef(const char* id)
{
  if( id == ::STI_Server_Device::CommandLine::_PD_repoId )
    return (::STI_Server_Device::CommandLine_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::STI_Server_Device::CommandLine::_PD_repoId) )
    return (::STI_Server_Device::CommandLine_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_22000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_20000000* tcd = (_0RL_cd_0a5ed34278f815d0_20000000*)cd;
  STI_Server_Device::_impl_CommandLine* impl = (STI_Server_Device::_impl_CommandLine*) svnt->_ptrToInterface(STI_Server_Device::CommandLine::_PD_repoId);
  tcd->result = impl->execute(tcd->arg_0);


}

char* STI_Server_Device::_objref_CommandLine::execute(const char* args)
{
  _0RL_cd_0a5ed34278f815d0_20000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_22000000, "execute", 8);
  _call_desc.arg_0 = args;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSTI__Server__Device_mCommandLine
class _0RL_cd_0a5ed34278f815d0_32000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_32000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Server_Device::CommandLine_var arg_0_;
  STI_Server_Device::CommandLine_ptr arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_0a5ed34278f815d0_32000000::marshalArguments(cdrStream& _n)
{
  STI_Server_Device::CommandLine::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_0a5ed34278f815d0_32000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = STI_Server_Device::CommandLine::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_0a5ed34278f815d0_32000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_0a5ed34278f815d0_32000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_42000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_32000000* tcd = (_0RL_cd_0a5ed34278f815d0_32000000*)cd;
  STI_Server_Device::_impl_CommandLine* impl = (STI_Server_Device::_impl_CommandLine*) svnt->_ptrToInterface(STI_Server_Device::CommandLine::_PD_repoId);
  tcd->result = impl->registerPartnerDevice(tcd->arg_0);


}

::CORBA::Boolean STI_Server_Device::_objref_CommandLine::registerPartnerDevice(CommandLine_ptr partner)
{
  _0RL_cd_0a5ed34278f815d0_32000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_42000000, "registerPartnerDevice", 22);
  _call_desc.arg_0 = partner;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_52000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_b1000000* tcd = (_0RL_cd_0a5ed34278f815d0_b1000000*)cd;
  STI_Server_Device::_impl_CommandLine* impl = (STI_Server_Device::_impl_CommandLine*) svnt->_ptrToInterface(STI_Server_Device::CommandLine::_PD_repoId);
  tcd->result = impl->unregisterPartnerDevice(tcd->arg_0);


}

::CORBA::Boolean STI_Server_Device::_objref_CommandLine::unregisterPartnerDevice(const char* deviceID)
{
  _0RL_cd_0a5ed34278f815d0_b1000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_52000000, "unregisterPartnerDevice", 24);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSTI__Server__Device_mTStringSeq
class _0RL_cd_0a5ed34278f815d0_62000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a5ed34278f815d0_62000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  STI_Server_Device::TStringSeq_var result;
};

void _0RL_cd_0a5ed34278f815d0_62000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI_Server_Device::TStringSeq&) result >>= _n;

}

void _0RL_cd_0a5ed34278f815d0_62000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI_Server_Device::TStringSeq;
  (STI_Server_Device::TStringSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_72000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_62000000* tcd = (_0RL_cd_0a5ed34278f815d0_62000000*)cd;
  STI_Server_Device::_impl_CommandLine* impl = (STI_Server_Device::_impl_CommandLine*) svnt->_ptrToInterface(STI_Server_Device::CommandLine::_PD_repoId);
  tcd->result = impl->requiredPartnerDevices();


}

STI_Server_Device::TStringSeq* STI_Server_Device::_objref_CommandLine::requiredPartnerDevices()
{
  _0RL_cd_0a5ed34278f815d0_62000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_72000000, "_get_requiredPartnerDevices", 28);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_0a5ed34278f815d0_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a5ed34278f815d0_60000000* tcd = (_0RL_cd_0a5ed34278f815d0_60000000*)cd;
  STI_Server_Device::_impl_CommandLine* impl = (STI_Server_Device::_impl_CommandLine*) svnt->_ptrToInterface(STI_Server_Device::CommandLine::_PD_repoId);
  tcd->result = impl->deviceID();


}

char* STI_Server_Device::_objref_CommandLine::deviceID()
{
  _0RL_cd_0a5ed34278f815d0_60000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_82000000, "_get_deviceID", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
STI_Server_Device::_pof_CommandLine::~_pof_CommandLine() {}


omniObjRef*
STI_Server_Device::_pof_CommandLine::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI_Server_Device::_objref_CommandLine(ior, id);
}


::CORBA::Boolean
STI_Server_Device::_pof_CommandLine::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::STI_Server_Device::CommandLine::_PD_repoId) )
    return 1;
  
  return 0;
}

const STI_Server_Device::_pof_CommandLine _the_pof_STI__Server__Device_mCommandLine;

STI_Server_Device::_impl_CommandLine::~_impl_CommandLine() {}


::CORBA::Boolean
STI_Server_Device::_impl_CommandLine::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "execute") ) {

    _0RL_cd_0a5ed34278f815d0_20000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_22000000, "execute", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerPartnerDevice") ) {

    _0RL_cd_0a5ed34278f815d0_32000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_42000000, "registerPartnerDevice", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unregisterPartnerDevice") ) {

    _0RL_cd_0a5ed34278f815d0_b1000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_52000000, "unregisterPartnerDevice", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_requiredPartnerDevices") ) {

    _0RL_cd_0a5ed34278f815d0_62000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_72000000, "_get_requiredPartnerDevices", 28, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_deviceID") ) {

    _0RL_cd_0a5ed34278f815d0_60000000 _call_desc(_0RL_lcfn_0a5ed34278f815d0_82000000, "_get_deviceID", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI_Server_Device::_impl_CommandLine::_ptrToInterface(const char* id)
{
  if( id == ::STI_Server_Device::CommandLine::_PD_repoId )
    return (::STI_Server_Device::_impl_CommandLine*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::STI_Server_Device::CommandLine::_PD_repoId) )
    return (::STI_Server_Device::_impl_CommandLine*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
STI_Server_Device::_impl_CommandLine::_mostDerivedRepoId()
{
  return ::STI_Server_Device::CommandLine::_PD_repoId;
}

POA_STI_Server_Device::Configure::~Configure() {}

POA_STI_Server_Device::DataTransfer::~DataTransfer() {}

POA_STI_Server_Device::DeviceControl::~DeviceControl() {}

POA_STI_Server_Device::ServerConfigure::~ServerConfigure() {}

POA_STI_Server_Device::CommandLine::~CommandLine() {}

