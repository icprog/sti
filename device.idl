/*! \file
 *  \author Jonathan David Harvey
 *  \author Jason Michael Hogan
 *  \author David Marvin Slaughter Johnson
 *  \author Olaf Mandel
 *  \brief Interface Definition of the Server-Device CORBA communication.
 *  \section license License
 *
 *  Copyright (C) 2008 Jonathan Harvey <harv@stanford.edu>\n
 *  Copyright (C) 2008 Jason Hogan <hogan@stanford.edu>\n
 *  Copyright (C) 2008 David Johnson <dmsj@stanford.edu>\n
 *  Copyright (C) 2008 Olaf Mandel <mandel@stanford.edu>\n
 *  This file is part of Stanford Timing Interface (STI).
 *
 *  STI is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  STI is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with STI.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef DEVICE_IDL
#define DEVICE_IDL

module STI_Server_Device
{
    typedef sequence<string> TStringSeq;

    interface Configure
	{
	    readonly attribute TStringSeq attributes;
		readonly attribute string deviceType;

	    boolean setAttribute(in string key, in string value);
		string getAttribute(in string key);
	};

    struct TDDS {
        double freq;
        double phase;
        double ampl;
    };

    enum TValue {ValueNumber, ValueString, ValueDDSTriplet};

    union TValMixed switch(TValue) {
        case ValueNumber    : double number;
        case ValueString    : string stringVal;
        case ValueDDSTriplet: TDDS   triplet;
    };

    struct TDeviceEvent {
	    unsigned short channel;   //== STI_Client_Server::TChannel.channel
        double         time;
        TValMixed      value;
    };

    typedef sequence<TDeviceEvent>  TDeviceEventSeq;

    typedef sequence<unsigned short> TshortSeq;

    struct TPicture {
        unsigned short rowLength;
        TshortSeq      pixels;    //Concatenation of rows (starting in the lower left)
    };

    enum TData {DataNumber, DataString, DataPicture};

    union TDataMixed switch(TData) {
        case DataNumber  : double   number;
        case DataString  : string   stringVal;
        case DataPicture : TPicture picture;
    };

    typedef sequence<TDataMixed>    TDataMixedSeq;    //List over measurements of one channel
    typedef sequence<TDataMixedSeq> TDataMixedSeqSeq; //List over channels of device

    interface DataTransfer
	{
	    readonly attribute string           errMsg;
		readonly attribute TDataMixedSeqSeq measurements;

        boolean transferEvents(in TDeviceEventSeq events, in boolean dryrun);
	};

    enum TStatusLevel {LevelStopped, LevelRunning, LevelPaused, LevelError };

    struct TStatus {
        TStatusLevel   level;
        double         curTime;
        unsigned long  curEvent;
        unsigned short curCycle;
    };

    interface DeviceControl
    {
        readonly attribute string errMsg;
        TStatus status();

        void reset();
        void start();       //Prepare for playback on next trigger
        void trigger();     //Manually trigger playback
        void stop();        //Stop current playback
    };
};

#endif
