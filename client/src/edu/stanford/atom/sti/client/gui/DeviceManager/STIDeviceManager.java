/*
 * STIDeviceManager.java
 *
 * Created on August 10, 2008, 7:20 AM
 */

package edu.stanford.atom.sti.client.gui.DeviceManager;

//import edu.stanford.atom.sti.client.gui.table.*;
import java.util.Vector;
import edu.stanford.atom.sti.client.comm.corba.DeviceConfigure;
import edu.stanford.atom.sti.device.comm.corba.TDevice;


import edu.stanford.atom.sti.client.gui.DeviceManager.DeviceTab;

/**
 *
 * @author  Jason
 */
public class STIDeviceManager extends javax.swing.JPanel {

    public Vector<DeviceTab> deviceTabs = new Vector<DeviceTab>();
    public DeviceConfigure deviceConfigure;
    public TDevice[] devices;


    /** Creates new form STIDeviceManager */
    public STIDeviceManager(){
       initComponents();
    }

    public void setDeviceConfigure(DeviceConfigure deviceConfig) {
        deviceConfigure = deviceConfig;
        try {
            refreshDevices();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    public boolean isUnique(String device_id) {
        for(int i=0; i < deviceTabs.size(); i++) {
            if( device_id.equals(deviceTabs.elementAt(i).getDeviceID())) {
                return false;   // DeviceTab is already registered for this device
            }
        }
        return true;
    }

    public boolean isOnServer(String device_id) {
        for(int i=0; i < devices.length; i++) {
            if(device_id.equals(devices[i].deviceID)) {
                return true;
            }
        }
        return false;
    }
    
    public void addDeviceTab(TDevice tDevice) {
        if(isUnique(tDevice.deviceID)) {
            deviceTabs.addElement(new DeviceTab());
            deviceTabs.lastElement().registerDevice(tDevice, deviceConfigure);
            deviceTabs.lastElement().setTabIndex(deviceTabs.size()-1);

            // look for other instances of this deviceName
            int instances = 0;  // will find itself
            for(int i=0; i < deviceTabs.size(); i++) {
                if(tDevice.deviceName.equals(
                        deviceTabs.elementAt(i).getTDevice().deviceName)) {
                    instances++;
                }
            }
            // Devices of the same type have tab titles that are numbered sequentially
            if(instances > 1) {
                deviceTabbedPane.addTab(tDevice.deviceName + " " + instances, deviceTabs.lastElement());
            } else {
                deviceTabbedPane.addTab(tDevice.deviceName, deviceTabs.lastElement());
            }
        }
    }

    public void removeDeviceTab(int index) {
        deviceTabbedPane.removeTabAt(index);
        deviceTabs.remove(index);

        //Reindex so DeviceTab indicies match JTabbedPane indicies
        for (int i = index; i < deviceTabs.size(); i++) {
            deviceTabs.elementAt(i).setTabIndex(i);
        }
    }
    public void refreshDevices() {
        boolean status;

        do {
            status = true;

            for (int i = 0; i < deviceTabs.size(); i++) {
                // Check if device is still alive -- dead devices will
                // automatically be removed by the STI Server.
                status &= deviceTabs.elementAt(i).deviceStatus();
            }

            devices = deviceConfigure.devices();

            // add tabs for any new devices
            for (int i = 0; i < devices.length; i++) {
                addDeviceTab(devices[i]);
            }

            // remove tabs for any dead devices
            if (devices.length < deviceTabs.size()) {
                for (int i = 0; i < deviceTabs.size(); i++) {
                    if (!isOnServer(deviceTabs.elementAt(i).getDeviceID())) {
                        // this device is no longer registered with the server
                        removeDeviceTab(deviceTabs.elementAt(i).getTabIndex());
                    }
                }
            }

        //Continue to refresh until no more devices are removed
        } while (!status);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deviceTabbedPane = new javax.swing.JTabbedPane();
        jButton1 = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(100, 500));

        deviceTabbedPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jButton1.setText("Refresh Devices");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(deviceTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(deviceTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        refreshDevices();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTabbedPane deviceTabbedPane;
    public javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

}
