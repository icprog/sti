/*
 * PlugInManager.java
 *
 * Created on November 16, 2008, 6:34 PM
 */

package edu.stanford.atom.sti.client.gui;
import javax.swing.Icon;
import javax.swing.JTabbedPane;
import java.awt.*;




/**
 *
 * @author  Owner
 */
public class PlugInManager extends JTabbedPane {
    
    public PlugInManager() {
        initComponents();
    }
    
    @Override
    public void insertTab(String title, Icon icon, Component component, String tip, int index) {
        if(component.getClass() == PlugInTab.class) {
            insertTab(title, icon, (PlugInTab)component, tip, index);
        }
        else {
            System.err.println("Error:  PlugInManager expects PlugInTab" 
                    + " components \nbut an attempt was made to add a " 
                    + "component of class '" + component.getClass().getName() +"'.");
        }
    }

    public void insertTab(String title, Icon icon, PlugInTab component, String tip, int index) {
        
        // Get the stored tab index, if defined
        int tabIndex = ((PlugInTab)component).getTabIndex();   
        if(tabIndex == -1) {     //this PlugInTab has never been added
            tabIndex = index;
            ((PlugInTab)component).setTabIndex(tabIndex);
        }
        
        int tabCount = getTabCount();
        
        // Find the appropriate place to insert this tab
        for(int i=0; i < tabCount; i++) {
            if(tabIndex < ((PlugInTab)super.getComponentAt(i)).getTabIndex() ) {
                tabIndex = i;
                break;
            }
        }
        
        // Make sure there is not index out of bounds exception
        if(tabIndex > tabCount) {
            tabIndex = tabCount;
        }
        
        super.insertTab(title, icon, component, tip, tabIndex);
        
        tabIndex = indexOfComponent(component);
        
        // Set tab title
        String tabTitle = ((PlugInTab)component).getTabName();
        if(tabTitle == null) {   //this PlugInTab has never been added
            tabTitle = title;
        }
        ((PlugInTab)component).setTabName(tabTitle);
        setTitleAt(tabIndex, tabTitle);

        // Select newly inserted tab
        super.setSelectedIndex(tabIndex);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                formComponentRemoved(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
        // TODO add your handling code here:
  //      System.out.println("Added! " + evt.paramString() + " , " + evt.toString());
  //      mainTabbedPane.setTitleAt(mainTabbedPane.getTabCount() - 1, evt.getChild().getName());
    }//GEN-LAST:event_formComponentAdded

    private void formComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentRemoved

        // JToolBars (and PlugInTabs) cannot be dynamically resized.
        // Make the newly floating PlugInTab the size it was while in the tabbed pane.
        evt.getChild().setSize(evt.getChild().getSize());           // has no clear effect?
        evt.getChild().setPreferredSize(evt.getChild().getSize());  // This actually does it.
    }//GEN-LAST:event_formComponentRemoved
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
